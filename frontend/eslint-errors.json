[{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/App.js","messages":[{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  flex: 1,\n  justifyContent: 'center',\n  alignItems: 'center',\n  padding: 20\n}","line":200,"column":28,"nodeType":"ObjectExpression","endLine":205,"endColumn":22},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontSize: 18, fontWeight: 'bold', marginBottom: 10 }","line":207,"column":34,"nodeType":"ObjectExpression","endLine":207,"endColumn":88},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { textAlign: 'center', color: '#666' }","line":210,"column":34,"nodeType":"ObjectExpression","endLine":210,"endColumn":72}],"suppressedMessages":[{"ruleId":"no-undef","severity":2,"message":"'ErrorUtils' is not defined.","line":75,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":75,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import 'react-native-gesture-handler';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as SplashScreen from 'expo-splash-screen';\nimport React, { useEffect, useCallback } from 'react';\nimport { LogBox, Platform, View, Text, AppState } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { enableScreens } from 'react-native-screens';\n\n// Import web polyfills first - ONLY for web\nif (Platform.OS === 'web') {\n    require('./utils/webPolyfills');\n}\n\n// Apply global patches\nimport ErrorBoundaryWrapper from './components/common/ErrorBoundaryWrapper';\nimport RootNavigator from './navigation/RootNavigator';\nimport optimizedApiClient from './services/api/client';\nimport { AppProvider } from './store/contexts/AppContext';\nimport { AuthProvider } from './store/contexts/AuthContext';\nimport { ThemeProvider } from './store/contexts/ThemeContext';\nimport { devLog, devError, devWarn } from './utils';\nimport { showErrorAlert } from './utils/alerts';\nimport appStability, { getPerformanceReport } from './utils/appStability';\nimport appStabilityManager from './utils/appStabilityEnhancements';\nimport { cache } from './utils/cacheManager';\nimport { loadFonts } from './utils/fontLoader';\nimport { applyGlobalPatches } from './utils/globalPatches';\nimport { onNetworkChange } from './utils/networkRetry';\n\napplyGlobalPatches();\n\n// Enable screens for better performance\nenableScreens();\n\n// Ignore specific warnings\nLogBox.ignoreLogs([\n    'Non-serializable values were found in the navigation state',\n    'VirtualizedLists should never be nested',\n    'Invariant Violation: \"main\" has not been registered',\n    'Setting a timer for a long period of time',\n    'Possible Unhandled Promise Rejection',\n]);\n\n// Keep splash screen visible while loading (native only)\nif (Platform.OS !== 'web') {\n    SplashScreen.preventAutoHideAsync().catch(() => {\n        // Handle error silently\n    });\n}\n\n// Global error handler\nconst globalErrorHandler = (error, isFatal) => {\n    if (__DEV__) {\n        devError('App', 'Global error', { error, isFatal });\n    }\n\n    // Log to error tracking service\n    // Sentry.captureException(error);\n\n    if (isFatal) {\n        showErrorAlert(\n            'Application Error',\n            'The app encountered a critical error and needs to restart.',\n            () => {\n                // Restart app or navigate to safe screen\n            },\n        );\n    }\n};\n\n// Set global error handlers\n// eslint-disable-next-line no-undef\nif (typeof ErrorUtils !== 'undefined') {\n    // eslint-disable-next-line no-undef\n    ErrorUtils.setGlobalHandler(globalErrorHandler);\n}\n\nexport default function App() {\n    const [appIsReady, setAppIsReady] = React.useState(false);\n    const [initError, setInitError] = React.useState(null);\n    const appStateRef = React.useRef(AppState.currentState);\n\n    useEffect(() => {\n        async function prepare() {\n            try {\n                // Set up auth failure handler\n                optimizedApiClient.setAuthFailureHandler(() => {\n                    // Handle auth failure globally\n                    const { resetRoot } = require('./navigation/NavigationService');\n                    resetRoot();\n                });\n\n                // Load fonts (will handle web gracefully)\n                await loadFonts();\n\n                // Set up API client authorization header if token exists\n                const token = await AsyncStorage.getItem('userToken');\n                if (token) {\n                    optimizedApiClient.client.defaults.headers.common[\n                        'Authorization'\n                    ] = `Bearer ${token}`;\n                }\n\n                // Preload critical cache data\n                await cache.preload([\n                    {\n                        key: 'app_config',\n                        fetcher: async () => {\n                            // Fetch app configuration\n                            return { version: '1.0.0', features: {} };\n                        },\n                        options: { ttl: 24 * 60 * 60 * 1000, persistent: true },\n                    },\n                ]);\n\n                // Initialize app stability monitoring\n                appStabilityManager.initialize();\n                \n                // Add artificial delay for splash screen (native only)\n                if (Platform.OS !== 'web') {\n                    await new Promise((resolve) => setTimeout(resolve, 1000));\n                }\n            } catch (e) {\n                devWarn('App', 'App initialization error', e);\n                setInitError(e);\n            } finally {\n                setAppIsReady(true);\n            }\n        }\n\n        prepare();\n\n        // Monitor app state changes\n        const subscription = AppState.addEventListener('change', (nextAppState) => {\n            if (appStateRef.current.match(/inactive|background/) && nextAppState === 'active') {\n                // App has come to the foreground\n                devLog('App', 'App has come to the foreground!');\n\n                // Refresh critical data\n                if (global.refreshUserData) {\n                    global.refreshUserData();\n                }\n            }\n            appStateRef.current = nextAppState;\n        });\n\n        // Monitor network changes\n        const unsubscribeNetwork = onNetworkChange((isOnline) => {\n            devLog('App', `Network status: ${isOnline ? 'Online' : 'Offline'}`);\n\n            // Set global network status\n            global.isOnline = isOnline;\n\n            // Show/hide offline banner\n            if (global.setOfflineBanner) {\n                global.setOfflineBanner(!isOnline);\n            }\n        });\n\n        // Cleanup\n        return () => {\n            // Use the subscription's remove method instead of removeEventListener\n            if (subscription && typeof subscription.remove === 'function') {\n                subscription.remove();\n            }\n            unsubscribeNetwork();\n            appStability.cleanup();\n        };\n    }, []);\n\n    const onLayoutRootView = useCallback(async () => {\n        if (appIsReady && Platform.OS !== 'web') {\n            await SplashScreen.hideAsync().catch(() => {\n                // Handle error silently\n            });\n        }\n    }, [appIsReady]);\n\n    // Performance monitoring in development\n    useEffect(() => {\n        if (__DEV__) {\n            const interval = setInterval(() => {\n                const report = getPerformanceReport();\n                devLog('App', 'Performance Report', report);\n            }, 60000); // Every minute\n\n            return () => clearInterval(interval);\n        }\n    }, []);\n\n    if (!appIsReady) {\n        return null;\n    }\n\n    // Show initialization error screen\n    if (initError) {\n        return (\n            <SafeAreaProvider>\n                <View\n                    style={{\n                        flex: 1,\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        padding: 20,\n                    }}\n                >\n                    <Text style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 10 }}>\n                        Initialization Error\n                    </Text>\n                    <Text style={{ textAlign: 'center', color: '#666' }}>\n                        {initError.message || 'Failed to initialize the app'}\n                    </Text>\n                </View>\n            </SafeAreaProvider>\n        );\n    }\n\n    return (\n        <ErrorBoundaryWrapper\n            showDetails={__DEV__}\n            onReset={() => {\n                // Reset app state\n                cache.clear();\n                setAppIsReady(false);\n                setInitError(null);\n                // Re-initialize\n                setTimeout(() => setAppIsReady(true), 100);\n            }}\n        >\n            <SafeAreaProvider onLayout={onLayoutRootView}>\n                <AppProvider>\n                    <ThemeProvider>\n                        <AuthProvider>\n                            <RootNavigator />\n                        </AuthProvider>\n                    </ThemeProvider>\n                </AppProvider>\n            </SafeAreaProvider>\n        </ErrorBoundaryWrapper>\n    );\n}\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/common/CashedImage.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":4,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":13},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadImage'. Either include it or remove the dependency array.","line":15,"column":8,"nodeType":"ArrayExpression","endLine":15,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [loadImage, source.uri]","fix":{"range":[531,543],"text":"[loadImage, source.uri]"}}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { justifyContent: 'center', alignItems: 'center' }","line":56,"column":34,"nodeType":"ObjectExpression","endLine":56,"endColumn":84}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/common/CachedImage.js\nimport * as Crypto from 'expo-crypto';\nimport * as FileSystem from 'expo-file-system';\nimport React, { useState, useEffect } from 'react';\nimport { Image, View, ActivityIndicator } from 'react-native';\n\nconst IMAGE_CACHE_DIR = `${FileSystem.cacheDirectory}images/`;\n\nexport const CachedImage = ({ source, style, ...props }) => {\n    const [imageUri, setImageUri] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        loadImage();\n    }, [source.uri]);\n\n    const loadImage = async () => {\n        if (!source.uri) {\n            setLoading(false);\n            return;\n        }\n\n        try {\n            // Create cache directory if it doesn't exist\n            await FileSystem.makeDirectoryAsync(IMAGE_CACHE_DIR, {\n                intermediates: true,\n            });\n\n            // Generate cache key\n            const hash = await Crypto.digestStringAsync(\n                Crypto.CryptoDigestAlgorithm.MD5,\n                source.uri,\n            );\n            const cachedPath = `${IMAGE_CACHE_DIR}${hash}.jpg`;\n\n            // Check if cached\n            const info = await FileSystem.getInfoAsync(cachedPath);\n\n            if (info.exists) {\n                setImageUri(cachedPath);\n            } else {\n                // Download and cache\n                await FileSystem.downloadAsync(source.uri, cachedPath);\n                setImageUri(cachedPath);\n            }\n        } catch (error) {\n            console.error('Image cache error:', error);\n            setImageUri(source.uri); // Fallback to network image\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    if (loading) {\n        return (\n            <View style={[style, { justifyContent: 'center', alignItems: 'center' }]}>\n                <ActivityIndicator />\n            </View>\n        );\n    }\n\n    return <Image {...props} source={{ uri: imageUri }} style={style} />;\n};\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/common/EmptyState.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text } from 'react-native';\n\nimport { styles } from '../../styles/components/common/EmptyStateStyles';\n\nimport Icon from './Icon.js';\n\nconst EmptyState = ({\n    icon = 'inbox-outline',\n    title = 'No data available',\n    message = 'There is nothing to display at the moment.',\n    iconSize = 64,\n    iconColor,\n    action,\n    style,\n    titleStyle,\n    messageStyle,\n}) => {\n    return (\n        <View style={[styles.container, style]}>\n            <Icon\n                name={icon}\n                size={iconSize}\n                color={iconColor || styles.icon.color}\n                style={styles.icon}\n            />\n            <Text style={[styles.title, titleStyle]}>{title}</Text>\n            <Text style={[styles.message, messageStyle]}>{message}</Text>\n            {action && <View style={styles.actionContainer}>{action}</View>}\n        </View>\n    );\n};\n\nexport default EmptyState;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/common/ErrorBoundary.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":42}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Component } from 'react';\nimport { View, Text, TouchableOpacity, ScrollView } from 'react-native';\n\nimport { styles } from '../../styles/components/common/ErrorBoundaryStyles';\n\nimport Icon from './Icon.js';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false, error: null, errorInfo: null };\n    }\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true };\n    }\n\n    componentDidCatch(error, errorInfo) {\n        // Log error to error reporting service\n        console.error('Error caught by ErrorBoundary:', error, errorInfo);\n        this.setState({\n            error,\n            errorInfo,\n        });\n    }\n\n    resetError = () => {\n        this.setState({ hasError: false, error: null, errorInfo: null });\n    };\n\n    render() {\n        if (this.state.hasError) {\n            return (\n                <ScrollView style={styles.container} contentContainerStyle={styles.content}>\n                    <Icon name=\"alert-circle-outline\" size={80} color=\"#EF4444\" />\n                    <Text style={styles.title}>Oops! Something went wrong</Text>\n                    <Text style={styles.message}>\n                        We're sorry for the inconvenience. Please try restarting the app.\n                    </Text>\n\n                    <TouchableOpacity style={styles.button} onPress={this.resetError}>\n                        <Text style={styles.buttonText}>Try Again</Text>\n                    </TouchableOpacity>\n\n                    {__DEV__ && (\n                        <View style={styles.errorDetails}>\n                            <Text style={styles.errorTitle}>Error Details (Dev Only):</Text>\n                            <Text style={styles.errorText}>\n                                {this.state.error && this.state.error.toString()}\n                            </Text>\n                            <Text style={styles.errorStack}>\n                                {this.state.errorInfo && this.state.errorInfo.componentStack}\n                            </Text>\n                        </View>\n                    )}\n                </ScrollView>\n            );\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/common/ErrorBoundaryWrapper.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":22,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":62,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'errorInfo' is defined but never used. Allowed unused args must match /^_/u.","line":62,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":42}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/common/ErrorBoundaryWrapper.js\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { Component } from 'react';\nimport { View, Text, TouchableOpacity, ScrollView, StyleSheet, Platform } from 'react-native';\n\nimport { colors, fonts, spacing } from '../../constants/theme';\n\nimport Icon from './Icon';\n\n\nclass ErrorBoundaryWrapper extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n            error: null,\n            errorInfo: null,\n            errorCount: 0,\n        };\n    }\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true };\n    }\n\n    async componentDidCatch(error, errorInfo) {\n        // Log error to console in development\n        if (__DEV__) {\n            console.error('ErrorBoundary caught:', error);\n            console.error('Error Info:', errorInfo);\n        }\n\n        // Track error count\n        const errorCount = this.state.errorCount + 1;\n\n        // Store error details\n        this.setState({\n            error,\n            errorInfo,\n            errorCount,\n        });\n\n        // Log to error tracking service (e.g., Sentry, Bugsnag)\n        this.logErrorToService(error, errorInfo);\n\n        // Store error in AsyncStorage for debugging\n        try {\n            const errorLog = {\n                error: error.toString(),\n                componentStack: errorInfo.componentStack,\n                timestamp: new Date().toISOString(),\n                platform: Platform.OS,\n                version: Platform.Version,\n            };\n\n            await AsyncStorage.setItem(`error_log_${Date.now()}`, JSON.stringify(errorLog));\n        } catch (storageError) {\n            console.error('Failed to store error log:', storageError);\n        }\n    }\n\n    logErrorToService = (error, errorInfo) => {\n        // TODO: Integrate with error tracking service\n        // Example: Sentry.captureException(error, { extra: errorInfo });\n    };\n\n    resetError = () => {\n        this.setState({\n            hasError: false,\n            error: null,\n            errorInfo: null,\n        });\n\n        // Call optional recovery callback\n        if (this.props.onReset) {\n            this.props.onReset();\n        }\n    };\n\n    reloadApp = () => {\n        // In production, you might want to reload the app\n        if (!__DEV__) {\n            // RNRestart.Restart(); // If using react-native-restart\n        } else {\n            this.resetError();\n        }\n    };\n\n    render() {\n        if (this.state.hasError) {\n            const { fallback, showDetails = __DEV__ } = this.props;\n\n            // Use custom fallback if provided\n            if (fallback) {\n                return fallback(this.state.error, this.resetError);\n            }\n\n            return (\n                <View style={styles.container}>\n                    <ScrollView\n                        contentContainerStyle={styles.scrollContent}\n                        showsVerticalScrollIndicator={false}\n                    >\n                        <View style={styles.content}>\n                            <Icon\n                                name=\"alert-circle-outline\"\n                                size={80}\n                                color={colors.error}\n                                style={styles.icon}\n                            />\n\n                            <Text style={styles.title}>Oops! Something went wrong</Text>\n\n                            <Text style={styles.message}>\n                                {this.state.errorCount > 2\n                                    ? 'The app is experiencing repeated errors. Please restart the app.'\n                                    : 'We\\'re sorry for the inconvenience. The error has been logged and we\\'ll fix it soon.'}\n                            </Text>\n\n                            <View style={styles.buttonContainer}>\n                                <TouchableOpacity\n                                    style={[styles.button, styles.primaryButton]}\n                                    onPress={this.resetError}\n                                >\n                                    <Text style={styles.primaryButtonText}>Try Again</Text>\n                                </TouchableOpacity>\n\n                                {this.state.errorCount > 2 && (\n                                    <TouchableOpacity\n                                        style={[styles.button, styles.secondaryButton]}\n                                        onPress={this.reloadApp}\n                                    >\n                                        <Text style={styles.secondaryButtonText}>Restart App</Text>\n                                    </TouchableOpacity>\n                                )}\n                            </View>\n\n                            {showDetails && this.state.error && (\n                                <View style={styles.errorDetails}>\n                                    <Text style={styles.errorTitle}>Error Details (Dev Only)</Text>\n\n                                    <View style={styles.errorBox}>\n                                        <Text style={styles.errorLabel}>Error:</Text>\n                                        <Text style={styles.errorText}>\n                                            {this.state.error.toString()}\n                                        </Text>\n                                    </View>\n\n                                    {this.state.error.stack && (\n                                        <View style={styles.errorBox}>\n                                            <Text style={styles.errorLabel}>Stack Trace:</Text>\n                                            <ScrollView\n                                                style={styles.stackTrace}\n                                                horizontal\n                                                showsHorizontalScrollIndicator\n                                            >\n                                                <Text style={styles.errorStack}>\n                                                    {this.state.error.stack}\n                                                </Text>\n                                            </ScrollView>\n                                        </View>\n                                    )}\n\n                                    {this.state.errorInfo && (\n                                        <View style={styles.errorBox}>\n                                            <Text style={styles.errorLabel}>Component Stack:</Text>\n                                            <ScrollView\n                                                style={styles.stackTrace}\n                                                horizontal\n                                                showsHorizontalScrollIndicator\n                                            >\n                                                <Text style={styles.errorStack}>\n                                                    {this.state.errorInfo.componentStack}\n                                                </Text>\n                                            </ScrollView>\n                                        </View>\n                                    )}\n                                </View>\n                            )}\n                        </View>\n                    </ScrollView>\n                </View>\n            );\n        }\n\n        return this.props.children;\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: colors.background,\n    },\n    scrollContent: {\n        flexGrow: 1,\n        justifyContent: 'center',\n    },\n    content: {\n        padding: spacing.xl,\n        alignItems: 'center',\n    },\n    icon: {\n        marginBottom: spacing.xl,\n    },\n    title: {\n        fontSize: fonts.sizes.xxl,\n        fontWeight: 'bold',\n        color: colors.text,\n        textAlign: 'center',\n        marginBottom: spacing.md,\n    },\n    message: {\n        fontSize: fonts.sizes.md,\n        color: colors.textSecondary,\n        textAlign: 'center',\n        marginBottom: spacing.xl,\n        lineHeight: fonts.sizes.md * 1.5,\n    },\n    buttonContainer: {\n        width: '100%',\n        maxWidth: 300,\n    },\n    button: {\n        paddingVertical: spacing.md,\n        paddingHorizontal: spacing.xl,\n        borderRadius: 8,\n        marginBottom: spacing.md,\n    },\n    primaryButton: {\n        backgroundColor: colors.primary,\n    },\n    primaryButtonText: {\n        color: colors.textInverse,\n        fontSize: fonts.sizes.md,\n        fontWeight: '600',\n        textAlign: 'center',\n    },\n    secondaryButton: {\n        backgroundColor: colors.surface,\n        borderWidth: 1,\n        borderColor: colors.border,\n    },\n    secondaryButtonText: {\n        color: colors.text,\n        fontSize: fonts.sizes.md,\n        fontWeight: '600',\n        textAlign: 'center',\n    },\n    errorDetails: {\n        width: '100%',\n        marginTop: spacing.xl,\n        padding: spacing.md,\n        backgroundColor: colors.surface,\n        borderRadius: 8,\n        borderWidth: 1,\n        borderColor: colors.border,\n    },\n    errorTitle: {\n        fontSize: fonts.sizes.lg,\n        fontWeight: 'bold',\n        color: colors.error,\n        marginBottom: spacing.md,\n    },\n    errorBox: {\n        marginBottom: spacing.md,\n    },\n    errorLabel: {\n        fontSize: fonts.sizes.sm,\n        fontWeight: '600',\n        color: colors.text,\n        marginBottom: spacing.xs,\n    },\n    errorText: {\n        fontSize: fonts.sizes.sm,\n        color: colors.textSecondary,\n        fontFamily: Platform.OS === 'ios' ? 'Courier' : 'monospace',\n    },\n    stackTrace: {\n        maxHeight: 100,\n    },\n    errorStack: {\n        fontSize: fonts.sizes.xs,\n        color: colors.textSecondary,\n        fontFamily: Platform.OS === 'ios' ? 'Courier' : 'monospace',\n        lineHeight: fonts.sizes.xs * 1.5,\n    },\n});\n\n// HOC for wrapping components with error boundary\nexport const withErrorBoundary = (Component, errorBoundaryProps = {}) => {\n    const WrappedComponent = (props) => (\n        <ErrorBoundaryWrapper {...errorBoundaryProps}>\n            <Component {...props} />\n        </ErrorBoundaryWrapper>\n    );\n\n    WrappedComponent.displayName = `withErrorBoundary(${\n        Component.displayName || Component.name || 'Component'\n    })`;\n\n    return WrappedComponent;\n};\n\nexport default ErrorBoundaryWrapper;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/common/Icon.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { justifyContent: 'center', alignItems: 'center' }","line":138,"column":21,"nodeType":"ObjectExpression","endLine":143,"endColumn":22},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { textAlign: 'center' }","line":148,"column":28,"nodeType":"ObjectExpression","endLine":153,"endColumn":22},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { justifyContent: 'center', alignItems: 'center' }","line":182,"column":21,"nodeType":"ObjectExpression","endLine":182,"endColumn":98},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { textAlign: 'center' }","line":186,"column":30,"nodeType":"ObjectExpression","endLine":186,"endColumn":82}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Platform, Text, View } from 'react-native';\n\n// Icon mapping for web\nconst WEB_ICON_MAP = {\n    // Navigation & UI\n    home: '🏠',\n    'home-outline': '🏠',\n    message: '💬',\n    'message-outline': '💬',\n    'view-dashboard': '📊',\n    'view-dashboard-outline': '📊',\n    finance: '💰',\n    'book-open-page-variant': '📚',\n    'book-open-page-variant-outline': '📚',\n    forum: '👥',\n    'forum-outline': '👥',\n    'calendar-month': '📅',\n    'calendar-month-outline': '📅',\n    'account-circle': '👤',\n    'account-circle-outline': '👤',\n\n    // Common actions\n    'chevron-right': '›',\n    'chevron-left': '‹',\n    'chevron-down': '⌄',\n    'chevron-up': '⌃',\n    'arrow-left': '←',\n    'arrow-right': '→',\n    close: '✕',\n    plus: '+',\n    'plus-circle': '⊕',\n    minus: '-',\n    check: '✓',\n    'check-all': '✓✓',\n    'dots-vertical': '⋮',\n    'dots-horizontal': '⋯',\n    menu: '☰',\n    magnify: '🔍',\n    filter: '▽',\n    sort: '↕',\n\n    // Status & Info\n    'alert-circle-outline': '⚠',\n    'information-outline': '📣',\n    'help-circle-outline': '?',\n    'bell-outline': '🔔',\n    bell: '🔔',\n    star: '★',\n    'star-outline': '☆',\n    heart: '❤',\n    'heart-outline': '♡',\n\n    // Business & Professional\n    'briefcase-account': '💼',\n    'lightbulb-on': '💡',\n    'lightbulb-outline': '💡',\n    'rocket-launch': '🚀',\n    laptop: '💻',\n    calculator: '🧮',\n    bank: '🏦',\n    wallet: '💳',\n    'cash-remove': '💸',\n    'currency-eur': '€',\n\n    // Social & Communication\n    account: '👤',\n    'account-group': '👥',\n    'account-group-outline': '👥',\n    'account-plus': '👤+',\n    'account-check': '👤✓',\n    'account-cancel': '👤✕',\n    'message-plus': '💬+',\n    'message-text-outline': '💬',\n    send: '📤',\n    email: '✉',\n\n    // Files & Documents\n    'file-document-outline': '📄',\n    folder: '📁',\n    'clipboard-check': '📋✓',\n    'clipboard-check-outline': '📋',\n    'clipboard-text': '📋',\n    'card-account-details': '🆔',\n\n    // Location & Time\n    'map-marker': '📍',\n    'map-marker-outline': '📍',\n    'clock-outline': '🕐',\n    calendar: '📅',\n    'calendar-blank-outline': '📅',\n    'calendar-plus': '📅+',\n\n    // Actions & Settings\n    settings: '⚙',\n    cog: '⚙',\n    'account-cog': '👤⚙',\n    logout: '🚪',\n    login: '🔑',\n    pencil: '✏',\n    delete: '🗑',\n    'trash-can-outline': '🗑',\n    refresh: '🔄',\n    download: '⬇',\n    upload: '⬆',\n    share: '🔗',\n\n    // Forms & Input\n    eye: '👁',\n    'eye-off': '👁‍🗨',\n    lock: '🔒',\n    'lock-open': '🔓',\n    'shield-check-outline': '🛡✓',\n\n    // Business Specific\n    domain: '🏢',\n    identifier: '🆔',\n    'cash-multiple': '💵',\n    'finance-chart': '📈',\n    briefcase: '💼',\n    school: '🎓',\n    'party-popper': '🎉',\n    coffee: '☕',\n    presentation: '📊',\n\n    // Default fallback\n    default: '•',\n};\n\nconst Icon = ({ name, size = 24, color = '#000', style, ...props }) => {\n    // For web, always use emoji/text icons\n    if (Platform.OS === 'web') {\n        const iconChar = WEB_ICON_MAP[name] || WEB_ICON_MAP.default;\n\n        return (\n            <View\n                style={[\n                    {\n                        width: size,\n                        height: size,\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                    },\n                    style,\n                ]}\n            >\n                <Text\n                    style={{\n                        fontSize: size * 0.8,\n                        color: color,\n                        textAlign: 'center',\n                        lineHeight: size,\n                    }}\n                    allowFontScaling={false}\n                    {...props}\n                >\n                    {iconChar}\n                </Text>\n            </View>\n        );\n    }\n\n    // Native platform code\n    try {\n        const MaterialCommunityIcons =\n            require('react-native-vector-icons/MaterialCommunityIcons').default;\n        return (\n            <MaterialCommunityIcons\n                name={name}\n                size={size}\n                color={color}\n                style={style}\n                {...props}\n            />\n        );\n    } catch (error) {\n        // Fallback for native if vector icons fail\n        const iconChar = WEB_ICON_MAP[name] || WEB_ICON_MAP.default;\n        return (\n            <View\n                style={[\n                    { width: size, height: size, justifyContent: 'center', alignItems: 'center' },\n                    style,\n                ]}\n            >\n                <Text style={{ fontSize: size * 0.8, color, textAlign: 'center' }}>{iconChar}</Text>\n            </View>\n        );\n    }\n};\n\nexport default Icon;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/common/LoadingSpinner.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/common/LoadingSpinner.js\nimport React from 'react';\nimport { View, ActivityIndicator, Text } from 'react-native';\n\nimport { colors } from '../../constants/theme';\nimport { styles } from '../../styles/components/common/LoadingSpinnerStyles';\n\nconst LoadingSpinner = ({\n    size = 'large', // ActivityIndicator accepts 'small' or 'large' as strings\n    color = colors.primary,\n    text = '',\n    fullScreen = false,\n    overlay = false,\n    style,\n    textStyle,\n}) => {\n    const containerStyle = [\n        styles.container,\n        fullScreen && styles.fullScreen,\n        overlay && styles.overlay,\n        style,\n    ];\n\n    // Ensure size is valid for ActivityIndicator\n    const validSize = size === 'small' || size === 'large' ? size : 'large';\n\n    return (\n        <View style={containerStyle}>\n            <ActivityIndicator size={validSize} color={color} style={styles.spinner} />\n            {text ? <Text style={[styles.text, textStyle]}>{text}</Text> : null}\n        </View>\n    );\n};\n\nexport default LoadingSpinner;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/common/OnlineStatusIndicator.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/common/OnlineStatusIndicator.js\nimport React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nimport { colors } from '../../constants/theme';\nimport socketService from '../../services/socketService';\n\nexport const OnlineStatusIndicator = ({ userId, showText = false, size = 12 }) => {\n    const [isOnline, setIsOnline] = useState(false);\n    const [lastSeen, setLastSeen] = useState(null);\n\n    useEffect(() => {\n        if (!userId) return;\n\n        // Subscribe to status updates\n        const unsubscribe = socketService.subscribeToUserStatus(userId, (data) => {\n            setIsOnline(data.isOnline);\n            setLastSeen(data.lastSeen);\n        });\n\n        return unsubscribe;\n    }, [userId]);\n\n    const formatLastSeen = (date) => {\n        if (!date) return 'Never';\n        const now = new Date();\n        const seen = new Date(date);\n        const diffMinutes = Math.floor((now - seen) / 60000);\n\n        if (diffMinutes < 1) return 'Just now';\n        if (diffMinutes < 60) return `${diffMinutes}m ago`;\n        if (diffMinutes < 1440) return `${Math.floor(diffMinutes / 60)}h ago`;\n        return `${Math.floor(diffMinutes / 1440)}d ago`;\n    };\n\n    return (\n        <View style={styles.container}>\n            <View\n                style={[\n                    styles.indicator,\n                    {\n                        width: size,\n                        height: size,\n                        backgroundColor: isOnline ? colors.success : colors.textSecondary,\n                    },\n                ]}\n            />\n            {showText && (\n                <Text style={styles.text}>\n                    {isOnline ? 'Online' : `Last seen ${formatLastSeen(lastSeen)}`}\n                </Text>\n            )}\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    indicator: {\n        borderRadius: 50,\n        marginRight: 4,\n    },\n    text: {\n        fontSize: 12,\n        color: colors.textSecondary,\n    },\n});\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/common/OptimizedList.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Text' is defined but never used.","line":2,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":46},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":42,"column":34,"nodeType":"Identifier","endLine":42,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'scrollToIndex' is assigned a value but never used.","line":121,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":121,"endColumn":24},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { height: 80, justifyContent: 'center', alignItems: 'center' }","line":198,"column":26,"nodeType":"ObjectExpression","endLine":198,"endColumn":88},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { width: 40, height: 4, borderRadius: 2 }","line":200,"column":28,"nodeType":"ObjectExpression","endLine":205,"endColumn":22}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useMemo, useRef, useState, useEffect } from 'react';\nimport { FlatList, RefreshControl, View, Text, InteractionManager, Platform } from 'react-native';\n\nimport { FLATLIST_CONFIG } from '../../config/performance';\nimport { colors } from '../../constants/theme';\n\nimport EmptyState from './EmptyState';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst OptimizedList = ({\n    data,\n    renderItem,\n    keyExtractor,\n    onRefresh,\n    refreshing = false,\n    loading = false,\n    emptyIcon,\n    emptyTitle = 'No items found',\n    emptyMessage = 'Pull to refresh',\n    ListHeaderComponent,\n    ListFooterComponent,\n    contentContainerStyle,\n    getItemLayout,\n    onEndReached,\n    onEndReachedThreshold = 0.5,\n    estimatedItemSize,\n    maintainVisibleContentPosition,\n    enableOptimizations = true,\n    ...props\n}) => {\n    const listRef = useRef(null);\n    const [isInitialLoad, setIsInitialLoad] = useState(true);\n    const scrollPositionRef = useRef(0);\n    const pendingScrollToRef = useRef(null);\n\n    // Track scroll position for optimization\n    const handleScroll = useCallback((event) => {\n        scrollPositionRef.current = event.nativeEvent.contentOffset.y;\n    }, []);\n\n    // Memoize keyExtractor with fallback\n    const memoizedKeyExtractor = useCallback(keyExtractor || FLATLIST_CONFIG.keyExtractor, []);\n\n    // Enhanced render item with interaction handling\n    const enhancedRenderItem = useCallback(\n        (props) => {\n            if (!enableOptimizations) {\n                return renderItem(props);\n            }\n\n            return (\n                <InteractionOptimizedItem\n                    {...props}\n                    renderItem={renderItem}\n                    isInitialLoad={isInitialLoad}\n                />\n            );\n        },\n        [renderItem, enableOptimizations, isInitialLoad],\n    );\n\n    // Memoize empty component\n    const ListEmptyComponent = useMemo(() => {\n        if (loading) {\n            return <LoadingSpinner />;\n        }\n        return <EmptyState icon={emptyIcon} title={emptyTitle} message={emptyMessage} />;\n    }, [loading, emptyIcon, emptyTitle, emptyMessage]);\n\n    // Memoize refresh control\n    const refreshControl = useMemo(() => {\n        if (!onRefresh) return undefined;\n        return (\n            <RefreshControl\n                refreshing={refreshing}\n                onRefresh={onRefresh}\n                tintColor={colors.primary}\n                titleColor={colors.primary}\n                progressViewOffset={Platform.OS === 'android' ? 50 : 0}\n            />\n        );\n    }, [refreshing, onRefresh]);\n\n    // Optimize content container style\n    const optimizedContentStyle = useMemo(() => {\n        const baseStyle = { flexGrow: data?.length === 0 ? 1 : 0 };\n        return contentContainerStyle ? [baseStyle, contentContainerStyle] : baseStyle;\n    }, [data?.length, contentContainerStyle]);\n\n    // Calculate estimated item layout if size provided\n    const calculatedGetItemLayout = useMemo(() => {\n        if (getItemLayout) return getItemLayout;\n        if (!estimatedItemSize) return undefined;\n\n        return (data, index) => ({\n            length: estimatedItemSize,\n            offset: estimatedItemSize * index,\n            index,\n        });\n    }, [getItemLayout, estimatedItemSize]);\n\n    // Handle initial load completion\n    useEffect(() => {\n        if (isInitialLoad && data?.length > 0) {\n            InteractionManager.runAfterInteractions(() => {\n                setIsInitialLoad(false);\n            });\n        }\n    }, [isInitialLoad, data?.length]);\n\n    // Scroll to pending position after layout\n    const handleLayout = useCallback(() => {\n        if (pendingScrollToRef.current && listRef.current) {\n            const { index, viewPosition, animated } = pendingScrollToRef.current;\n            listRef.current.scrollToIndex({ index, viewPosition, animated });\n            pendingScrollToRef.current = null;\n        }\n    }, []);\n\n    // Public method to scroll to index\n    const scrollToIndex = useCallback((params) => {\n        if (listRef.current) {\n            try {\n                listRef.current.scrollToIndex(params);\n            } catch (error) {\n                // If list not ready, store for later\n                pendingScrollToRef.current = params;\n            }\n        }\n    }, []);\n\n    // Optimize view config for better performance\n    const viewConfigRef = useRef({\n        minimumViewTime: 100,\n        viewAreaCoveragePercentThreshold: 50,\n        itemVisiblePercentThreshold: 50,\n        waitForInteraction: !isInitialLoad,\n    });\n\n    return (\n        <FlatList\n            ref={listRef}\n            {...FLATLIST_CONFIG}\n            {...props}\n            data={data}\n            renderItem={enhancedRenderItem}\n            keyExtractor={memoizedKeyExtractor}\n            contentContainerStyle={optimizedContentStyle}\n            refreshControl={refreshControl}\n            ListEmptyComponent={ListEmptyComponent}\n            ListHeaderComponent={ListHeaderComponent}\n            ListFooterComponent={ListFooterComponent}\n            getItemLayout={calculatedGetItemLayout}\n            onEndReached={onEndReached}\n            onEndReachedThreshold={onEndReachedThreshold}\n            showsVerticalScrollIndicator={false}\n            showsHorizontalScrollIndicator={false}\n            onScroll={enableOptimizations ? handleScroll : undefined}\n            scrollEventThrottle={enableOptimizations ? 16 : undefined}\n            onLayout={handleLayout}\n            viewabilityConfig={viewConfigRef.current}\n            maintainVisibleContentPosition={\n                maintainVisibleContentPosition ||\n                (Platform.OS === 'ios' && enableOptimizations\n                    ? {\n                        minIndexForVisible: 0,\n                        autoscrollToTopThreshold: 100,\n                    }\n                    : undefined)\n            }\n            // Performance optimizations\n            drawDistance={enableOptimizations ? 250 : undefined}\n            legacyImplementation={false}\n            removeClippedSubviews={Platform.OS === 'android' && enableOptimizations}\n            // Memory optimizations\n            initialScrollIndex={0}\n            persistentScrollbar={false}\n            overScrollMode=\"never\"\n        />\n    );\n};\n\n// Optimized item wrapper component\nconst InteractionOptimizedItem = React.memo(({ renderItem, isInitialLoad, ...props }) => {\n    const [shouldRender, setShouldRender] = useState(!isInitialLoad);\n\n    useEffect(() => {\n        if (isInitialLoad && !shouldRender) {\n            InteractionManager.runAfterInteractions(() => {\n                setShouldRender(true);\n            });\n        }\n    }, [isInitialLoad, shouldRender]);\n\n    if (!shouldRender) {\n        // Render placeholder during initial load\n        return (\n            <View style={{ height: 80, justifyContent: 'center', alignItems: 'center' }}>\n                <View\n                    style={{\n                        width: 40,\n                        height: 4,\n                        backgroundColor: colors.border,\n                        borderRadius: 2,\n                    }}\n                />\n            </View>\n        );\n    }\n\n    return renderItem(props);\n});\n\nInteractionOptimizedItem.displayName = 'InteractionOptimizedItem';\n\n// Export enhanced list with additional methods\nexport default React.forwardRef((props, ref) => {\n    const listRef = useRef(null);\n\n    React.useImperativeHandle(ref, () => ({\n        scrollToIndex: (params) => listRef.current?.scrollToIndex(params),\n        scrollToOffset: (params) => listRef.current?.scrollToOffset(params),\n        scrollToEnd: (params) => listRef.current?.scrollToEnd(params),\n        flashScrollIndicators: () => listRef.current?.flashScrollIndicators(),\n    }));\n\n    return <OptimizedList {...props} ref={listRef} />;\n});\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/common/PlaceholderImage.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/common/PlaceholderImage.js\nimport React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nimport { colors } from '../../constants/theme';\n\nconst PlaceholderImage = ({ width = 100, height = 100, text = '?' }) => {\n    return (\n        <View style={[styles.container, { width, height }]}>\n            <Text style={styles.text}>{text}</Text>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: colors.border,\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderRadius: 8,\n    },\n    text: {\n        fontSize: 24,\n        color: colors.textSecondary,\n    },\n});\n\nexport default PlaceholderImage;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/common/VirtualzedList.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/common/VirtualizedList.js\nimport React, { useCallback } from 'react';\nimport { FlatList } from 'react-native';\n\nexport const VirtualizedList = ({ data, renderItem, itemHeight, ...props }) => {\n    const getItemLayout = useCallback(\n        (data, index) => ({\n            length: itemHeight,\n            offset: itemHeight * index,\n            index,\n        }),\n        [itemHeight],\n    );\n\n    return (\n        <FlatList\n            data={data}\n            renderItem={renderItem}\n            getItemLayout={itemHeight ? getItemLayout : undefined}\n            removeClippedSubviews={true}\n            maxToRenderPerBatch={10}\n            updateCellsBatchingPeriod={50}\n            initialNumToRender={10}\n            windowSize={10}\n            {...props}\n        />\n    );\n};\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/common/WebDateTimePicker.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":2,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'TouchableOpacity' is defined but never used.","line":3,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'fonts' is defined but never used.","line":5,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { borderWidth: 1, borderRadius: 8, padding: 12, fontSize: 16 }","line":43,"column":24,"nodeType":"ObjectExpression","endLine":51,"endColumn":18}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import DateTimePicker from '@react-native-community/datetimepicker';\nimport React, { useCallback } from 'react';\nimport { Platform, TouchableOpacity, TextInput } from 'react-native';\n\nimport { colors, fonts } from '../../constants/theme';\n\nconst WebDateTimePicker = ({ value, mode, onChange, display, ...props }) => {\n    if (Platform.OS === 'web') {\n        // Web fallback using HTML input\n        const formatDate = (date) => {\n            const d = new Date(date);\n            const year = d.getFullYear();\n            const month = String(d.getMonth() + 1).padStart(2, '0');\n            const day = String(d.getDate()).padStart(2, '0');\n            return `${year}-${month}-${day}`;\n        };\n\n        const formatTime = (date) => {\n            const d = new Date(date);\n            const hours = String(d.getHours()).padStart(2, '0');\n            const minutes = String(d.getMinutes()).padStart(2, '0');\n            return `${hours}:${minutes}`;\n        };\n\n        const handleChange = (event) => {\n            const newValue = event.target.value;\n            if (newValue) {\n                let newDate;\n                if (mode === 'date') {\n                    newDate = new Date(newValue);\n                } else {\n                    const [hours, minutes] = newValue.split(':');\n                    newDate = new Date(value);\n                    newDate.setHours(parseInt(hours));\n                    newDate.setMinutes(parseInt(minutes));\n                }\n                onChange({ type: 'set', nativeEvent: { timestamp: newDate.getTime() } }, newDate);\n            }\n        };\n\n        return (\n            <TextInput\n                style={{\n                    borderWidth: 1,\n                    borderColor: colors.border,\n                    borderRadius: 8,\n                    padding: 12,\n                    fontSize: 16,\n                    color: colors.text,\n                    backgroundColor: colors.surface,\n                }}\n                type={mode === 'date' ? 'date' : 'time'}\n                value={mode === 'date' ? formatDate(value) : formatTime(value)}\n                onChange={handleChange}\n                {...props}\n            />\n        );\n    }\n\n    // Native DateTimePicker\n    return (\n        <DateTimePicker\n            value={value}\n            mode={mode}\n            display={display}\n            onChange={onChange}\n            {...props}\n        />\n    );\n};\n\nexport default WebDateTimePicker;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/ui/Badge.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/ui/Button.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/ui/Card.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/ui/Header.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/ui/Input.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { forwardRef } from 'react';\nimport { View, TextInput, Text } from 'react-native';\n\nimport { inputStyles as styles } from '../../styles/components/ui/InputStyles';\n\nconst Input = forwardRef(\n    ({ label, error, leftIcon, rightIcon, style, containerStyle, ...props }, ref) => {\n        return (\n            <View style={[styles.container, containerStyle]}>\n                {label && <Text style={styles.label}>{label}</Text>}\n                <View style={[styles.inputContainer, error && styles.errorContainer]}>\n                    {leftIcon && <View style={styles.leftIcon}>{leftIcon}</View>}\n                    <TextInput\n                        ref={ref}\n                        style={[\n                            styles.input,\n                            leftIcon && styles.inputWithLeftIcon,\n                            rightIcon && styles.inputWithRightIcon,\n                            style,\n                        ]}\n                        placeholderTextColor=\"#9CA3AF\"\n                        {...props}\n                    />\n                    {rightIcon && <View style={styles.rightIcon}>{rightIcon}</View>}\n                </View>\n                {error && <Text style={styles.error}>{error}</Text>}\n            </View>\n        );\n    },\n);\n\nInput.displayName = 'Input';\n\nexport { Input };\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/ui/List.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/ui/Modal.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Pressable' is defined but never used.","line":9,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":14}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n    View,\n    Text,\n    TouchableOpacity,\n    ScrollView,\n    KeyboardAvoidingView,\n    Platform,\n    Pressable,\n} from 'react-native';\nimport Modal from 'react-native-modal';\n\nimport { colors } from '../../constants/theme';\nimport { styles } from '../../styles/components/ui/ModalStyles';\nimport Icon from '../common/Icon.js';\n\nexport const CustomModal = ({\n    visible,\n    onClose,\n    title,\n    children,\n    showCloseButton = true,\n    closeOnBackdrop = true,\n    closeOnBackButton = true,\n    scrollable = true,\n    fullScreen = false,\n    position = 'center', // 'center', 'bottom', 'top'\n    showHandle = false, // for bottom sheet style\n    animationType = 'slide', // 'slide', 'fade'\n    style,\n    contentStyle,\n    headerStyle,\n    titleStyle,\n    bodyStyle,\n}) => {\n    const modalStyle = [\n        styles.modal,\n        position === 'bottom' && styles.bottomModal,\n        position === 'top' && styles.topModal,\n        fullScreen && styles.fullScreenModal,\n        style,\n    ];\n\n    const containerStyle = [\n        styles.container,\n        position === 'bottom' && styles.bottomContainer,\n        position === 'top' && styles.topContainer,\n        fullScreen && styles.fullScreenContainer,\n        contentStyle,\n    ];\n\n    const ContentWrapper = scrollable ? ScrollView : View;\n    const contentProps = scrollable\n        ? {\n            showsVerticalScrollIndicator: false,\n            keyboardShouldPersistTaps: 'handled',\n            contentContainerStyle: styles.scrollContent,\n        }\n        : {};\n\n    return (\n        <Modal\n            isVisible={visible}\n            onBackdropPress={closeOnBackdrop ? onClose : undefined}\n            onBackButtonPress={closeOnBackButton ? onClose : undefined}\n            animationIn={animationType === 'fade' ? 'fadeIn' : 'slideInUp'}\n            animationOut={animationType === 'fade' ? 'fadeOut' : 'slideOutDown'}\n            style={modalStyle}\n            backdropOpacity={0.5}\n            useNativeDriver\n            hideModalContentWhileAnimating\n        >\n            <KeyboardAvoidingView\n                behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n                style={styles.keyboardAvoid}\n            >\n                <View style={containerStyle}>\n                    {showHandle && position === 'bottom' && <View style={styles.handle} />}\n\n                    {(title || showCloseButton) && (\n                        <View style={[styles.header, headerStyle]}>\n                            <Text style={[styles.title, titleStyle]}>{title}</Text>\n                            {showCloseButton && (\n                                <TouchableOpacity\n                                    onPress={onClose}\n                                    style={styles.closeButton}\n                                    hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}\n                                >\n                                    <Icon name=\"close\" size={24} color={colors.text} />\n                                </TouchableOpacity>\n                            )}\n                        </View>\n                    )}\n\n                    <ContentWrapper {...contentProps} style={[styles.body, bodyStyle]}>\n                        {children}\n                    </ContentWrapper>\n                </View>\n            </KeyboardAvoidingView>\n        </Modal>\n    );\n};\n\n// Convenience components for common modal types\nexport const BottomSheet = (props) => (\n    <CustomModal {...props} position=\"bottom\" showHandle={true} closeOnBackdrop={true} />\n);\n\nexport const AlertModal = ({ visible, onClose, title, message, actions = [], ...props }) => (\n    <CustomModal visible={visible} onClose={onClose} title={title} scrollable={false} {...props}>\n        <Text style={styles.alertMessage}>{message}</Text>\n        <View style={styles.alertActions}>\n            {actions.map((action, index) => (\n                <TouchableOpacity\n                    key={index}\n                    style={[\n                        styles.alertButton,\n                        action.style === 'cancel' && styles.alertButtonCancel,\n                        action.style === 'destructive' && styles.alertButtonDestructive,\n                    ]}\n                    onPress={action.onPress}\n                >\n                    <Text\n                        style={[\n                            styles.alertButtonText,\n                            action.style === 'cancel' && styles.alertButtonTextCancel,\n                            action.style === 'destructive' && styles.alertButtonTextDestructive,\n                        ]}\n                    >\n                        {action.text}\n                    </Text>\n                </TouchableOpacity>\n            ))}\n        </View>\n    </CustomModal>\n);\n\nexport default CustomModal;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/ui/OptimizedInput.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/ui/ShadowCard.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Component' is assigned a value but never used.","line":70,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":24},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { padding: 0 }","line":80,"column":46,"nodeType":"ObjectExpression","endLine":80,"endColumn":60},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { padding: 0 }","line":104,"column":38,"nodeType":"ObjectExpression","endLine":104,"endColumn":52}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/ui/ShadowCard.js\nimport React from 'react';\nimport { View, TouchableOpacity } from 'react-native';\nimport { Card } from 'react-native-paper';\n\nimport { colors, shadows, borderRadius } from '../../constants/theme';\n\nconst ShadowCard = React.memo(\n    ({\n        children,\n        onPress,\n        style,\n        contentStyle,\n        shadowLevel = 'md',\n        borderRadiusSize = 'md',\n        overflow = 'hidden',\n        disabled = false,\n        ...props\n    }) => {\n        const Component = onPress ? TouchableOpacity : View;\n\n        const cardStyle = [\n            {\n                backgroundColor: colors.surface,\n                borderRadius: borderRadius[borderRadiusSize],\n                ...shadows[shadowLevel],\n            },\n            style,\n        ];\n\n        const innerContentStyle = [\n            {\n                borderRadius: borderRadius[borderRadiusSize],\n                overflow: overflow,\n            },\n            contentStyle,\n        ];\n\n        const componentProps = onPress\n            ? {\n                onPress,\n                disabled,\n                activeOpacity: 0.8,\n                ...props,\n            }\n            : props;\n\n        return (\n            <Component style={cardStyle} {...componentProps}>\n                <View style={innerContentStyle}>{children}</View>\n            </Component>\n        );\n    },\n);\n\nShadowCard.displayName = 'ShadowCard';\n\n// Alternative using Card component with proper overflow handling\nconst PaperShadowCard = React.memo(\n    ({\n        children,\n        onPress,\n        style,\n        contentStyle,\n        elevation = 2,\n        borderRadiusSize = 'md',\n        overflow = 'hidden',\n        ...props\n    }) => {\n        const Component = onPress ? TouchableOpacity : Card;\n\n        if (onPress) {\n            return (\n                <TouchableOpacity onPress={onPress} activeOpacity={0.8} style={style}>\n                    <Card\n                        elevation={elevation}\n                        style={{ borderRadius: borderRadius[borderRadiusSize] }}\n                        {...props}\n                    >\n                        <Card.Content style={{ padding: 0 }}>\n                            <View\n                                style={[\n                                    {\n                                        borderRadius: borderRadius[borderRadiusSize],\n                                        overflow: overflow,\n                                    },\n                                    contentStyle,\n                                ]}\n                            >\n                                {children}\n                            </View>\n                        </Card.Content>\n                    </Card>\n                </TouchableOpacity>\n            );\n        }\n\n        return (\n            <Card\n                elevation={elevation}\n                style={[{ borderRadius: borderRadius[borderRadiusSize] }, style]}\n                {...props}\n            >\n                <Card.Content style={{ padding: 0 }}>\n                    <View\n                        style={[\n                            {\n                                borderRadius: borderRadius[borderRadiusSize],\n                                overflow: overflow,\n                            },\n                            contentStyle,\n                        ]}\n                    >\n                        {children}\n                    </View>\n                </Card.Content>\n            </Card>\n        );\n    },\n);\n\nPaperShadowCard.displayName = 'PaperShadowCard';\n\nexport { ShadowCard, PaperShadowCard };\nexport default ShadowCard;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/ui/TabBar.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/components/ui/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/config/apiOptimization.js","messages":[{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":14,"column":81,"nodeType":"Property","messageId":"missing","endLine":15,"endColumn":1,"fix":{"range":[407,414],"text":"],\n    }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":22,"column":24,"nodeType":"Property","messageId":"missing","endLine":22,"endColumn":25,"fix":{"range":[633,676],"text":"90000,  // 90 seconds for long polling\n    }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":47,"column":42,"nodeType":"Property","messageId":"missing","endLine":48,"endColumn":1,"fix":{"range":[1607,1618],"text":"},\n        }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":48,"column":10,"nodeType":"Property","messageId":"missing","endLine":49,"endColumn":1,"fix":{"range":[1617,1624],"text":"},\n    }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":60,"column":26,"nodeType":"Property","messageId":"missing","endLine":61,"endColumn":1,"fix":{"range":[1857,1868],"text":"1,\n        }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":61,"column":10,"nodeType":"Property","messageId":"missing","endLine":62,"endColumn":1,"fix":{"range":[1867,1874],"text":"},\n    }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":71,"column":33,"nodeType":"Property","messageId":"missing","endLine":72,"endColumn":1,"fix":{"range":[2079,2090],"text":"30000,\n    }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":78,"column":17,"nodeType":"Property","messageId":"missing","endLine":78,"endColumn":18,"fix":{"range":[2234,2273],"text":"6, // zlib compression level (1-9)\n    }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":86,"column":31,"nodeType":"Property","messageId":"missing","endLine":87,"endColumn":1,"fix":{"range":[2467,2475],"text":"10,\n    }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":93,"column":24,"nodeType":"Property","messageId":"missing","endLine":93,"endColumn":25,"fix":{"range":[2627,2662],"text":"0.1, // Sample 10% of requests\n    }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":94,"column":6,"nodeType":"Property","messageId":"missing","endLine":95,"endColumn":1,"fix":{"range":[2661,2664],"text":"},\n}"}},{"ruleId":"max-len","severity":1,"message":"This line has a length of 109. Maximum allowed is 100.","line":131,"column":1,"nodeType":"Program","messageId":"max","endLine":131,"endColumn":110}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":11,"fixableWarningCount":0,"source":"/**\n * API Optimization Configuration\n * Improves app stability and performance\n */\n\nexport const API_OPTIMIZATION = {\n    // Request retry configuration\n    retry: {\n        maxAttempts: 3,\n        initialDelay: 1000,\n        maxDelay: 5000,\n        backoffFactor: 2,\n        retryableStatuses: [408, 429, 500, 502, 503, 504],\n        retryableErrors: ['ECONNRESET', 'ETIMEDOUT', 'ENOTFOUND', 'ENETUNREACH']\n    },\n\n    // Request timeout configuration\n    timeout: {\n        default: 30000, // 30 seconds\n        upload: 60000,  // 60 seconds for file uploads\n        download: 60000, // 60 seconds for downloads\n        longPoll: 90000  // 90 seconds for long polling\n    },\n\n    // Cache configuration\n    cache: {\n        enabled: true,\n        defaultTTL: 5 * 60 * 1000, // 5 minutes\n        endpoints: {\n            // Static data - cache longer\n            '/config': { ttl: 30 * 60 * 1000 }, // 30 minutes\n            '/users/me': { ttl: 10 * 60 * 1000 }, // 10 minutes\n            \n            // Dynamic data - cache shorter\n            '/forums': { ttl: 2 * 60 * 1000 }, // 2 minutes\n            '/events': { ttl: 2 * 60 * 1000 }, // 2 minutes\n            '/budget': { ttl: 1 * 60 * 1000 }, // 1 minute\n            '/checklist': { ttl: 1 * 60 * 1000 }, // 1 minute\n            \n            // Real-time data - minimal cache\n            '/chat/rooms': { ttl: 30 * 1000 }, // 30 seconds\n            '/messages': { ttl: 30 * 1000 }, // 30 seconds\n            \n            // No cache\n            '/auth': { ttl: 0 },\n            '/chat/updates': { ttl: 0 },\n            '/forums/updates': { ttl: 0 }\n        }\n    },\n\n    // Request queue configuration\n    queue: {\n        maxConcurrent: 5,\n        maxQueued: 50,\n        priority: {\n            auth: 10,\n            realtime: 9,\n            user: 8,\n            data: 5,\n            background: 1\n        }\n    },\n\n    // Connection pooling\n    connection: {\n        keepAlive: true,\n        keepAliveMsecs: 30000,\n        maxSockets: 10,\n        maxFreeSockets: 5,\n        timeout: 60000,\n        freeSocketTimeout: 30000\n    },\n\n    // Response compression\n    compression: {\n        enabled: true,\n        minSize: 1024, // Only compress responses > 1KB\n        level: 6 // zlib compression level (1-9)\n    },\n\n    // Error tracking\n    errorTracking: {\n        enabled: true,\n        sampleRate: 1.0, // Track 100% of errors in dev\n        ignoreStatuses: [401, 403, 404],\n        maxErrorsPerMinute: 10\n    },\n\n    // Performance monitoring\n    performance: {\n        enabled: true,\n        slowRequestThreshold: 3000, // Log requests > 3s\n        sampleRate: 0.1 // Sample 10% of requests\n    }\n};\n\n// Helper to get cache TTL for endpoint\nexport const getCacheTTL = (endpoint) => {\n    // Remove query params for matching\n    const path = endpoint.split('?')[0];\n    \n    // Check exact match first\n    if (API_OPTIMIZATION.cache.endpoints[path]) {\n        return API_OPTIMIZATION.cache.endpoints[path].ttl;\n    }\n    \n    // Check partial matches\n    for (const [pattern, config] of Object.entries(API_OPTIMIZATION.cache.endpoints)) {\n        if (path.includes(pattern)) {\n            return config.ttl;\n        }\n    }\n    \n    return API_OPTIMIZATION.cache.defaultTTL;\n};\n\n// Helper to determine request priority\nexport const getRequestPriority = (endpoint, method = 'GET') => {\n    if (endpoint.includes('/auth')) return API_OPTIMIZATION.queue.priority.auth;\n    if (endpoint.includes('/chat') || endpoint.includes('/messages')) return API_OPTIMIZATION.queue.priority.realtime;\n    if (endpoint.includes('/users')) return API_OPTIMIZATION.queue.priority.user;\n    if (method === 'GET') return API_OPTIMIZATION.queue.priority.data;\n    return API_OPTIMIZATION.queue.priority.background;\n};\n\n// Helper to check if error is retryable\nexport const isRetryableError = (error) => {\n    if (!error) return false;\n    \n    // Check status codes\n    if (error.response?.status && API_OPTIMIZATION.retry.retryableStatuses.includes(error.response.status)) {\n        return true;\n    }\n    \n    // Check error codes\n    if (error.code && API_OPTIMIZATION.retry.retryableErrors.includes(error.code)) {\n        return true;\n    }\n    \n    // Check for network errors\n    if (error.message && (\n        error.message.includes('Network Error') ||\n        error.message.includes('fetch failed') ||\n        error.message.includes('Failed to fetch')\n    )) {\n        return true;\n    }\n    \n    return false;\n};","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/config/development.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":36,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":36,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1001,1048],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Development configuration\nexport const DEV_CONFIG = {\n    // Set to true to use mock services instead of real backend\n    USE_MOCK_SERVICES: false,\n\n    // Set to true to attempt WebSocket connections\n    USE_WEBSOCKET: true,\n\n    // Mock user for development\n    MOCK_USER: {\n        _id: 'current-user',\n        name: 'Test User',\n        email: 'test@example.com',\n        professionalPath: 'FREELANCER',\n    },\n\n    // Development API endpoints\n    API_ENDPOINTS: {\n        // Override specific endpoints for development if needed\n    },\n\n    // Console logging\n    ENABLE_LOGGING: true,\n    LOG_NETWORK_REQUESTS: true,\n    LOG_SOCKET_EVENTS: true,\n};\n\n// Export convenience flags\nexport const USE_MOCK = __DEV__ && DEV_CONFIG.USE_MOCK_SERVICES;\nexport const USE_WEBSOCKET = !__DEV__ || DEV_CONFIG.USE_WEBSOCKET;\nexport const ENABLE_LOGGING = __DEV__ && DEV_CONFIG.ENABLE_LOGGING;\n\n// Development logger\nexport const devLog = (category, message, ...args) => {\n    if (ENABLE_LOGGING) {\n        console.log(`[${category}]`, message, ...args);\n    }\n};\n\nexport default DEV_CONFIG;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/config/environment.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Network' is defined but never used.","line":3,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/config/environment.js\nimport Constants from 'expo-constants';\nimport * as Network from 'expo-network';\n\nconst ENV = {\n    development: {\n        // Use localhost for web and dynamic detection for mobile\n        API_BASE_URL: __DEV__ ? 'http://localhost:5001/api' : 'https://api.conectaalicante.com/api',\n        WS_BASE_URL: __DEV__ ? 'ws://localhost:5001' : 'wss://api.conectaalicante.com',\n        ANDROID_EMULATOR_API_URL: 'http://10.0.2.2:5001/api',\n        IOS_SIMULATOR_API_URL: 'http://localhost:5001/api',\n    },\n    staging: {\n        API_BASE_URL: 'https://staging-api.conectaalicante.com/api',\n        WS_BASE_URL: 'wss://staging-api.conectaalicante.com',\n    },\n    production: {\n        API_BASE_URL: 'https://api.conectaalicante.com/api',\n        WS_BASE_URL: 'wss://api.conectaalicante.com',\n    },\n};\n\nconst getEnvironment = () => {\n    // Use Expo's manifest to determine environment\n    const releaseChannel =\n        Constants.manifest?.releaseChannel || Constants.expoConfig?.releaseChannel;\n\n    if (releaseChannel === 'production') return 'production';\n    if (releaseChannel === 'staging') return 'staging';\n    return 'development';\n};\n\nconst currentEnv = getEnvironment();\n\n// Get dynamic host URL for development\nconst getDevUrl = () => {\n    if (__DEV__ && Constants.manifest?.debuggerHost) {\n        const debuggerHost = Constants.manifest.debuggerHost;\n        const host = debuggerHost.split(':')[0];\n        return `http://${host}:5001/api`;\n    }\n    return ENV.development.API_BASE_URL;\n};\n\nexport default {\n    ...ENV[currentEnv],\n    API_BASE_URL: __DEV__ ? getDevUrl() : ENV[currentEnv].API_BASE_URL,\n    APP_VERSION: Constants.manifest?.version || Constants.expoConfig?.version || '1.0.0',\n    ENVIRONMENT: currentEnv,\n};\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/config/network.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/config/performance.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/constants/animations.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/constants/config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/constants/dimensions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/constants/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/constants/messages.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/constants/routes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/constants/theme.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/hooks/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/hooks/useApi.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/hooks/useChatRoom.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":66,"fix":{"range":[65,65],"text":"\n"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":140,"column":49,"nodeType":"Property","messageId":"missing","endLine":141,"endColumn":1,"fix":{"range":[4855,4862],"text":"),\n    }"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\nimport chatService from '../services/chatService';\nimport socketService from '../services/socketService';\nimport { devLog, devError } from '../utils/devLog';\n\nexport const useChatRoom = (roomId, userId) => {\n    const [messages, setMessages] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [connectionError, setConnectionError] = useState(false);\n    const [typingUsers, setTypingUsers] = useState([]);\n    const messageCache = useRef(new Set());\n\n    // Initialize chat room\n    useEffect(() => {\n        let isMounted = true;\n\n        const initializeRoom = async () => {\n            try {\n                setConnectionError(false);\n\n                // Ensure socket is connected\n                if (!socketService.isConnected() && userId) {\n                    try {\n                        await socketService.connect(userId);\n                        devLog('useChatRoom', 'Socket connected successfully');\n                    } catch (error) {\n                        devError('useChatRoom', 'Socket connection failed', error);\n                        setConnectionError(true);\n                    }\n                }\n\n                // Join room\n                if (socketService.isConnected()) {\n                    socketService.joinRoom(roomId);\n                    devLog('useChatRoom', `Joined room: ${roomId}`);\n                }\n\n                // Load initial messages\n                const initialMessages = await chatService.getRoomMessages(roomId);\n                if (isMounted) {\n                    setMessages(initialMessages || []);\n                    // Cache message IDs\n                    initialMessages?.forEach(msg => messageCache.current.add(msg._id));\n                }\n            } catch (error) {\n                devError('useChatRoom', 'Failed to initialize room', error);\n                if (isMounted) {\n                    setConnectionError(true);\n                }\n            } finally {\n                if (isMounted) {\n                    setLoading(false);\n                }\n            }\n        };\n\n        initializeRoom();\n\n        return () => {\n            isMounted = false;\n            if (socketService.isConnected()) {\n                socketService.leaveRoom(roomId);\n            }\n        };\n    }, [roomId, userId]);\n\n    // Handle new messages\n    const handleNewMessage = useCallback((data) => {\n        devLog('useChatRoom', 'New message event:', data);\n        \n        // Extract message from different possible data structures\n        const message = data.message || data;\n        \n        // Only process if it's for this room\n        if (data.roomId === roomId || message.room === roomId || message.roomId === roomId) {\n            // Prevent duplicates\n            if (!messageCache.current.has(message._id)) {\n                messageCache.current.add(message._id);\n                setMessages(prev => [...prev, message]);\n            }\n        }\n    }, [roomId]);\n\n    // Handle typing indicators\n    const handleUserTyping = useCallback(({ userId, isTyping, roomId: typingRoomId }) => {\n        if (typingRoomId === roomId) {\n            setTypingUsers(prev => {\n                if (isTyping) {\n                    return prev.includes(userId) ? prev : [...prev, userId];\n                } else {\n                    return prev.filter(id => id !== userId);\n                }\n            });\n        }\n    }, [roomId]);\n\n    // Setup socket listeners\n    useEffect(() => {\n        if (!socketService.isConnected()) return;\n\n        devLog('useChatRoom', 'Setting up socket listeners');\n        \n        socketService.on('new_message', handleNewMessage);\n        socketService.on('user_typing', handleUserTyping);\n\n        return () => {\n            socketService.off('new_message', handleNewMessage);\n            socketService.off('user_typing', handleUserTyping);\n        };\n    }, [handleNewMessage, handleUserTyping]);\n\n    // Send message\n    const sendMessage = useCallback(async (content) => {\n        if (!content?.trim()) return;\n\n        try {\n            const sentMessage = await chatService.sendMessage(roomId, content.trim());\n            devLog('useChatRoom', 'Message sent:', sentMessage);\n            return sentMessage;\n        } catch (error) {\n            devError('useChatRoom', 'Failed to send message', error);\n            throw error;\n        }\n    }, [roomId]);\n\n    // Send typing indicator\n    const sendTypingIndicator = useCallback((isTyping) => {\n        if (socketService.isConnected()) {\n            socketService.typing(roomId, isTyping);\n        }\n    }, [roomId]);\n\n    return {\n        messages,\n        loading,\n        connectionError,\n        typingUsers,\n        sendMessage,\n        sendTypingIndicator,\n        isConnected: socketService.isConnected()\n    };\n};","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/hooks/useChatSocketEvents.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":48,"fix":{"range":[152,152],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`../utils` import should occur before import of `../utils/socketEventManager`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":45,"fix":{"range":[208,315],"text":"import { devLog, devError } from '../utils';\nimport socketEventManager from '../utils/socketEventManager';\n"}},{"ruleId":"no-unused-vars","severity":2,"message":"'devError' is defined but never used.","line":9,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":26}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"/**\n * Hook for managing chat socket events\n * Simplifies the socket event registration and cleanup\n */\n\nimport { useEffect, useCallback } from 'react';\nimport socketService from '../services/socketService';\nimport socketEventManager from '../utils/socketEventManager';\nimport { devLog, devError } from '../utils';\n\nexport const useChatSocketEvents = (roomId, handlers) => {\n    const { onNewMessage, onUserTyping, onRoomUsers } = handlers;\n\n    // Join room when connected\n    useEffect(() => {\n        if (!roomId) return;\n\n        const joinRoom = () => {\n            if (socketService.isConnected()) {\n                socketService.joinRoom(roomId);\n                devLog('ChatSocket', `Joined room: ${roomId}`);\n            }\n        };\n\n        // Join immediately if connected\n        joinRoom();\n\n        // Also join when connection is established\n        const handleConnect = () => joinRoom();\n        socketService.on('authenticated', handleConnect);\n\n        return () => {\n            if (socketService.isConnected()) {\n                socketService.leaveRoom(roomId);\n                devLog('ChatSocket', `Left room: ${roomId}`);\n            }\n            socketService.off('authenticated', handleConnect);\n        };\n    }, [roomId]);\n\n    // Handle new messages\n    useEffect(() => {\n        if (!onNewMessage || !roomId) return;\n\n        // Register with socketEventManager (handles global events)\n        const unsubscribeManager = socketEventManager.on('new_message', (data) => {\n            devLog('ChatSocket', 'New message from event manager:', data);\n            if (data.roomId === roomId) {\n                onNewMessage(data);\n            }\n        });\n\n        // Also register directly with socket (as backup)\n        const handleDirectMessage = (data) => {\n            devLog('ChatSocket', 'New message from direct socket:', data);\n            if (data.roomId === roomId) {\n                onNewMessage(data);\n            }\n        };\n        \n        socketService.on('new_message', handleDirectMessage);\n\n        return () => {\n            unsubscribeManager();\n            socketService.off('new_message', handleDirectMessage);\n        };\n    }, [roomId, onNewMessage]);\n\n    // Handle typing indicators\n    useEffect(() => {\n        if (!onUserTyping || !roomId) return;\n\n        const handleTyping = (data) => {\n            if (data.roomId === roomId) {\n                onUserTyping(data);\n            }\n        };\n\n        socketService.on('user_typing', handleTyping);\n\n        return () => {\n            socketService.off('user_typing', handleTyping);\n        };\n    }, [roomId, onUserTyping]);\n\n    // Handle room users\n    useEffect(() => {\n        if (!onRoomUsers || !roomId) return;\n\n        socketService.on('room_users', onRoomUsers);\n\n        return () => {\n            socketService.off('room_users', onRoomUsers);\n        };\n    }, [roomId, onRoomUsers]);\n\n    // Typing helper\n    const sendTyping = useCallback((isTyping) => {\n        if (socketService.isConnected() && roomId) {\n            socketService.typing(roomId, isTyping);\n        }\n    }, [roomId]);\n\n    return { sendTyping };\n};","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/hooks/useDebounce.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/hooks/useFonts.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/hooks/useForm.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/hooks/useKeyboard.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/hooks/useOrientation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/hooks/useSocketEvents.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":56,"fix":{"range":[55,55],"text":"\n"}},{"ruleId":"no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":1,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'handler' is defined but never used. Allowed unused args must match /^_/u.","line":27,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":63},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":49,"column":8,"nodeType":"Identifier","endLine":49,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'eventHandlers'. Either include it or remove the dependency array.","line":49,"column":8,"nodeType":"Identifier","endLine":49,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [eventHandlers]","fix":{"range":[1745,1749],"text":"[eventHandlers]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { useEffect, useCallback, useRef } from 'react';\nimport socketService from '../services/socketService';\nimport { devLog } from '../utils/devLog';\n\n/**\n * Hook to manage socket event listeners with automatic cleanup\n * @param {Object} eventHandlers - Object mapping event names to handler functions\n * @param {Array} deps - Dependencies array for the effect\n */\nexport const useSocketEvents = (eventHandlers = {}, deps = []) => {\n    const handlersRef = useRef(eventHandlers);\n    \n    // Update handlers ref when they change\n    useEffect(() => {\n        handlersRef.current = eventHandlers;\n    }, [eventHandlers]);\n\n    useEffect(() => {\n        if (!socketService) {\n            devLog('useSocketEvents', 'Socket service not available');\n            return;\n        }\n\n        // Create stable handlers that reference the latest handlers\n        const stableHandlers = {};\n        \n        Object.entries(eventHandlers).forEach(([event, handler]) => {\n            stableHandlers[event] = (...args) => {\n                const currentHandler = handlersRef.current[event];\n                if (currentHandler) {\n                    currentHandler(...args);\n                }\n            };\n        });\n\n        // Register all event listeners\n        Object.entries(stableHandlers).forEach(([event, handler]) => {\n            devLog('useSocketEvents', `Registering listener for: ${event}`);\n            socketService.on(event, handler);\n        });\n\n        // Cleanup function\n        return () => {\n            Object.entries(stableHandlers).forEach(([event, handler]) => {\n                devLog('useSocketEvents', `Removing listener for: ${event}`);\n                socketService.off(event, handler);\n            });\n        };\n    }, deps); // Only re-register if deps change\n    \n    // Return socket connection state\n    const isConnected = socketService.isConnected();\n    \n    return { isConnected };\n};","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/navigation/AuthNavigator.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createStackNavigator } from '@react-navigation/stack';\nimport React from 'react';\n\nimport { SCREEN_NAMES } from '../constants/routes';\nimport { colors } from '../constants/theme';\nimport LoginScreen from '../screens/auth/LoginScreen';\nimport RegisterScreen from '../screens/auth/RegisterScreen';\nimport WelcomeScreen from '../screens/auth/WelcomeScreen';\n\nconst Stack = createStackNavigator();\n\nconst AuthNavigator = () => {\n    return (\n        <Stack.Navigator\n            screenOptions={{\n                headerShown: false,\n                cardStyle: {\n                    backgroundColor: colors.background,\n                },\n                // Use standard transition\n                animationEnabled: true,\n                gestureEnabled: true,\n            }}\n            initialRouteName={SCREEN_NAMES.WELCOME}\n        >\n            <Stack.Screen\n                name={SCREEN_NAMES.WELCOME}\n                component={WelcomeScreen}\n                options={{\n                    animationEnabled: false,\n                }}\n            />\n            <Stack.Screen\n                name={SCREEN_NAMES.LOGIN}\n                component={LoginScreen}\n                options={{\n                    title: 'Sign In',\n                    headerShown: true,\n                    headerTransparent: true,\n                    headerTintColor: colors.primary,\n                    headerLeftContainerStyle: {\n                        paddingLeft: 10,\n                    },\n                }}\n            />\n            <Stack.Screen\n                name={SCREEN_NAMES.REGISTER}\n                component={RegisterScreen}\n                options={{\n                    title: 'Create Account',\n                    headerShown: true,\n                    headerTransparent: true,\n                    headerTintColor: colors.primary,\n                    headerLeftContainerStyle: {\n                        paddingLeft: 10,\n                    },\n                }}\n            />\n        </Stack.Navigator>\n    );\n};\n\nexport default AuthNavigator;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/navigation/EventNavigator.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createStackNavigator } from '@react-navigation/stack';\nimport React from 'react';\n\nimport { colors } from '../constants/theme';\nimport CreateEventScreen from '../screens/events/CreateEventScreen';\nimport EventDetailScreen from '../screens/events/EventDetailScreen';\nimport EventsScreen from '../screens/events/EventsScreen';\n\nconst Stack = createStackNavigator();\n\nconst EventNavigator = () => {\n    return (\n        <Stack.Navigator\n            screenOptions={{\n                headerStyle: {\n                    backgroundColor: colors.primary,\n                },\n                headerTintColor: colors.textInverse,\n                headerTitleStyle: {\n                    fontWeight: 'bold',\n                },\n            }}\n        >\n            <Stack.Screen\n                name=\"EventsList\"\n                component={EventsScreen}\n                options={{ headerShown: false }}\n            />\n            <Stack.Screen\n                name=\"EventDetail\"\n                component={EventDetailScreen}\n                options={({ route }) => ({\n                    title: route.params?.eventTitle || 'Event Details',\n                })}\n            />\n            <Stack.Screen\n                name=\"CreateEvent\"\n                component={CreateEventScreen}\n                options={{ title: 'Create Event' }}\n            />\n        </Stack.Navigator>\n    );\n};\n\nexport default EventNavigator;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/navigation/ForumNavigator.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'SCREEN_NAMES' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":22}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/navigation/ForumNavigator.js\nimport { createStackNavigator } from '@react-navigation/stack';\nimport React from 'react';\n\nimport { SCREEN_NAMES } from '../constants/routes';\nimport { colors } from '../constants/theme';\nimport ForumDetailScreen from '../screens/forums/ForumDetailScreen';\nimport ForumScreen from '../screens/forums/ForumScreen';\nimport ThreadDetailScreen from '../screens/forums/ThreadDetailScreen';\n\nconst Stack = createStackNavigator();\n\nconst ForumNavigator = () => {\n    return (\n        <Stack.Navigator\n            screenOptions={{\n                headerStyle: {\n                    backgroundColor: colors.primary,\n                },\n                headerTintColor: colors.textInverse,\n                headerTitleStyle: {\n                    fontWeight: 'bold',\n                },\n            }}\n        >\n            <Stack.Screen\n                name=\"ForumsList\"\n                component={ForumScreen}\n                options={{ headerShown: false }}\n            />\n            <Stack.Screen\n                name=\"ChatRoom\"\n                component={ForumDetailScreen}\n                options={({ route }) => ({\n                    title: route.params?.roomTitle || 'Chat Room',\n                })}\n            />\n            <Stack.Screen\n                name=\"ThreadDetail\"\n                component={ThreadDetailScreen}\n                options={({ route }) => ({\n                    title: route.params?.threadTitle || 'Thread',\n                })}\n            />\n        </Stack.Navigator>\n    );\n};\n\nexport default ForumNavigator;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/navigation/MainNavigator.js","messages":[{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, justifyContent: 'center', alignItems: 'center' }","line":20,"column":26,"nodeType":"ObjectExpression","endLine":20,"endColumn":85},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, justifyContent: 'center', alignItems: 'center' }","line":59,"column":22,"nodeType":"ObjectExpression","endLine":59,"endColumn":81},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, justifyContent: 'center', alignItems: 'center' }","line":72,"column":22,"nodeType":"ObjectExpression","endLine":72,"endColumn":81},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, justifyContent: 'center', alignItems: 'center' }","line":85,"column":22,"nodeType":"ObjectExpression","endLine":85,"endColumn":81},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, justifyContent: 'center', alignItems: 'center' }","line":98,"column":22,"nodeType":"ObjectExpression","endLine":98,"endColumn":81},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, justifyContent: 'center', alignItems: 'center' }","line":111,"column":22,"nodeType":"ObjectExpression","endLine":111,"endColumn":81},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, justifyContent: 'center', alignItems: 'center' }","line":124,"column":22,"nodeType":"ObjectExpression","endLine":124,"endColumn":81},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, justifyContent: 'center', alignItems: 'center' }","line":137,"column":22,"nodeType":"ObjectExpression","endLine":137,"endColumn":81},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flex: 1, justifyContent: 'center', alignItems: 'center' }","line":150,"column":22,"nodeType":"ObjectExpression","endLine":150,"endColumn":81}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/navigation/MainNavigator.js\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport React from 'react';\nimport { View, Text } from 'react-native';\n\nimport Icon from '../components/common/Icon.js';\nimport { SCREEN_NAMES } from '../constants/routes';\nimport { useTheme } from '../store/contexts/ThemeContext';\n\n// Create error boundary for screens\nconst ScreenErrorBoundary = ({ children, screenName }) => {\n    const [hasError, setHasError] = React.useState(false);\n\n    React.useEffect(() => {\n        setHasError(false);\n    }, [screenName]);\n\n    if (hasError) {\n        return (\n            <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n                <Text>Error loading {screenName}</Text>\n            </View>\n        );\n    }\n\n    try {\n        return children;\n    } catch (error) {\n        console.error(`Error in ${screenName}:`, error);\n        setHasError(true);\n        return null;\n    }\n};\n\n// Create safe screen wrapper\nconst SafeScreen = ({ component: Component, screenName, ...props }) => {\n    return (\n        <ScreenErrorBoundary screenName={screenName}>\n            <Component {...props} />\n        </ScreenErrorBoundary>\n    );\n};\n\n// Import screens with error handling\nlet DashboardScreen,\n    BudgetScreen,\n    ChecklistScreen,\n    ResourcesScreen,\n    ProfileScreen,\n    ForumNavigator,\n    EventNavigator,\n    PersonalChatNavigator;\n\ntry {\n    DashboardScreen = require('../screens/main/DashboardScreen').default;\n} catch (e) {\n    console.error('Failed to load DashboardScreen:', e);\n    const DashboardScreenError = () => (\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n            <Text>Dashboard Error</Text>\n        </View>\n    );\n    DashboardScreenError.displayName = 'DashboardScreenError';\n    DashboardScreen = DashboardScreenError;\n}\n\ntry {\n    BudgetScreen = require('../screens/budget/BudgetScreen').default;\n} catch (e) {\n    console.error('Failed to load BudgetScreen:', e);\n    const BudgetScreenError = () => (\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n            <Text>Budget Error</Text>\n        </View>\n    );\n    BudgetScreenError.displayName = 'BudgetScreenError';\n    BudgetScreen = BudgetScreenError;\n}\n\ntry {\n    ChecklistScreen = require('../screens/checklist/ChecklistScreen').default;\n} catch (e) {\n    console.error('Failed to load ChecklistScreen:', e);\n    const ChecklistScreenError = () => (\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n            <Text>Checklist Error</Text>\n        </View>\n    );\n    ChecklistScreenError.displayName = 'ChecklistScreenError';\n    ChecklistScreen = ChecklistScreenError;\n}\n\ntry {\n    ResourcesScreen = require('../screens/content/ResourcesScreen').default;\n} catch (e) {\n    console.error('Failed to load ResourcesScreen:', e);\n    const ResourcesScreenError = () => (\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n            <Text>Resources Error</Text>\n        </View>\n    );\n    ResourcesScreenError.displayName = 'ResourcesScreenError';\n    ResourcesScreen = ResourcesScreenError;\n}\n\ntry {\n    ProfileScreen = require('../screens/main/ProfileScreen').default;\n} catch (e) {\n    console.error('Failed to load ProfileScreen:', e);\n    const ProfileScreenError = () => (\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n            <Text>Profile Error</Text>\n        </View>\n    );\n    ProfileScreenError.displayName = 'ProfileScreenError';\n    ProfileScreen = ProfileScreenError;\n}\n\ntry {\n    ForumNavigator = require('./ForumNavigator').default;\n} catch (e) {\n    console.error('Failed to load ForumNavigator:', e);\n    const ForumNavigatorError = () => (\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n            <Text>Forums Error</Text>\n        </View>\n    );\n    ForumNavigatorError.displayName = 'ForumNavigatorError';\n    ForumNavigator = ForumNavigatorError;\n}\n\ntry {\n    EventNavigator = require('./EventNavigator').default;\n} catch (e) {\n    console.error('Failed to load EventNavigator:', e);\n    const EventNavigatorError = () => (\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n            <Text>Events Error</Text>\n        </View>\n    );\n    EventNavigatorError.displayName = 'EventNavigatorError';\n    EventNavigator = EventNavigatorError;\n}\n\ntry {\n    PersonalChatNavigator = require('./PersonalChatNavigator').default;\n} catch (e) {\n    console.error('Failed to load PersonalChatNavigator:', e);\n    const PersonalChatNavigatorError = () => (\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n            <Text>Chat Error</Text>\n        </View>\n    );\n    PersonalChatNavigatorError.displayName = 'PersonalChatNavigatorError';\n    PersonalChatNavigator = PersonalChatNavigatorError;\n}\n\nconst Tab = createBottomTabNavigator();\n\nconst MainNavigator = () => {\n    const theme = useTheme();\n\n    // Provide default theme if undefined\n    const safeTheme = {\n        colors: {\n            primary: '#1E3A8A',\n            textSecondary: '#6B7280',\n            surface: '#FFFFFF',\n            border: '#E5E7EB',\n            ...theme?.colors,\n        },\n    };\n\n    return (\n        <Tab.Navigator\n            screenOptions={({ route }) => ({\n                headerShown: false,\n                tabBarIcon: ({ focused, color, size }) => {\n                    let iconName;\n                    switch (route.name) {\n                    case SCREEN_NAMES.DASHBOARD:\n                        iconName = focused ? 'home' : 'home-outline';\n                        break;\n                    case SCREEN_NAMES.PERSONAL_CHAT:\n                        iconName = focused ? 'message' : 'message-outline';\n                        break;\n                    case SCREEN_NAMES.BUDGET:\n                        iconName = focused ? 'finance' : 'finance';\n                        break;\n                    case SCREEN_NAMES.FORUMS:\n                        iconName = focused ? 'forum' : 'forum-outline';\n                        break;\n                    case SCREEN_NAMES.RESOURCES:\n                        iconName = focused\n                            ? 'book-open-page-variant'\n                            : 'book-open-page-variant-outline';\n                        break;\n                    case SCREEN_NAMES.EVENTS:\n                        iconName = focused ? 'calendar-month' : 'calendar-month-outline';\n                        break;\n                    default:\n                        iconName = 'circle';\n                    }\n\n                    // Fallback if Icon component fails\n                    try {\n                        return <Icon name={iconName} size={size} color={color} />;\n                    } catch (error) {\n                        console.error('Icon error:', error);\n                        return <Text style={{ color, fontSize: size }}>•</Text>;\n                    }\n                },\n                tabBarActiveTintColor: safeTheme.colors.primary,\n                tabBarInactiveTintColor: safeTheme.colors.textSecondary,\n                tabBarStyle: {\n                    backgroundColor: safeTheme.colors.surface,\n                    borderTopColor: safeTheme.colors.border,\n                },\n            })}\n        >\n            {/* Tab screens configuration */}\n            <Tab.Screen name={SCREEN_NAMES.DASHBOARD} options={{ title: 'Home' }}>\n                {(props) => (\n                    <SafeScreen component={DashboardScreen} screenName=\"Dashboard\" {...props} />\n                )}\n            </Tab.Screen>\n\n            <Tab.Screen name={SCREEN_NAMES.PERSONAL_CHAT} options={{ title: 'Chat' }}>\n                {(props) => (\n                    <SafeScreen\n                        component={PersonalChatNavigator}\n                        screenName=\"PersonalChat\"\n                        {...props}\n                    />\n                )}\n            </Tab.Screen>\n\n            <Tab.Screen name={SCREEN_NAMES.BUDGET} options={{ title: 'Budget' }}>\n                {(props) => <SafeScreen component={BudgetScreen} screenName=\"Budget\" {...props} />}\n            </Tab.Screen>\n\n            <Tab.Screen name={SCREEN_NAMES.FORUMS} options={{ title: 'Groups' }}>\n                {(props) => (\n                    <SafeScreen component={ForumNavigator} screenName=\"Forums\" {...props} />\n                )}\n            </Tab.Screen>\n\n            <Tab.Screen name={SCREEN_NAMES.RESOURCES} options={{ title: 'Resources' }}>\n                {(props) => (\n                    <SafeScreen component={ResourcesScreen} screenName=\"Resources\" {...props} />\n                )}\n            </Tab.Screen>\n\n            <Tab.Screen name={SCREEN_NAMES.EVENTS} options={{ title: 'Events' }}>\n                {(props) => (\n                    <SafeScreen component={EventNavigator} screenName=\"Events\" {...props} />\n                )}\n            </Tab.Screen>\n\n            <Tab.Screen\n                name={SCREEN_NAMES.CHECKLIST}\n                options={{\n                    title: 'Checklist',\n                    tabBarButton: () => null,\n                }}\n            >\n                {(props) => (\n                    <SafeScreen component={ChecklistScreen} screenName=\"Checklist\" {...props} />\n                )}\n            </Tab.Screen>\n\n            <Tab.Screen\n                name={SCREEN_NAMES.PROFILE}\n                options={{\n                    title: 'Profile',\n                    tabBarButton: () => null,\n                }}\n            >\n                {(props) => (\n                    <SafeScreen component={ProfileScreen} screenName=\"Profile\" {...props} />\n                )}\n            </Tab.Screen>\n        </Tab.Navigator>\n    );\n};\n\nexport default MainNavigator;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/navigation/NavigationService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/navigation/OnboardingNavigator.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createStackNavigator } from '@react-navigation/stack';\nimport React from 'react';\n\nimport { SCREEN_NAMES } from '../constants/routes';\nimport { colors } from '../constants/theme';\nimport PathSelectionScreen from '../screens/onboarding/PathSelectionScreen';\nimport PrioritySelectionScreen from '../screens/onboarding/PrioritySelectionScreen';\n\nconst Stack = createStackNavigator();\n\nconst OnboardingNavigator = ({ onComplete }) => {\n    return (\n        <Stack.Navigator\n            screenOptions={{\n                headerShown: false,\n                cardStyle: {\n                    backgroundColor: colors.background,\n                },\n                animationEnabled: true,\n                gestureEnabled: true,\n            }}\n            initialRouteName={SCREEN_NAMES.PATH_SELECTION}\n        >\n            <Stack.Screen\n                name={SCREEN_NAMES.PATH_SELECTION}\n                component={PathSelectionScreen}\n                options={{\n                    gestureEnabled: false, // Prevent going back\n                }}\n            />\n            <Stack.Screen\n                name={SCREEN_NAMES.PRIORITY_SELECTION}\n                options={{\n                    gestureEnabled: true,\n                }}\n            >\n                {(props) => <PrioritySelectionScreen {...props} onComplete={onComplete} />}\n            </Stack.Screen>\n        </Stack.Navigator>\n    );\n};\n\nexport default OnboardingNavigator;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/navigation/PersonalChatNavigator.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/navigation/PersonalChatNavigator.js\nimport { createStackNavigator } from '@react-navigation/stack';\nimport React from 'react';\n\nimport { SCREEN_NAMES } from '../constants/routes';\nimport { colors } from '../constants/theme';\nimport PersonalChatDetailScreen from '../screens/personalChat/PersonalChatDetailScreen';\nimport PersonalChatListScreen from '../screens/personalChat/PersonalChatListScreen';\nimport UserProfileScreen from '../screens/personalChat/UserProfileScreen';\n\nconst Stack = createStackNavigator();\n\nconst PersonalChatNavigator = () => {\n    return (\n        <Stack.Navigator\n            screenOptions={{\n                headerStyle: {\n                    backgroundColor: colors.primary,\n                },\n                headerTintColor: colors.textInverse,\n                headerTitleStyle: {\n                    fontWeight: 'bold',\n                },\n            }}\n        >\n            <Stack.Screen\n                name={SCREEN_NAMES.PERSONAL_CHAT_LIST}\n                component={PersonalChatListScreen}\n                options={{\n                    title: 'Messages',\n                    headerShown: false,\n                }}\n            />\n            <Stack.Screen\n                name={SCREEN_NAMES.PERSONAL_CHAT_DETAIL}\n                component={PersonalChatDetailScreen}\n                options={({ route }) => ({\n                    title: route.params?.userName || 'Chat',\n                    headerBackTitle: 'Back',\n                })}\n            />\n            <Stack.Screen\n                name={SCREEN_NAMES.USER_PROFILE}\n                component={UserProfileScreen}\n                options={({ route }) => ({\n                    title: route.params?.userName || 'Profile',\n                })}\n            />\n        </Stack.Navigator>\n    );\n};\n\nexport default PersonalChatNavigator;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/navigation/RootNavigator.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NavigationContainer } from '@react-navigation/native';\nimport React from 'react';\n\nimport FullScreenLoader from '../components/common/LoadingSpinner';\nimport { useApp } from '../store/contexts/AppContext';\nimport { useAuth } from '../store/contexts/AuthContext';\n\nimport AuthNavigator from './AuthNavigator';\nimport MainNavigator from './MainNavigator'; // Corrected from AppNavigator\nimport { navigationRef } from './NavigationService'; // Import the ref\n\nconst RootNavigator = () => {\n    const { user, loading: authLoading } = useAuth();\n    const { loading: appLoading } = useApp();\n\n    // Show a loader while contexts are initializing\n    if (appLoading || authLoading) {\n        return <FullScreenLoader />;\n    }\n\n    // The NavigationContainer now correctly wraps the actual navigators\n    return (\n        <NavigationContainer ref={navigationRef}>\n            {user ? <MainNavigator /> : <AuthNavigator />}\n        </NavigationContainer>\n    );\n};\n\nexport default RootNavigator;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/LoadingScreen.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, ActivityIndicator, StyleSheet } from 'react-native';\n\nimport { colors } from '../constants/theme';\n\nconst LoadingScreen = () => {\n    return (\n        <View style={styles.container}>\n            <ActivityIndicator size=\"large\" color={colors.primary} />\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: colors.background,\n    },\n});\n\nexport default LoadingScreen;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/auth/LoginScreen.js","messages":[{"ruleId":"import/order","severity":2,"message":"`../../utils` import should occur before import of `../../utils/alerts`","line":22,"column":1,"nodeType":"ImportDeclaration","endLine":22,"endColumn":40,"fix":{"range":[656,823],"text":"import { devError } from '../../utils';\nimport { showErrorAlert } from '../../utils/alerts';\nimport { validateEmail, validatePassword } from '../../utils/validation';\n"}},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginTop: 20 }","line":230,"column":59,"nodeType":"ObjectExpression","endLine":230,"endColumn":76}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// frontend/src/screens/auth/LoginScreen.js\nimport React, { useState, useCallback, useMemo, useEffect } from 'react';\nimport {\n    View,\n    Text,\n    TouchableOpacity,\n    KeyboardAvoidingView,\n    Platform,\n    ScrollView,\n    Alert,\n} from 'react-native';\nimport { TextInput } from 'react-native-paper';\n\nimport { Button } from '../../components/ui/Button';\nimport { SCREEN_NAMES } from '../../constants/routes';\nimport { colors } from '../../constants/theme';\nimport { useForm } from '../../hooks/useForm';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { loginStyles as styles } from '../../styles/screens/auth/LoginScreenStyles';\nimport { showErrorAlert } from '../../utils/alerts';\nimport { validateEmail, validatePassword } from '../../utils/validation';\nimport { devError } from '../../utils';\n\nconst LoginScreen = ({ navigation, route }) => {\n    const [showPassword, setShowPassword] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const { login } = useAuth();\n\n    // Get email from navigation params if coming from registration\n    const emailFromParams = route.params?.email || '';\n\n    const { values, errors, handleChange, handleBlur, validateForm, setValues } = useForm({\n        initialValues: {\n            email: emailFromParams,\n            password: '',\n        },\n        validationRules: {\n            email: (value) => {\n                if (!value) return 'Email is required';\n                if (!validateEmail(value)) return 'Invalid email format';\n                return null;\n            },\n            password: (value) => {\n                if (!value) return 'Password is required';\n                if (!validatePassword(value)) return 'Password must be at least 6 characters';\n                return null;\n            },\n        },\n    });\n\n    // Update email if navigated with params\n    useEffect(() => {\n        if (emailFromParams) {\n            setValues((prev) => ({ ...prev, email: emailFromParams }));\n        }\n    }, [emailFromParams, setValues]);\n\n    const togglePasswordVisibility = useCallback(() => {\n        setShowPassword((prev) => !prev);\n    }, []);\n\n    const handleLogin = useCallback(async () => {\n        const isValid = validateForm();\n        if (!isValid) return;\n\n        setLoading(true);\n        try {\n            await login(values.email.trim().toLowerCase(), values.password);\n            // Navigation will be handled by AuthContext after successful login\n        } catch (error) {\n            devError('Login', 'Login error', error);\n\n            // Handle specific error messages\n            const errorMessage = error.message?.toLowerCase() || '';\n\n            if (errorMessage.includes('invalid') || errorMessage.includes('incorrect')) {\n                showErrorAlert(\n                    'Login Failed',\n                    'The email or password you entered is incorrect. Please try again.',\n                );\n            } else if (\n                errorMessage.includes('not found') ||\n                errorMessage.includes('doesn\\'t exist')\n            ) {\n                Alert.alert(\n                    'Account Not Found',\n                    'No account found with this email address. Would you like to create one?',\n                    [\n                        {\n                            text: 'Cancel',\n                            style: 'cancel',\n                        },\n                        {\n                            text: 'Sign Up',\n                            onPress: () =>\n                                navigation.navigate(SCREEN_NAMES.REGISTER, {\n                                    email: values.email.trim().toLowerCase(),\n                                }),\n                        },\n                    ],\n                );\n            } else if (errorMessage.includes('network')) {\n                showErrorAlert(\n                    'Network Error',\n                    'Please check your internet connection and try again.',\n                );\n            } else if (errorMessage.includes('many attempts') || errorMessage.includes('locked')) {\n                showErrorAlert(\n                    'Account Locked',\n                    'Too many failed login attempts. Please try again later or reset your password.',\n                );\n            } else {\n                showErrorAlert(\n                    'Login Failed',\n                    error.message || 'An error occurred. Please try again.',\n                );\n            }\n        } finally {\n            setLoading(false);\n        }\n    }, [values, validateForm, login, navigation]);\n\n    const navigateToRegister = useCallback(() => {\n        navigation.navigate(SCREEN_NAMES.REGISTER, {\n            email: values.email.trim().toLowerCase(),\n        });\n    }, [navigation, values.email]);\n\n    const showTestCredentials = useCallback(() => {\n        Alert.alert(\n            'Test Credentials',\n            'Email: test@example.com\\nPassword: test123\\n\\nNote: You need to run the createTestUser script in the backend first.',\n            [\n                {\n                    text: 'Copy Email',\n                    onPress: () => {\n                        setValues((prev) => ({ ...prev, email: 'test@example.com' }));\n                    },\n                },\n                { text: 'OK' },\n            ],\n        );\n    }, [setValues]);\n\n    const inputTheme = useMemo(\n        () => ({\n            colors: { primary: colors.primary },\n        }),\n        [],\n    );\n\n    return (\n        <KeyboardAvoidingView\n            style={styles.container}\n            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n        >\n            <ScrollView\n                contentContainerStyle={styles.scrollContent}\n                keyboardShouldPersistTaps=\"handled\"\n                showsVerticalScrollIndicator={false}\n            >\n                <View style={styles.header}>\n                    <Text style={styles.title}>Welcome Back!</Text>\n                    <Text style={styles.subtitle}>Sign in to continue</Text>\n                </View>\n\n                <View style={styles.form}>\n                    <TextInput\n                        label=\"Email\"\n                        value={values.email}\n                        onChangeText={handleChange('email')}\n                        onBlur={handleBlur('email')}\n                        mode=\"outlined\"\n                        keyboardType=\"email-address\"\n                        autoCapitalize=\"none\"\n                        autoComplete=\"email\"\n                        textContentType=\"emailAddress\"\n                        style={styles.input}\n                        theme={inputTheme}\n                        error={!!errors.email}\n                        disabled={loading}\n                    />\n                    {errors.email && <Text style={styles.errorText}>{errors.email}</Text>}\n\n                    <TextInput\n                        label=\"Password\"\n                        value={values.password}\n                        onChangeText={handleChange('password')}\n                        onBlur={handleBlur('password')}\n                        mode=\"outlined\"\n                        secureTextEntry={!showPassword}\n                        autoComplete=\"password\"\n                        textContentType=\"password\"\n                        style={styles.input}\n                        theme={inputTheme}\n                        error={!!errors.password}\n                        disabled={loading}\n                        right={\n                            <TextInput.Icon\n                                icon={showPassword ? 'eye-off' : 'eye'}\n                                onPress={togglePasswordVisibility}\n                                disabled={loading}\n                            />\n                        }\n                    />\n                    {errors.password && <Text style={styles.errorText}>{errors.password}</Text>}\n\n                    <Button\n                        title=\"Sign In\"\n                        onPress={handleLogin}\n                        loading={loading}\n                        disabled={loading}\n                        style={styles.button}\n                        fullWidth\n                    />\n\n                    <TouchableOpacity\n                        onPress={navigateToRegister}\n                        style={styles.linkContainer}\n                        disabled={loading}\n                    >\n                        <Text style={styles.linkText}>\n                            Don't have an account? <Text style={styles.linkBold}>Sign Up</Text>\n                        </Text>\n                    </TouchableOpacity>\n\n                    {__DEV__ && (\n                        <TouchableOpacity\n                            onPress={showTestCredentials}\n                            style={[styles.linkContainer, { marginTop: 20 }]}\n                            disabled={loading}\n                        >\n                            <Text style={[styles.linkText, { color: colors.info }]}>\n                                Show Test Credentials\n                            </Text>\n                        </TouchableOpacity>\n                    )}\n                </View>\n            </ScrollView>\n        </KeyboardAvoidingView>\n    );\n};\n\nexport default React.memo(LoginScreen);\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/auth/RegisterScreen.js","messages":[{"ruleId":"import/order","severity":2,"message":"`../../utils` import should occur before import of `../../utils/alerts`","line":24,"column":1,"nodeType":"ImportDeclaration","endLine":24,"endColumn":48,"fix":{"range":[799,988],"text":"import { devLog, devError } from '../../utils';\nimport { showErrorAlert } from '../../utils/alerts';\nimport { validateEmail, validatePassword, validateName } from '../../utils/validation';\n"}},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'values'. Either exclude it or remove the dependency array.","line":139,"column":8,"nodeType":"ArrayExpression","endLine":139,"endColumn":55,"suggestions":[{"desc":"Update the dependencies array to be: [selectedPath, validateForm, setErrors]","fix":{"range":[4686,4733],"text":"[selectedPath, validateForm, setErrors]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// frontend/src/screens/auth/RegisterScreen.js\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { useState, useCallback } from 'react';\nimport {\n    View,\n    Text,\n    TouchableOpacity,\n    KeyboardAvoidingView,\n    Platform,\n    ScrollView,\n    Alert,\n} from 'react-native';\nimport { TextInput, Checkbox, RadioButton } from 'react-native-paper';\n\nimport { Button } from '../../components/ui/Button';\nimport { PROFESSIONAL_PATHS } from '../../constants/config';\nimport { SCREEN_NAMES } from '../../constants/routes';\nimport { colors } from '../../constants/theme';\nimport { useForm } from '../../hooks/useForm';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { registerStyles as styles } from '../../styles/screens/auth/RegisterScreenStyles';\nimport { showErrorAlert } from '../../utils/alerts';\nimport { validateEmail, validatePassword, validateName } from '../../utils/validation';\nimport { devLog, devError } from '../../utils';\n\nconst CHECKLIST_ITEMS = {\n    FREELANCER: [\n        {\n            key: 'OBTAIN_NIE',\n            title: 'Obtain your NIE',\n            description: 'Get your foreigner identification number',\n        },\n        {\n            key: 'REGISTER_AUTONOMO',\n            title: 'Register as Autónomo',\n            description: 'Complete your self-employment registration',\n        },\n        {\n            key: 'UNDERSTAND_TAXES',\n            title: 'Understand Tax Obligations',\n            description: 'Learn about IVA and IRPF requirements',\n        },\n        {\n            key: 'OPEN_BANK_ACCOUNT',\n            title: 'Open Spanish Bank Account',\n            description: 'Set up your business banking',\n        },\n    ],\n    ENTREPRENEUR: [\n        {\n            key: 'OBTAIN_NIE',\n            title: 'Obtain your NIE',\n            description: 'Get your foreigner identification number',\n        },\n        {\n            key: 'FORM_SL_COMPANY',\n            title: 'Form an S.L. Company',\n            description: 'Establish your limited liability company',\n        },\n        {\n            key: 'GET_COMPANY_NIF',\n            title: 'Get Company NIF',\n            description: 'Obtain your company tax ID',\n        },\n        {\n            key: 'RESEARCH_FUNDING',\n            title: 'Research Funding Options',\n            description: 'Explore grants and investment opportunities',\n        },\n    ],\n};\n\nconst RegisterScreen = ({ navigation }) => {\n    const [showPassword, setShowPassword] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [selectedPath, setSelectedPath] = useState('');\n    const [selectedChecklistItems, setSelectedChecklistItems] = useState([]);\n    const [showChecklistSelection, setShowChecklistSelection] = useState(false);\n    const { register } = useAuth();\n\n    const { values, errors, handleChange, handleBlur, validateForm, setErrors } = useForm({\n        initialValues: {\n            name: '',\n            email: '',\n            password: '',\n        },\n        validationRules: {\n            name: (value) => {\n                if (!value) return 'Name is required';\n                if (!validateName(value)) return 'Name must be at least 2 characters';\n                return null;\n            },\n            email: (value) => {\n                if (!value) return 'Email is required';\n                if (!validateEmail(value)) return 'Invalid email format';\n                return null;\n            },\n            password: (value) => {\n                if (!value) return 'Password is required';\n                if (!validatePassword(value)) return 'Password must be at least 6 characters';\n                return null;\n            },\n        },\n    });\n\n    const togglePasswordVisibility = useCallback(() => {\n        setShowPassword((prev) => !prev);\n    }, []);\n\n    const handlePathSelection = useCallback((path) => {\n        setSelectedPath(path);\n        setShowChecklistSelection(false);\n        setSelectedChecklistItems([]);\n    }, []);\n\n    const toggleChecklistItem = useCallback((itemKey) => {\n        setSelectedChecklistItems((prev) => {\n            if (prev.includes(itemKey)) {\n                return prev.filter((key) => key !== itemKey);\n            } else {\n                return [...prev, itemKey];\n            }\n        });\n    }, []);\n\n    const handleNext = useCallback(() => {\n        const isValid = validateForm();\n        if (!isValid) return;\n\n        if (!selectedPath) {\n            setErrors((prev) => ({\n                ...prev,\n                professionalPath: 'Please select your professional path',\n            }));\n            return;\n        }\n\n        setShowChecklistSelection(true);\n    }, [values, selectedPath, validateForm, setErrors]);\n\n    const handleBack = useCallback(() => {\n        setShowChecklistSelection(false);\n    }, []);\n\n    const handleRegister = useCallback(async () => {\n        if (selectedChecklistItems.length === 0) {\n            showErrorAlert(\n                'Select Priorities',\n                'Please select at least one checklist item to get started.',\n            );\n            return;\n        }\n\n        setLoading(true);\n        try {\n            // Trim and lowercase email for consistency\n            const trimmedEmail = values.email.trim().toLowerCase();\n\n            // Create user object with professional path\n            const userData = {\n                name: values.name.trim(),\n                email: trimmedEmail,\n                password: values.password,\n                professionalPath: selectedPath,\n            };\n\n            // Register the user\n            const result = await register(\n                userData.name,\n                userData.email,\n                userData.password,\n                userData.professionalPath,\n            );\n\n            // Check if registration requires login\n            if (result && result.requiresLogin) {\n                devLog('Register', 'Registration successful, redirecting to login');\n\n                // Store selected checklist items for after login\n                await AsyncStorage.setItem(\n                    'pendingChecklistItems',\n                    JSON.stringify(selectedChecklistItems),\n                );\n\n                // Show success message and navigate to login\n                Alert.alert(\n                    'Registration Successful',\n                    'Your account has been created successfully. Please login to continue.',\n                    [\n                        {\n                            text: 'OK',\n                            onPress: () =>\n                                navigation.navigate(SCREEN_NAMES.LOGIN, {\n                                    email: trimmedEmail,\n                                }),\n                        },\n                    ],\n                );\n\n                return;\n            }\n\n            // If we have a token, registration is complete\n            if (result && result.token) {\n                // Store selected checklist items in AsyncStorage for later use\n                await AsyncStorage.setItem(\n                    'pendingChecklistItems',\n                    JSON.stringify(selectedChecklistItems),\n                );\n\n                // The auth context will handle navigation after successful registration\n            }\n        } catch (error) {\n            devError('Register', 'Registration error details', error);\n\n            // Handle specific error cases\n            if (error.message) {\n                const errorMessage = error.message.toLowerCase();\n\n                if (errorMessage.includes('already exists') || errorMessage.includes('duplicate')) {\n                    // User already exists error\n                    setErrors((prev) => ({ ...prev, email: 'This email is already registered' }));\n                    setShowChecklistSelection(false); // Go back to the form\n\n                    Alert.alert(\n                        'Email Already Registered',\n                        'This email address is already associated with an account. Would you like to sign in instead?',\n                        [\n                            {\n                                text: 'Cancel',\n                                style: 'cancel',\n                            },\n                            {\n                                text: 'Go to Login',\n                                onPress: () =>\n                                    navigation.navigate(SCREEN_NAMES.LOGIN, {\n                                        email: values.email.trim().toLowerCase(),\n                                    }),\n                            },\n                        ],\n                    );\n                } else if (errorMessage.includes('invalid email')) {\n                    // Invalid email format\n                    setErrors((prev) => ({ ...prev, email: 'Please enter a valid email address' }));\n                    setShowChecklistSelection(false);\n                    showErrorAlert(\n                        'Invalid Email',\n                        'Please check your email address and try again.',\n                    );\n                } else if (errorMessage.includes('password')) {\n                    // Password related error\n                    setErrors((prev) => ({\n                        ...prev,\n                        password: 'Password must be at least 6 characters',\n                    }));\n                    setShowChecklistSelection(false);\n                    showErrorAlert(\n                        'Invalid Password',\n                        'Your password must be at least 6 characters long.',\n                    );\n                } else if (errorMessage.includes('network')) {\n                    // Network error\n                    showErrorAlert(\n                        'Network Error',\n                        'Please check your internet connection and try again.',\n                    );\n                } else {\n                    // Generic error\n                    showErrorAlert(\n                        'Registration Failed',\n                        error.message || 'An error occurred during registration. Please try again.',\n                    );\n                }\n            } else {\n                // Fallback for unknown errors\n                showErrorAlert(\n                    'Registration Failed',\n                    'An unexpected error occurred. Please try again later.',\n                );\n            }\n        } finally {\n            setLoading(false);\n        }\n    }, [values, register, selectedPath, selectedChecklistItems, navigation, setErrors]);\n\n    const navigateToLogin = useCallback(() => {\n        navigation.navigate(SCREEN_NAMES.LOGIN);\n    }, [navigation]);\n\n    const checklistItems =\n        selectedPath === PROFESSIONAL_PATHS.FREELANCER\n            ? CHECKLIST_ITEMS.FREELANCER\n            : CHECKLIST_ITEMS.ENTREPRENEUR;\n\n    const inputTheme = { colors: { primary: colors.primary } };\n\n    if (showChecklistSelection) {\n        return (\n            <KeyboardAvoidingView\n                style={styles.container}\n                behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n            >\n                <ScrollView\n                    contentContainerStyle={styles.scrollContent}\n                    keyboardShouldPersistTaps=\"handled\"\n                    showsVerticalScrollIndicator={false}\n                >\n                    <View style={styles.header}>\n                        <Text style={styles.title}>Select Your Priorities</Text>\n                        <Text style={styles.subtitle}>\n                            Choose the items you want to track on your dashboard\n                        </Text>\n                    </View>\n\n                    <View style={styles.checklistContainer}>\n                        {checklistItems.map((item) => (\n                            <TouchableOpacity\n                                key={item.key}\n                                style={[\n                                    styles.checklistCard,\n                                    selectedChecklistItems.includes(item.key) &&\n                                        styles.checklistCardSelected,\n                                ]}\n                                onPress={() => toggleChecklistItem(item.key)}\n                                activeOpacity={0.7}\n                            >\n                                <View style={styles.checklistCardContent}>\n                                    <Checkbox.Android\n                                        status={\n                                            selectedChecklistItems.includes(item.key)\n                                                ? 'checked'\n                                                : 'unchecked'\n                                        }\n                                        color={colors.primary}\n                                    />\n                                    <View style={styles.checklistTextContainer}>\n                                        <Text style={styles.checklistTitle}>{item.title}</Text>\n                                        <Text style={styles.checklistDescription}>\n                                            {item.description}\n                                        </Text>\n                                    </View>\n                                </View>\n                            </TouchableOpacity>\n                        ))}\n                    </View>\n\n                    <View style={styles.buttonRow}>\n                        <Button\n                            title=\"Back\"\n                            onPress={handleBack}\n                            variant=\"outline\"\n                            style={styles.backButton}\n                            disabled={loading}\n                        />\n                        <Button\n                            title=\"Create Account\"\n                            onPress={handleRegister}\n                            loading={loading}\n                            disabled={loading || selectedChecklistItems.length === 0}\n                            style={styles.nextButton}\n                            fullWidth={false}\n                        />\n                    </View>\n                </ScrollView>\n            </KeyboardAvoidingView>\n        );\n    }\n\n    return (\n        <KeyboardAvoidingView\n            style={styles.container}\n            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n        >\n            <ScrollView\n                contentContainerStyle={styles.scrollContent}\n                keyboardShouldPersistTaps=\"handled\"\n                showsVerticalScrollIndicator={false}\n            >\n                <View style={styles.header}>\n                    <Text style={styles.title}>Create Account</Text>\n                    <Text style={styles.subtitle}>Join our professional community</Text>\n                </View>\n\n                <View style={styles.form}>\n                    <TextInput\n                        label=\"Full Name\"\n                        value={values.name}\n                        onChangeText={handleChange('name')}\n                        onBlur={handleBlur('name')}\n                        mode=\"outlined\"\n                        autoComplete=\"name\"\n                        textContentType=\"name\"\n                        style={styles.input}\n                        theme={inputTheme}\n                        error={!!errors.name}\n                        disabled={loading}\n                    />\n                    {errors.name && <Text style={styles.errorText}>{errors.name}</Text>}\n\n                    <TextInput\n                        label=\"Email\"\n                        value={values.email}\n                        onChangeText={handleChange('email')}\n                        onBlur={handleBlur('email')}\n                        mode=\"outlined\"\n                        keyboardType=\"email-address\"\n                        autoCapitalize=\"none\"\n                        autoComplete=\"email\"\n                        textContentType=\"emailAddress\"\n                        style={styles.input}\n                        theme={inputTheme}\n                        error={!!errors.email}\n                        disabled={loading}\n                    />\n                    {errors.email && <Text style={styles.errorText}>{errors.email}</Text>}\n\n                    <TextInput\n                        label=\"Password\"\n                        value={values.password}\n                        onChangeText={handleChange('password')}\n                        onBlur={handleBlur('password')}\n                        mode=\"outlined\"\n                        secureTextEntry={!showPassword}\n                        autoComplete=\"password-new\"\n                        textContentType=\"newPassword\"\n                        style={styles.input}\n                        theme={inputTheme}\n                        error={!!errors.password}\n                        disabled={loading}\n                        right={\n                            <TextInput.Icon\n                                icon={showPassword ? 'eye-off' : 'eye'}\n                                onPress={togglePasswordVisibility}\n                                disabled={loading}\n                            />\n                        }\n                    />\n                    {errors.password && <Text style={styles.errorText}>{errors.password}</Text>}\n\n                    <View style={styles.pathSection}>\n                        <Text style={styles.pathTitle}>I am a...</Text>\n                        <Text style={styles.pathSubtitle}>Choose your professional path</Text>\n\n                        <RadioButton.Group onValueChange={handlePathSelection} value={selectedPath}>\n                            <TouchableOpacity\n                                style={[\n                                    styles.pathCard,\n                                    selectedPath === PROFESSIONAL_PATHS.FREELANCER &&\n                                        styles.pathCardSelected,\n                                    errors.professionalPath &&\n                                        !selectedPath &&\n                                        styles.pathCardError,\n                                ]}\n                                onPress={() => handlePathSelection(PROFESSIONAL_PATHS.FREELANCER)}\n                                activeOpacity={0.7}\n                            >\n                                <View style={styles.pathCardContent}>\n                                    <RadioButton.Android\n                                        value={PROFESSIONAL_PATHS.FREELANCER}\n                                        color={colors.primary}\n                                    />\n                                    <View style={styles.pathCardTextContainer}>\n                                        <Text style={styles.pathCardTitle}>Freelancer</Text>\n                                        <Text style={styles.pathCardDescription}>\n                                            Working independently as autónomo\n                                        </Text>\n                                    </View>\n                                </View>\n                            </TouchableOpacity>\n\n                            <TouchableOpacity\n                                style={[\n                                    styles.pathCard,\n                                    selectedPath === PROFESSIONAL_PATHS.ENTREPRENEUR &&\n                                        styles.pathCardSelected,\n                                    errors.professionalPath &&\n                                        !selectedPath &&\n                                        styles.pathCardError,\n                                ]}\n                                onPress={() => handlePathSelection(PROFESSIONAL_PATHS.ENTREPRENEUR)}\n                                activeOpacity={0.7}\n                            >\n                                <View style={styles.pathCardContent}>\n                                    <RadioButton.Android\n                                        value={PROFESSIONAL_PATHS.ENTREPRENEUR}\n                                        color={colors.primary}\n                                    />\n                                    <View style={styles.pathCardTextContainer}>\n                                        <Text style={styles.pathCardTitle}>Entrepreneur</Text>\n                                        <Text style={styles.pathCardDescription}>\n                                            Starting or running a business\n                                        </Text>\n                                    </View>\n                                </View>\n                            </TouchableOpacity>\n                        </RadioButton.Group>\n\n                        {errors.professionalPath && !selectedPath && (\n                            <Text style={styles.errorText}>{errors.professionalPath}</Text>\n                        )}\n                    </View>\n\n                    <Button\n                        title=\"Next\"\n                        onPress={handleNext}\n                        disabled={loading || !selectedPath}\n                        style={styles.button}\n                        fullWidth\n                    />\n\n                    <TouchableOpacity\n                        onPress={navigateToLogin}\n                        style={styles.linkContainer}\n                        disabled={loading}\n                    >\n                        <Text style={styles.linkText}>\n                            Already have an account? <Text style={styles.linkBold}>Sign In</Text>\n                        </Text>\n                    </TouchableOpacity>\n                </View>\n            </ScrollView>\n        </KeyboardAvoidingView>\n    );\n};\n\nexport default React.memo(RegisterScreen);\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/auth/WelcomeScreen.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LinearGradient } from 'expo-linear-gradient';\nimport React from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\n\nimport { SCREEN_NAMES } from '../../constants/routes';\nimport { colors } from '../../constants/theme';\nimport { welcomeStyles as styles } from '../../styles/screens/auth/WelcomeScreenStyles';\n\nconst WelcomeScreen = ({ navigation }) => {\n    return (\n        <LinearGradient colors={[colors.primary, colors.secondary]} style={styles.container}>\n            <View style={styles.content}>\n                <Text style={styles.title}>Conecta Alicante</Text>\n                <Text style={styles.subtitle}>Your professional companion in Alicante</Text>\n\n                <View style={styles.buttonContainer}>\n                    <TouchableOpacity\n                        style={styles.primaryButton}\n                        onPress={() => navigation.navigate(SCREEN_NAMES.REGISTER)}\n                    >\n                        <Text style={styles.primaryButtonText}>Get Started</Text>\n                    </TouchableOpacity>\n\n                    <TouchableOpacity\n                        style={styles.secondaryButton}\n                        onPress={() => navigation.navigate(SCREEN_NAMES.LOGIN)}\n                    >\n                        <Text style={styles.secondaryButtonText}>\n                            Already have an account? Sign In\n                        </Text>\n                    </TouchableOpacity>\n                </View>\n            </View>\n        </LinearGradient>\n    );\n};\n\nexport default WelcomeScreen;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/budget/BudgetScreen.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'StyleSheet' is defined but never used.","line":10,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'socketService' is defined but never used.","line":32,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":21},{"ruleId":"import/order","severity":2,"message":"`../../services/api/client` import should occur before import of `../../services/budgetService`","line":33,"column":1,"nodeType":"ImportDeclaration","endLine":33,"endColumn":51,"fix":{"range":[835,1002],"text":"import apiClient from '../../services/api/client';\nimport budgetService from '../../services/budgetService';\nimport socketService from '../../services/socketService';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../utils/devLog` import should occur before import of `../../utils/formatting`","line":38,"column":1,"nodeType":"ImportDeclaration","endLine":38,"endColumn":55,"fix":{"range":[1240,1364],"text":"import { devLog, devError } from '../../utils/devLog';\nimport { formatCurrency, formatDate } from '../../utils/formatting';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../hooks/useSocketEvents` import should occur before import of `../../services/budgetService`","line":39,"column":1,"nodeType":"ImportDeclaration","endLine":39,"endColumn":63,"fix":{"range":[835,1427],"text":"import { useSocketEvents } from '../../hooks/useSocketEvents';\nimport budgetService from '../../services/budgetService';\nimport socketService from '../../services/socketService';\nimport apiClient from '../../services/api/client';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { budgetStyles as styles } from '../../styles/screens/budget/BudgetScreenStyles';\nimport { showErrorAlert, showSuccessAlert, showConfirmAlert } from '../../utils/alerts';\nimport { formatCurrency, formatDate } from '../../utils/formatting';\nimport { devLog, devError } from '../../utils/devLog';\n"}},{"ruleId":"no-unused-vars","severity":2,"message":"'navigation' is defined but never used. Allowed unused args must match /^_/u.","line":41,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":35},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCategories'. Either include it or remove the dependency array.","line":67,"column":8,"nodeType":"ArrayExpression","endLine":67,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [loadCategories, user?.professionalPath]","fix":{"range":[2420,2444],"text":"[loadCategories, user?.professionalPath]"}}]},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":102,"column":74,"nodeType":"ArrowFunctionExpression","messageId":"missing","endLine":103,"endColumn":1,"fix":{"range":[3760,3787],"text":"entry,\n                    )"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":103,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"missing","endLine":104,"endColumn":1,"fix":{"range":[3786,3805],"text":"),\n                )"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":108,"column":76,"nodeType":"ArrowFunctionExpression","messageId":"missing","endLine":109,"endColumn":1,"fix":{"range":[4013,4032],"text":"),\n                )"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":111,"column":32,"nodeType":"Property","messageId":"missing","endLine":112,"endColumn":1,"fix":{"range":[4078,4085],"text":"),\n    }"}},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'loadCategories'. Either include it or remove the dependency array.","line":181,"column":8,"nodeType":"ArrayExpression","endLine":181,"endColumn":51,"suggestions":[{"desc":"Update the dependencies array to be: [loadBudgetEntries, loadCategories, user.professionalPath]","fix":{"range":[6640,6683],"text":"[loadBudgetEntries, loadCategories, user.professionalPath]"}}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  flex: 1,\n  backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  justifyContent: 'center',\n  alignItems: 'center'\n}","line":541,"column":28,"nodeType":"ObjectExpression","endLine":546,"endColumn":22},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  borderRadius: 16,\n  padding: 20,\n  width: '90%',\n  maxHeight: '70%',\n  elevation: 1000,\n  shadowColor: '#000',\n  shadowOpacity: 0.25,\n  shadowRadius: 3.84\n}","line":552,"column":32,"nodeType":"ObjectExpression","endLine":563,"endColumn":26},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { maxHeight: 300 }","line":567,"column":44,"nodeType":"ObjectExpression","endLine":567,"endColumn":62},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  marginTop: 16,\n  paddingVertical: 12,\n  alignItems: 'center',\n  borderTopWidth: 1\n}","line":585,"column":36,"nodeType":"ObjectExpression","endLine":591,"endColumn":30},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontSize: 16, fontWeight: '600' }","line":595,"column":40,"nodeType":"ObjectExpression","endLine":595,"endColumn":98}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":7,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport {\n    View,\n    Text,\n    ScrollView,\n    TouchableOpacity,\n    RefreshControl,\n    SafeAreaView,\n    Platform,\n    StyleSheet,\n    Modal as RNModal,\n} from 'react-native';\nimport {\n    Card,\n    FAB,\n    Portal,\n    Modal,\n    TextInput,\n    RadioButton,\n    Button,\n    Provider,\n} from 'react-native-paper';\n\nimport EmptyState from '../../components/common/EmptyState';\nimport Icon from '../../components/common/Icon.js';\nimport LoadingSpinner from '../../components/common/LoadingSpinner';\nimport WebDateTimePicker from '../../components/common/WebDateTimePicker';\nimport { OptimizedInput } from '../../components/ui/OptimizedInput';\nimport { ERROR_MESSAGES, SUCCESS_MESSAGES } from '../../constants/messages';\nimport { colors } from '../../constants/theme';\nimport budgetService from '../../services/budgetService';\nimport socketService from '../../services/socketService';\nimport apiClient from '../../services/api/client';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { budgetStyles as styles } from '../../styles/screens/budget/BudgetScreenStyles';\nimport { showErrorAlert, showSuccessAlert, showConfirmAlert } from '../../utils/alerts';\nimport { formatCurrency, formatDate } from '../../utils/formatting';\nimport { devLog, devError } from '../../utils/devLog';\nimport { useSocketEvents } from '../../hooks/useSocketEvents';\n\nconst BudgetScreen = ({ navigation }) => {\n    const { user } = useAuth();\n    const [entries, setEntries] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [refreshing, setRefreshing] = useState(false);\n    const [modalVisible, setModalVisible] = useState(false);\n    const [showDatePicker, setShowDatePicker] = useState(false);\n    const [showCategoryPicker, setShowCategoryPicker] = useState(false);\n    const [categories, setCategories] = useState({ income: [], expense: [] });\n\n    const [formData, setFormData] = useState({\n        type: 'EXPENSE',\n        category: '',\n        amount: '',\n        description: '',\n        entryDate: (() => {\n            const today = new Date();\n            today.setHours(12, 0, 0, 0); // Set to noon to avoid timezone issues\n            return today;\n        })(),\n    });\n\n    const [formErrors, setFormErrors] = useState({});\n\n    useEffect(() => {\n        loadCategories(user?.professionalPath || 'FREELANCER');\n    }, [user?.professionalPath]);\n\n    // Move loadBudgetEntries up before it's used\n    const loadBudgetEntries = useCallback(async () => {\n        try {\n            setLoading(true);\n            const data = await budgetService.getBudgetEntries();\n            setEntries(data || []);\n        } catch (error) {\n            devError('Budget', 'Failed to load budget entries', error);\n            if (!refreshing) {\n                showErrorAlert('Error', ERROR_MESSAGES.BUDGET_LOAD_FAILED);\n            }\n        } finally {\n            setLoading(false);\n            setRefreshing(false);\n        }\n    }, [refreshing]);\n\n    // Socket event handlers\n    const socketEventHandlers = {\n        'budget_update': useCallback((data) => {\n            devLog('Budget', 'Received real-time update:', data);\n            \n            // Clear API cache for budget endpoints\n            apiClient.clearCache('/budget');\n            apiClient.clearCache('/budget/summary');\n            \n            if (data.type === 'create') {\n                // Reload to get fresh data\n                loadBudgetEntries();\n            } else if (data.type === 'update') {\n                // Update existing entry\n                setEntries(prevEntries => \n                    prevEntries.map(entry => \n                        entry._id === data.entry._id ? data.entry : entry\n                    )\n                );\n            } else if (data.type === 'delete') {\n                // Remove deleted entry\n                setEntries(prevEntries => \n                    prevEntries.filter(entry => entry._id !== data.entryId)\n                );\n            }\n        }, [loadBudgetEntries])\n    };\n    \n    // Use socket events hook\n    useSocketEvents(socketEventHandlers, [loadBudgetEntries]);\n    \n    useEffect(() => {\n        loadBudgetEntries();\n    }, [loadBudgetEntries]);\n\n    const loadCategories = useCallback(async (professionalPath = 'FREELANCER') => {\n        try {\n            const response = await budgetService.getCategories(professionalPath);\n            if (response && (response.income || response.expense)) {\n                setCategories({\n                    income: response.income || [],\n                    expense: response.expense || [],\n                });\n            } else {\n                throw new Error('Invalid categories response');\n            }\n        } catch (error) {\n            devError('Budget', 'Failed to load categories', error);\n            const defaultCategories =\n                professionalPath === 'ENTREPRENEUR'\n                    ? {\n                        income: [\n                            'Product Sales',\n                            'Service Revenue',\n                            'Investor Funding',\n                            'Grants',\n                            'Other Income',\n                        ],\n                        expense: [\n                            'Salaries & Payroll',\n                            'Office Rent',\n                            'Legal & Accounting',\n                            'Marketing & Sales',\n                            'R&D',\n                            'Operations',\n                            'Other Expenses',\n                        ],\n                    }\n                    : {\n                        income: [\n                            'Project-Based Income',\n                            'Recurring Clients',\n                            'Passive Income',\n                            'Other Income',\n                        ],\n                        expense: [\n                            'Cuota de Autónomo',\n                            'Office/Coworking',\n                            'Software & Tools',\n                            'Professional Services',\n                            'Marketing',\n                            'Travel & Transport',\n                            'Other Expenses',\n                        ],\n                    };\n            setCategories(defaultCategories);\n        }\n    }, []);\n\n    const handleRefresh = useCallback(() => {\n        setRefreshing(true);\n        loadBudgetEntries();\n        if (user?.professionalPath) {\n            loadCategories(user.professionalPath);\n        }\n    }, [loadBudgetEntries, user?.professionalPath]);\n\n    const validateForm = () => {\n        const errors = {};\n        if (!formData.category) errors.category = 'Please select a category';\n        if (!formData.amount || parseFloat(formData.amount) <= 0)\n            errors.amount = 'Please enter a valid amount';\n        setFormErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n\n    const handleSubmit = async () => {\n        if (!validateForm()) return;\n        try {\n            const entryData = { ...formData, amount: parseFloat(formData.amount) };\n            const newEntry = await budgetService.createBudgetEntry(entryData);\n            \n            // Update local state immediately for better UX\n            if (newEntry) {\n                setEntries(prevEntries => [newEntry, ...prevEntries]);\n            }\n            \n            showSuccessAlert('Success', SUCCESS_MESSAGES.ENTRY_ADDED);\n            setModalVisible(false);\n            resetForm();\n            \n            // Reload in background to sync\n            loadBudgetEntries();\n        } catch (error) {\n            devError('Budget', 'Failed to add budget entry', error);\n            showErrorAlert('Error', ERROR_MESSAGES.BUDGET_ENTRY_FAILED);\n        }\n    };\n\n    const handleDelete = (entryId) => {\n        showConfirmAlert('Delete Entry', 'Are you sure?', async () => {\n            try {\n                await budgetService.deleteBudgetEntry(entryId);\n                \n                // Update local state immediately\n                setEntries(prevEntries => prevEntries.filter(entry => entry._id !== entryId));\n                \n                showSuccessAlert('Success', SUCCESS_MESSAGES.ENTRY_DELETED);\n                \n                // Reload in background to sync\n                loadBudgetEntries();\n            } catch (error) {\n                devError('Budget', 'Failed to delete entry', error);\n                showErrorAlert('Error', ERROR_MESSAGES.BUDGET_DELETE_FAILED);\n                // Reload to revert on error\n                loadBudgetEntries();\n            }\n        });\n    };\n\n    const resetForm = () => {\n        // Ensure the initial date is today or earlier\n        const today = new Date();\n        today.setHours(12, 0, 0, 0); // Set to noon to avoid timezone issues\n\n        setFormData({\n            type: 'EXPENSE',\n            category: '',\n            amount: '',\n            description: '',\n            entryDate: today,\n        });\n        setFormErrors({});\n    };\n\n    const handleDateChange = (event, selectedDate) => {\n        if (Platform.OS === 'android') {\n            setShowDatePicker(false);\n        }\n        if (selectedDate) {\n            // Ensure the selected date is not in the future\n            const today = new Date();\n            today.setHours(23, 59, 59, 999);\n            const selected = new Date(selectedDate);\n\n            if (selected <= today) {\n                setFormData({ ...formData, entryDate: selected });\n            } else {\n                // If future date selected, show error and keep current date\n                showErrorAlert('Invalid Date', 'You cannot select a future date');\n            }\n        }\n    };\n\n    const calculateSummary = () => {\n        const income = entries\n            .filter((e) => e.type === 'INCOME')\n            .reduce((sum, e) => sum + e.amount, 0);\n        const expenses = entries\n            .filter((e) => e.type === 'EXPENSE')\n            .reduce((sum, e) => sum + e.amount, 0);\n        return { income, expenses, balance: income - expenses };\n    };\n\n    const renderEntryCard = ({ item }) => (\n        <View style={styles.entryCardContainer}>\n            <View style={styles.entryCardContent}>\n                <Card style={styles.entryCard}>\n                    <Card.Content>\n                        <View style={styles.entryHeader}>\n                            <View style={styles.entryInfo}>\n                                <Text style={styles.entryCategory}>{item.category}</Text>\n                                {item.description && (\n                                    <Text style={styles.entryDescription}>{item.description}</Text>\n                                )}\n                                <Text style={styles.entryDate}>{formatDate(item.entryDate)}</Text>\n                            </View>\n                            <Text\n                                style={[\n                                    styles.entryAmount,\n                                    item.type === 'INCOME'\n                                        ? styles.incomeAmount\n                                        : styles.expenseAmount,\n                                ]}\n                            >\n                                {item.type === 'INCOME' ? '+' : '-'}\n                                {formatCurrency(item.amount)}\n                            </Text>\n                        </View>\n                    </Card.Content>\n                    <Card.Actions>\n                        <Button onPress={() => handleDelete(item._id)} textColor={colors.error}>\n                            Delete\n                        </Button>\n                    </Card.Actions>\n                </Card>\n            </View>\n        </View>\n    );\n\n    if (loading && !refreshing) {\n        return <LoadingSpinner fullScreen text=\"Loading your budget...\" />;\n    }\n\n    const { income, expenses, balance } = calculateSummary();\n\n    // Main content without Provider wrapper\n    const mainContent = (\n        <SafeAreaView style={styles.safeArea}>\n            <ScrollView\n                style={styles.container}\n                contentContainerStyle={styles.scrollContent}\n                refreshControl={\n                    <RefreshControl\n                        refreshing={refreshing}\n                        onRefresh={handleRefresh}\n                        tintColor={colors.primary}\n                    />\n                }\n                showsVerticalScrollIndicator={false}\n            >\n                <View style={styles.summaryContainer}>\n                    <View style={styles.summaryCardContainer}>\n                        <View style={styles.summaryCardContent}>\n                            <Card style={styles.summaryCard}>\n                                <View style={styles.summaryCardInner}>\n                                    <Text style={styles.summaryLabel}>Income</Text>\n                                    <Text style={[styles.summaryAmount, styles.incomeAmountColor]}>\n                                        {formatCurrency(income)}\n                                    </Text>\n                                </View>\n                            </Card>\n                        </View>\n                    </View>\n\n                    <View style={styles.summaryCardContainer}>\n                        <View style={styles.summaryCardContent}>\n                            <Card style={styles.summaryCard}>\n                                <View style={styles.summaryCardInner}>\n                                    <Text style={styles.summaryLabel}>Expenses</Text>\n                                    <Text style={[styles.summaryAmount, styles.expenseAmountColor]}>\n                                        {formatCurrency(expenses)}\n                                    </Text>\n                                </View>\n                            </Card>\n                        </View>\n                    </View>\n\n                    <View style={styles.summaryCardContainer}>\n                        <View style={styles.summaryCardContent}>\n                            <Card style={styles.summaryCard}>\n                                <View style={styles.summaryCardInner}>\n                                    <Text style={styles.summaryLabel}>Balance</Text>\n                                    <Text\n                                        style={[\n                                            styles.summaryAmount,\n                                            balance >= 0\n                                                ? styles.positiveBalance\n                                                : styles.negativeBalance,\n                                        ]}\n                                    >\n                                        {formatCurrency(balance)}\n                                    </Text>\n                                </View>\n                            </Card>\n                        </View>\n                    </View>\n                </View>\n\n                <View style={styles.entriesSection}>\n                    <Text style={styles.sectionTitle}>Recent Transactions</Text>\n                    {entries.length === 0 ? (\n                        <EmptyState\n                            icon=\"cash-remove\"\n                            title=\"No transactions yet\"\n                            message=\"Add your first entry to get started\"\n                            action={\n                                <Button\n                                    mode=\"contained\"\n                                    onPress={() => setModalVisible(true)}\n                                    icon=\"plus\"\n                                >\n                                    Add Entry\n                                </Button>\n                            }\n                        />\n                    ) : (\n                        entries.map((entry) => (\n                            <View key={entry._id}>{renderEntryCard({ item: entry })}</View>\n                        ))\n                    )}\n                </View>\n            </ScrollView>\n\n            <FAB icon=\"plus\" style={styles.fab} onPress={() => setModalVisible(true)} />\n        </SafeAreaView>\n    );\n\n    // Return with Provider wrapper and all Portals\n    return (\n        <Provider>\n            {mainContent}\n\n            <Portal>\n                <Modal\n                    visible={modalVisible}\n                    onDismiss={() => {\n                        setModalVisible(false);\n                        resetForm();\n                    }}\n                    contentContainerStyle={styles.modalContainer}\n                >\n                    <View style={styles.modalContent}>\n                        <ScrollView showsVerticalScrollIndicator={false}>\n                            <Text style={styles.modalTitle}>Add New Entry</Text>\n\n                            <RadioButton.Group\n                                onValueChange={(value) =>\n                                    setFormData({ ...formData, type: value, category: '' })\n                                }\n                                value={formData.type}\n                            >\n                                <View style={styles.radioGroup}>\n                                    <RadioButton.Item\n                                        label=\"Income\"\n                                        value=\"INCOME\"\n                                        color={colors.success}\n                                    />\n                                    <RadioButton.Item\n                                        label=\"Expense\"\n                                        value=\"EXPENSE\"\n                                        color={colors.error}\n                                    />\n                                </View>\n                            </RadioButton.Group>\n\n                            <TouchableOpacity\n                                style={[\n                                    styles.categorySelector,\n                                    formErrors.category && styles.categorySelectorError,\n                                ]}\n                                onPress={() => setShowCategoryPicker(true)}\n                            >\n                                <Text\n                                    style={[\n                                        styles.categorySelectorText,\n                                        !formData.category && styles.placeholderText,\n                                    ]}\n                                >\n                                    {formData.category || 'Select Category'}\n                                </Text>\n                                <Icon name=\"chevron-down\" size={24} color={colors.textSecondary} />\n                            </TouchableOpacity>\n                            {formErrors.category && (\n                                <Text style={styles.errorText}>{formErrors.category}</Text>\n                            )}\n\n                            <TextInput\n                                label=\"Amount (€)\"\n                                value={formData.amount}\n                                onChangeText={(text) => setFormData({ ...formData, amount: text })}\n                                mode=\"outlined\"\n                                keyboardType=\"decimal-pad\"\n                                style={styles.input}\n                                error={!!formErrors.amount}\n                                theme={{ colors: { primary: colors.primary } }}\n                            />\n                            {formErrors.amount && (\n                                <Text style={styles.errorText}>{formErrors.amount}</Text>\n                            )}\n\n                            <OptimizedInput\n                                label=\"Description (Optional)\"\n                                value={formData.description}\n                                onChangeText={(text) =>\n                                    setFormData((prev) => ({ ...prev, description: text }))\n                                }\n                                multiline\n                                numberOfLines={3}\n                                maxLength={200}\n                                placeholder=\"Enter description...\"\n                            />\n\n                            <TouchableOpacity\n                                style={styles.dateSelector}\n                                onPress={() => setShowDatePicker(true)}\n                            >\n                                <Icon name=\"calendar\" size={24} color={colors.primary} />\n                                <Text style={styles.dateSelectorText}>\n                                    {formatDate(formData.entryDate)}\n                                </Text>\n                            </TouchableOpacity>\n\n                            <View style={styles.modalButtons}>\n                                <Button\n                                    mode=\"outlined\"\n                                    onPress={() => {\n                                        setModalVisible(false);\n                                        resetForm();\n                                    }}\n                                    style={styles.modalButton}\n                                >\n                                    Cancel\n                                </Button>\n                                <Button\n                                    mode=\"contained\"\n                                    onPress={handleSubmit}\n                                    style={styles.modalButton}\n                                >\n                                    Add Entry\n                                </Button>\n                            </View>\n                        </ScrollView>\n                    </View>\n                </Modal>\n            </Portal>\n\n            {/* Use React Native's Modal for Category Picker - This will appear on top */}\n            <RNModal\n                visible={showCategoryPicker}\n                transparent={true}\n                animationType=\"fade\"\n                onRequestClose={() => setShowCategoryPicker(false)}\n            >\n                <TouchableOpacity\n                    style={{\n                        flex: 1,\n                        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                    }}\n                    activeOpacity={1}\n                    onPress={() => setShowCategoryPicker(false)}\n                >\n                    <TouchableOpacity\n                        activeOpacity={1}\n                        style={{\n                            backgroundColor: colors.surface,\n                            borderRadius: 16,\n                            padding: 20,\n                            width: '90%',\n                            maxHeight: '70%',\n                            elevation: 1000,\n                            shadowColor: '#000',\n                            shadowOffset: { width: 0, height: 2 },\n                            shadowOpacity: 0.25,\n                            shadowRadius: 3.84,\n                        }}\n                        onPress={(e) => e.stopPropagation()}\n                    >\n                        <Text style={styles.modalTitle}>Select Category</Text>\n                        <ScrollView style={{ maxHeight: 300 }} showsVerticalScrollIndicator={false}>\n                            {(categories[formData.type.toLowerCase()] || []).map((category) => (\n                                <TouchableOpacity\n                                    key={category}\n                                    style={styles.categoryOption}\n                                    onPress={() => {\n                                        setFormData({ ...formData, category });\n                                        setShowCategoryPicker(false);\n                                    }}\n                                >\n                                    <Text style={styles.categoryOptionText}>{category}</Text>\n                                    {formData.category === category && (\n                                        <Icon name=\"check\" size={24} color={colors.primary} />\n                                    )}\n                                </TouchableOpacity>\n                            ))}\n                        </ScrollView>\n                        <TouchableOpacity\n                            style={{\n                                marginTop: 16,\n                                paddingVertical: 12,\n                                alignItems: 'center',\n                                borderTopWidth: 1,\n                                borderTopColor: colors.border,\n                            }}\n                            onPress={() => setShowCategoryPicker(false)}\n                        >\n                            <Text\n                                style={{ color: colors.primary, fontSize: 16, fontWeight: '600' }}\n                            >\n                                Close\n                            </Text>\n                        </TouchableOpacity>\n                    </TouchableOpacity>\n                </TouchableOpacity>\n            </RNModal>\n\n            {/* Date Picker Modal */}\n            {showDatePicker && Platform.OS === 'ios' && (\n                <RNModal\n                    visible={showDatePicker}\n                    transparent={true}\n                    animationType=\"slide\"\n                    onRequestClose={() => setShowDatePicker(false)}\n                >\n                    <TouchableOpacity\n                        style={styles.datePickerOverlay}\n                        activeOpacity={1}\n                        onPress={() => setShowDatePicker(false)}\n                    >\n                        <TouchableOpacity\n                            activeOpacity={1}\n                            style={styles.datePickerContent}\n                            onPress={(e) => e.stopPropagation()}\n                        >\n                            <View style={styles.datePickerHeader}>\n                                <TouchableOpacity onPress={() => setShowDatePicker(false)}>\n                                    <Text style={styles.datePickerCancel}>Cancel</Text>\n                                </TouchableOpacity>\n                                <Text style={styles.datePickerTitle}>Select Date</Text>\n                                <TouchableOpacity onPress={() => setShowDatePicker(false)}>\n                                    <Text style={styles.datePickerDone}>Done</Text>\n                                </TouchableOpacity>\n                            </View>\n                            <WebDateTimePicker\n                                value={formData.entryDate}\n                                mode=\"date\"\n                                display=\"spinner\"\n                                onChange={(event, selectedDate) => {\n                                    if (selectedDate) {\n                                        // Ensure the selected date is not in the future\n                                        const today = new Date();\n                                        today.setHours(23, 59, 59, 999);\n                                        const selected = new Date(selectedDate);\n\n                                        if (selected <= today) {\n                                            setFormData({ ...formData, entryDate: selected });\n                                        } else {\n                                            // If future date selected, set to today\n                                            showErrorAlert(\n                                                'Invalid Date',\n                                                'You cannot select a future date',\n                                            );\n                                            setFormData({ ...formData, entryDate: new Date() });\n                                        }\n                                    }\n                                }}\n                                maximumDate={new Date()}\n                                minimumDate={new Date(2020, 0, 1)} // Set a reasonable minimum date\n                                style={styles.datePicker}\n                                themeVariant=\"light\"\n                            />\n                        </TouchableOpacity>\n                    </TouchableOpacity>\n                </RNModal>\n            )}\n\n            {/* Android Date Picker */}\n            {showDatePicker && Platform.OS === 'android' && (\n                <WebDateTimePicker\n                    value={formData.entryDate}\n                    mode=\"date\"\n                    display=\"default\"\n                    onChange={handleDateChange}\n                    maximumDate={new Date()}\n                />\n            )}\n        </Provider>\n    );\n};\n\nexport default React.memo(BudgetScreen);\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/chat/ChatRoomScreen.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":15,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'WebDateTimePicker' is defined but never used.","line":18,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":25},{"ruleId":"import/order","severity":2,"message":"`../../utils` import should occur before import of `../../utils/alerts`","line":25,"column":1,"nodeType":"ImportDeclaration","endLine":25,"endColumn":48,"fix":{"range":[792,893],"text":"import { devLog, devError } from '../../utils';\nimport { showErrorAlert } from '../../utils/alerts';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../constants/theme` import should occur before import of `../../services/chatService`","line":26,"column":1,"nodeType":"ImportDeclaration","endLine":26,"endColumn":48,"fix":{"range":[483,941],"text":"import { colors } from '../../constants/theme';\nimport chatService from '../../services/chatService';\nimport socketService from '../../services/socketService';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { useTheme } from '../../store/contexts/ThemeContext';\nimport { chatRoomStyles } from '../../styles/screens/chat/ChatRoomStyles';\nimport { showErrorAlert } from '../../utils/alerts';\nimport { devLog, devError } from '../../utils';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../utils/realtimeMessageFix` import should occur before import of `../../utils/socketDebugger`","line":30,"column":1,"nodeType":"ImportDeclaration","endLine":30,"endColumn":79,"fix":{"range":[1033,1246],"text":"import { setupRealtimeMessageListener } from '../../utils/realtimeMessageFix';\nimport { socketDebugger } from '../../utils/socketDebugger';\nimport { testSocketConnection } from '../../utils/testSocketConnection';\n"}},{"ruleId":"no-unused-vars","severity":2,"message":"'onlineUsers' is assigned a value but never used.","line":43,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'setOnlineUsers' is assigned a value but never used.","line":43,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":39},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":50,"column":24,"nodeType":"Property","messageId":"missing","endLine":51,"endColumn":1,"fix":{"range":[2030,2040],"text":"null,\n    }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":61,"column":49,"nodeType":"Property","messageId":"missing","endLine":62,"endColumn":1,"fix":{"range":[2320,2331],"text":"),\n        }"}},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flexDirection: 'row', alignItems: 'center' }","line":71,"column":30,"nodeType":"ObjectExpression","endLine":71,"endColumn":76},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  width: 8,\n  height: 8,\n  borderRadius: 4,\n  backgroundColor: \"debugInfo.socketConnected ? 'green' : 'red'\",\n  marginRight: 8\n}","line":72,"column":34,"nodeType":"ObjectExpression","endLine":78,"endColumn":22},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":77,"column":39,"nodeType":"Property","messageId":"missing","endLine":78,"endColumn":1,"fix":{"range":[2892,2915],"text":"8,\n                    }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":90,"column":94,"nodeType":"Property","messageId":"missing","endLine":91,"endColumn":1,"fix":{"range":[3554,3601],"text":"),\n                                            }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":93,"column":42,"nodeType":"Property","messageId":"missing","endLine":94,"endColumn":1,"fix":{"range":[3750,3789],"text":"},\n                                    }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":100,"column":42,"nodeType":"Property","messageId":"missing","endLine":101,"endColumn":1,"fix":{"range":[4183,4222],"text":"},\n                                    }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":104,"column":56,"nodeType":"Property","messageId":"missing","endLine":105,"endColumn":1,"fix":{"range":[4365,4411],"text":"'cancel',\n                                    }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":105,"column":38,"nodeType":"ObjectExpression","messageId":"missing","endLine":106,"endColumn":1,"fix":{"range":[4410,4445],"text":"},\n                                ]"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":106,"column":34,"nodeType":"ArrayExpression","messageId":"missing","endLine":107,"endColumn":1,"fix":{"range":[4444,4475],"text":"],\n                            )"}},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginRight: 15 }","line":109,"column":32,"nodeType":"ObjectExpression","endLine":109,"endColumn":51},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'navigation', 'roomId', 'roomTitle', 'theme.colors.primary', and 'user._id'. Either include them or remove the dependency array.","line":116,"column":8,"nodeType":"ArrayExpression","endLine":116,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [debugInfo, navigation, roomId, roomTitle, theme.colors.primary, user._id]","fix":{"range":[4759,4770],"text":"[debugInfo, navigation, roomId, roomTitle, theme.colors.primary, user._id]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'initializeChat'. Either include it or remove the dependency array.","line":145,"column":8,"nodeType":"ArrayExpression","endLine":145,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [initializeChat, roomId]","fix":{"range":[5596,5604],"text":"[initializeChat, roomId]"}}]},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":166,"column":49,"nodeType":"Property","messageId":"missing","endLine":167,"endColumn":1,"fix":{"range":[6497,6530],"text":"handleRoomUsers,\n                }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":186,"column":80,"nodeType":"Property","messageId":"missing","endLine":187,"endColumn":1,"fix":{"range":[7440,7459],"text":"],\n                }"}},{"ruleId":"no-unused-vars","severity":2,"message":"'setupSocketListeners' is assigned a value but never used.","line":200,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":200,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'cleanupSocketListeners' is assigned a value but never used.","line":242,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":242,"endColumn":33},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":260,"column":48,"nodeType":"Property","messageId":"missing","endLine":261,"endColumn":1,"fix":{"range":[10095,10106],"text":"),\n        }"}},{"ruleId":"prefer-const","severity":2,"message":"'newMessage' is never reassigned. Use 'const' instead.","line":264,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":264,"endColumn":23,"fix":{"range":[10184,10222],"text":"const newMessage = data.message || data;"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":271,"column":46,"nodeType":"Property","messageId":"missing","endLine":272,"endColumn":1,"fix":{"range":[10495,10511],"text":"sender,\n        }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":287,"column":49,"nodeType":"Property","messageId":"missing","endLine":288,"endColumn":1,"fix":{"range":[11256,11277],"text":"_id,\n                }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":299,"column":81,"nodeType":"Property","messageId":"missing","endLine":300,"endColumn":1,"fix":{"range":[11785,11805],"text":"roomId,\n            }"}},{"ruleId":"no-unused-vars","severity":2,"message":"'handleMessageDeleted' is assigned a value but never used.","line":309,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":309,"endColumn":31}],"suppressedMessages":[],"errorCount":26,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":19,"fixableWarningCount":0,"source":"import { format } from 'date-fns';\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport {\n    View,\n    Text,\n    FlatList,\n    TextInput,\n    TouchableOpacity,\n    KeyboardAvoidingView,\n    Platform,\n    SafeAreaView,\n    ActivityIndicator,\n    Alert,\n} from 'react-native';\nimport { Avatar, Badge } from 'react-native-paper';\n\nimport Icon from '../../components/common/Icon.js';\nimport WebDateTimePicker from '../../components/common/WebDateTimePicker';\nimport chatService from '../../services/chatService';\nimport socketService from '../../services/socketService';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { useTheme } from '../../store/contexts/ThemeContext';\nimport { chatRoomStyles } from '../../styles/screens/chat/ChatRoomStyles';\nimport { showErrorAlert } from '../../utils/alerts';\nimport { devLog, devError } from '../../utils';\nimport { colors } from '../../constants/theme';\nimport { ensureChatSocketConnection, setupChatListeners } from '../../utils/chatSocketFix';\nimport { socketDebugger } from '../../utils/socketDebugger';\nimport { testSocketConnection } from '../../utils/testSocketConnection';\nimport { setupRealtimeMessageListener } from '../../utils/realtimeMessageFix';\n\nconst ChatRoomScreen = ({ route, navigation }) => {\n    const theme = useTheme();\n    const styles = chatRoomStyles(theme);\n    const { user } = useAuth();\n    const { roomId, roomTitle } = route.params;\n\n    const [messages, setMessages] = useState([]);\n    const [inputText, setInputText] = useState('');\n    const [loading, setLoading] = useState(true);\n    const [sending, setSending] = useState(false);\n    const [typingUsers, setTypingUsers] = useState([]);\n    const [onlineUsers, setOnlineUsers] = useState([]);\n    const [connectionError, setConnectionError] = useState(false);\n    const [debugInfo, setDebugInfo] = useState({\n        socketConnected: false,\n        socketAuthenticated: false,\n        roomJoined: false,\n        eventsRegistered: false,\n        lastEvent: null\n    });\n\n    const flatListRef = useRef(null);\n    const typingTimeoutRef = useRef(null);\n\n    // Debug function\n    const updateDebugInfo = (key, value) => {\n        setDebugInfo(prev => ({\n            ...prev,\n            [key]: value,\n            lastUpdate: new Date().toISOString()\n        }));\n        devLog('ChatDebug', `${key}: ${value}`);\n    };\n\n    useEffect(() => {\n        // Set navigation header\n        navigation.setOptions({\n            title: roomTitle,\n            headerRight: () => (\n                <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                    <View style={{ \n                        width: 8, \n                        height: 8, \n                        borderRadius: 4, \n                        backgroundColor: debugInfo.socketConnected ? 'green' : 'red',\n                        marginRight: 8\n                    }} />\n                    <TouchableOpacity\n                        onPress={() => {\n                            Alert.alert(\n                                'Debug Options',\n                                'Choose an action:',\n                                [\n                                    {\n                                        text: 'View Debug Info',\n                                        onPress: () => {\n                                            const debugData = {\n                                                ...debugInfo,\n                                                socketDebugger: socketDebugger.getDebugInfo()\n                                            };\n                                            Alert.alert('Debug Info', JSON.stringify(debugData, null, 2));\n                                        }\n                                    },\n                                    {\n                                        text: 'Test Socket Connection',\n                                        onPress: () => {\n                                            devLog('ChatRoom', 'Running socket connection test...');\n                                            testSocketConnection(user._id, roomId);\n                                        }\n                                    },\n                                    {\n                                        text: 'Cancel',\n                                        style: 'cancel'\n                                    }\n                                ]\n                            );\n                        }}\n                        style={{ marginRight: 15 }}\n                    >\n                        <Icon name=\"bug\" size={24} color={theme.colors.primary} />\n                    </TouchableOpacity>\n                </View>\n            ),\n        });\n    }, [debugInfo]);\n\n    useEffect(() => {\n        // Start socket debugger\n        const stopDebugger = socketDebugger.start(roomId);\n        \n        // Connect to socket and join room\n        initializeChat();\n\n        return () => {\n            // Stop debugger\n            stopDebugger();\n            \n            // Leave room and cleanup\n            if (socketService.isConnected()) {\n                socketService.leaveRoom(roomId);\n                updateDebugInfo('roomJoined', false);\n            }\n            \n            // Use stored cleanup function\n            if (window.chatCleanup) {\n                window.chatCleanup();\n                delete window.chatCleanup;\n            }\n            \n            if (typingTimeoutRef.current) {\n                clearTimeout(typingTimeoutRef.current);\n            }\n        };\n    }, [roomId]);\n\n    const initializeChat = async () => {\n        try {\n            setConnectionError(false);\n\n            // Use the chat socket fix to ensure proper connection\n            const connected = await ensureChatSocketConnection(user._id, roomId);\n            \n            updateDebugInfo('socketConnected', connected);\n            updateDebugInfo('socketAuthenticated', socketService.isAuthenticated);\n            updateDebugInfo('roomJoined', connected);\n            \n            if (!connected) {\n                setConnectionError(true);\n                updateDebugInfo('error', 'Failed to establish socket connection');\n            } else {\n                // Setup listeners using the fix\n                const cleanup = setupChatListeners(roomId, {\n                    onNewMessage: handleNewMessage,\n                    onUserTyping: handleUserTyping,\n                    onRoomUsers: handleRoomUsers\n                });\n                \n                // Also setup enhanced real-time message listener\n                const realtimeCleanup = setupRealtimeMessageListener(roomId, handleNewMessage);\n                \n                // Store cleanup functions\n                window.chatCleanup = () => {\n                    cleanup();\n                    realtimeCleanup();\n                };\n                updateDebugInfo('eventsRegistered', true);\n            }\n\n            // Load initial messages from API (works even without socket)\n            try {\n                const initialMessages = await chatService.getRoomMessages(roomId);\n                setMessages(initialMessages || []);\n                devLog('ChatRoom', `📥 Loaded ${initialMessages?.length || 0} initial messages`, {\n                    firstMessage: initialMessages?.[0],\n                    lastMessage: initialMessages?.[initialMessages?.length - 1]\n                });\n            } catch (error) {\n                devError('ChatRoom', 'Failed to load messages', error);\n            }\n\n            setLoading(false);\n        } catch (error) {\n            devError('ChatRoom', 'Failed to initialize chat', error);\n            setLoading(false);\n            setConnectionError(true);\n        }\n    };\n\n    const setupSocketListeners = () => {\n        devLog('ChatRoom', 'Setting up socket listeners...');\n        \n        // Use direct socket access for debugging\n        const socket = socketService.socket;\n        if (!socket) {\n            devError('ChatRoom', 'No socket instance available');\n            return;\n        }\n\n        // Add listeners with debugging\n        socket.on('new_message', (data) => {\n            devLog('ChatRoom', '🔥 new_message event received:', data);\n            updateDebugInfo('lastEvent', `new_message at ${new Date().toISOString()}`);\n            handleNewMessage(data);\n        });\n\n        socket.on('message_sent', (data) => {\n            devLog('ChatRoom', '🔥 message_sent event received:', data);\n            updateDebugInfo('lastEvent', `message_sent at ${new Date().toISOString()}`);\n            handleMessageSent(data);\n        });\n\n        socket.on('user_typing', (data) => {\n            devLog('ChatRoom', '🔥 user_typing event received:', data);\n            updateDebugInfo('lastEvent', `user_typing at ${new Date().toISOString()}`);\n            handleUserTyping(data);\n        });\n\n        socket.on('room_users', (data) => {\n            devLog('ChatRoom', '🔥 room_users event received:', data);\n            updateDebugInfo('lastEvent', `room_users at ${new Date().toISOString()}`);\n            handleRoomUsers(data);\n        });\n\n        // Also listen for any event for debugging\n        socket.onAny((eventName, ...args) => {\n            devLog('ChatRoom', `📡 Socket event: ${eventName}`, args);\n            updateDebugInfo('lastAnyEvent', `${eventName} at ${new Date().toISOString()}`);\n        });\n    };\n\n    const cleanupSocketListeners = () => {\n        const socket = socketService.socket;\n        if (!socket) return;\n\n        socket.off('new_message');\n        socket.off('message_sent');\n        socket.off('user_typing');\n        socket.off('room_users');\n        socket.offAny();\n    };\n\n    const handleNewMessage = useCallback((data) => {\n        devLog('ChatRoom', '🔴 HANDLE NEW MESSAGE CALLED', {\n            data,\n            currentRoomId: roomId,\n            dataRoomId: data?.roomId,\n            messageRoomId: data?.message?.roomId,\n            messageRoom: data?.message?.room,\n            timestamp: new Date().toISOString()\n        });\n        \n        // Handle the message based on the data structure\n        let newMessage = data.message || data;\n        \n        // Log the message structure\n        devLog('ChatRoom', 'Message structure:', {\n            hasMessage: !!data.message,\n            messageKeys: Object.keys(newMessage || {}),\n            messageId: newMessage?._id,\n            messageSender: newMessage?.sender\n        });\n        \n        // Only add message if it's for this room\n        if (data.roomId === roomId || newMessage.room === roomId || newMessage.roomId === roomId) {\n            devLog('ChatRoom', '✅ Message is for this room');\n            \n            setMessages((prev) => {\n                // Check if message already exists to prevent duplicates\n                const exists = prev.some(msg => msg._id === newMessage._id);\n                if (exists) {\n                    devLog('ChatRoom', '⚠️ Message already exists, skipping');\n                    return prev;\n                }\n                devLog('ChatRoom', '✅ Adding new message to list', {\n                    previousCount: prev.length,\n                    newMessageId: newMessage._id\n                });\n                updateDebugInfo('lastMessageAdded', `${newMessage._id} at ${new Date().toISOString()}`);\n                return [...prev, newMessage];\n            });\n            \n            setTimeout(() => {\n                flatListRef.current?.scrollToEnd({ animated: true });\n            }, 100);\n        } else {\n            devLog('ChatRoom', '❌ Message for different room, ignoring', {\n                currentRoom: roomId,\n                messageRoom: data.roomId || newMessage.room || newMessage.roomId\n            });\n        }\n    }, [roomId]);\n    \n    const handleMessageSent = useCallback((data) => {\n        devLog('ChatRoom', 'Message sent confirmation:', data);\n        updateDebugInfo('lastMessageSent', new Date().toISOString());\n    }, []);\n\n    const handleMessageDeleted = useCallback(({ messageId }) => {\n        setMessages((prev) =>\n            prev.map((msg) => (msg._id === messageId ? { ...msg, deleted: true } : msg)),\n        );\n    }, []);\n\n    const handleUserTyping = useCallback(({ userId, isTyping }) => {\n        setTypingUsers((prev) => {\n            if (isTyping) {\n                return prev.includes(userId) ? prev : [...prev, userId];\n            } else {\n                return prev.filter((id) => id !== userId);\n            }\n        });\n    }, []);\n\n    const handleRoomUsers = useCallback((users) => {\n        // Handle online users if needed\n        devLog('ChatRoom', 'Room users update:', users);\n    }, []);\n\n    const sendMessage = async () => {\n        if (!inputText.trim() || sending) return;\n\n        const messageText = inputText.trim();\n        setInputText('');\n        setSending(true);\n\n        try {\n            devLog('ChatRoom', 'Sending message via API...');\n            // Send message via API\n            const sentMessage = await chatService.sendMessage(roomId, messageText);\n            \n            // The message will be received via socket event 'new_message'\n            devLog('ChatRoom', 'Message sent successfully:', sentMessage);\n            updateDebugInfo('lastMessageSentId', sentMessage._id);\n        } catch (error) {\n            devError('ChatRoom', 'Failed to send message', error);\n            showErrorAlert('Error', 'Failed to send message');\n            setInputText(messageText);\n        } finally {\n            setSending(false);\n        }\n    };\n\n    const handleTyping = (text) => {\n        setInputText(text);\n\n        if (typingTimeoutRef.current) {\n            clearTimeout(typingTimeoutRef.current);\n        }\n\n        if (text.trim()) {\n            socketService.typing(roomId, true);\n            typingTimeoutRef.current = setTimeout(() => {\n                socketService.typing(roomId, false);\n            }, 3000);\n        } else {\n            socketService.typing(roomId, false);\n        }\n    };\n\n    const renderMessage = ({ item, index }) => {\n        const isOwnMessage = item.sender._id === user._id;\n        const showAvatar = index === 0 || messages[index - 1]?.sender._id !== item.sender._id;\n\n        // Group messages by time (5 minute intervals)\n        const showTimestamp =\n            index === 0 ||\n            new Date(item.createdAt) - new Date(messages[index - 1]?.createdAt) > 300000;\n\n        if (item.deleted) {\n            return (\n                <View style={[styles.messageContainer, isOwnMessage && styles.ownMessageContainer]}>\n                    <Text style={styles.deletedMessage}>Message deleted</Text>\n                </View>\n            );\n        }\n\n        return (\n            <>\n                {showTimestamp && (\n                    <View style={styles.timestampContainer}>\n                        <Text style={styles.timestamp}>\n                            {format(new Date(item.createdAt), 'MMM d, h:mm a')}\n                        </Text>\n                    </View>\n                )}\n                <View style={[styles.messageContainer, isOwnMessage && styles.ownMessageContainer]}>\n                    {!isOwnMessage && showAvatar && (\n                        <Avatar.Text\n                            size={32}\n                            label={item.sender.name?.[0]?.toUpperCase() || '?'}\n                            style={styles.avatar}\n                        />\n                    )}\n                    <View\n                        style={[\n                            styles.messageBubble,\n                            isOwnMessage ? styles.ownMessage : styles.otherMessage,\n                            !showAvatar && !isOwnMessage && styles.messageBubbleNoAvatar,\n                        ]}\n                    >\n                        {!isOwnMessage && showAvatar && (\n                            <Text style={styles.senderName}>{item.sender.name}</Text>\n                        )}\n                        <Text style={[styles.messageText, isOwnMessage && styles.ownMessageText]}>\n                            {item.content}\n                        </Text>\n                    </View>\n                </View>\n            </>\n        );\n    };\n\n    if (loading) {\n        return (\n            <View style={styles.loadingContainer}>\n                <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n                <Text style={styles.loadingText}>Loading chat...</Text>\n            </View>\n        );\n    }\n\n    return (\n        <SafeAreaView style={styles.container}>\n            <KeyboardAvoidingView\n                style={styles.container}\n                behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n                keyboardVerticalOffset={90}\n            >\n                {connectionError && (\n                    <View style={styles.connectionError}>\n                        <Icon name=\"wifi-off\" size={16} color={colors.error} />\n                        <Text style={styles.connectionErrorText}>Connection issues</Text>\n                        <TouchableOpacity onPress={initializeChat}>\n                            <Text style={styles.retryText}>Retry</Text>\n                        </TouchableOpacity>\n                    </View>\n                )}\n\n                <FlatList\n                    ref={flatListRef}\n                    data={messages}\n                    keyExtractor={(item) => item._id}\n                    renderItem={renderMessage}\n                    contentContainerStyle={styles.messagesList}\n                    showsVerticalScrollIndicator={false}\n                    onContentSizeChange={() => flatListRef.current?.scrollToEnd()}\n                />\n\n                {typingUsers.length > 0 && (\n                    <View style={styles.typingIndicator}>\n                        <Text style={styles.typingText}>Someone is typing...</Text>\n                    </View>\n                )}\n\n                <View style={styles.inputContainer}>\n                    <TextInput\n                        style={styles.input}\n                        value={inputText}\n                        onChangeText={handleTyping}\n                        placeholder=\"Type a message...\"\n                        placeholderTextColor={theme.colors.placeholder}\n                        multiline\n                        maxLength={1000}\n                        editable={!sending}\n                    />\n                    <TouchableOpacity\n                        style={[styles.sendButton, sending && styles.sendButtonDisabled]}\n                        onPress={sendMessage}\n                        disabled={!inputText.trim() || sending}\n                    >\n                        {sending ? (\n                            <ActivityIndicator size=\"small\" color={theme.colors.primary} />\n                        ) : (\n                            <Icon\n                                name=\"send\"\n                                size={24}\n                                color={\n                                    inputText.trim() ? theme.colors.primary : theme.colors.disabled\n                                }\n                            />\n                        )}\n                    </TouchableOpacity>\n                </View>\n            </KeyboardAvoidingView>\n        </SafeAreaView>\n    );\n};\n\nexport default React.memo(ChatRoomScreen);","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/chat/ChatRoomScreenSimplified.js","messages":[{"ruleId":"import/order","severity":2,"message":"`../../hooks/useChatSocketEvents` import should occur before import of `../../services/chatService`","line":19,"column":1,"nodeType":"ImportDeclaration","endLine":19,"endColumn":71,"fix":{"range":[390,573],"text":"import { useChatSocketEvents } from '../../hooks/useChatSocketEvents';\nimport chatService from '../../services/chatService';\nimport socketService from '../../services/socketService';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../utils` import should occur before import of `../../utils/alerts`","line":24,"column":1,"nodeType":"ImportDeclaration","endLine":24,"endColumn":48,"fix":{"range":[770,871],"text":"import { devLog, devError } from '../../utils';\nimport { showErrorAlert } from '../../utils/alerts';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../constants/theme` import should occur before import of `../../services/chatService`","line":25,"column":1,"nodeType":"ImportDeclaration","endLine":25,"endColumn":48,"fix":{"range":[390,919],"text":"import { colors } from '../../constants/theme';\nimport chatService from '../../services/chatService';\nimport socketService from '../../services/socketService';\nimport { useChatSocketEvents } from '../../hooks/useChatSocketEvents';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { useTheme } from '../../store/contexts/ThemeContext';\nimport { chatRoomStyles } from '../../styles/screens/chat/ChatRoomStyles';\nimport { showErrorAlert } from '../../utils/alerts';\nimport { devLog, devError } from '../../utils';\n"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":89,"column":37,"nodeType":"Property","messageId":"missing","endLine":90,"endColumn":1,"fix":{"range":[3155,3176],"text":"handleRoomUsers,\n    }"}},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginRight: 10 }","line":97,"column":30,"nodeType":"ObjectExpression","endLine":97,"endColumn":49},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  width: 8,\n  height: 8,\n  borderRadius: 4,\n  backgroundColor: \"isConnected ? 'green' : 'red'\"\n}","line":98,"column":34,"nodeType":"ObjectExpression","endLine":103,"endColumn":22},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":102,"column":71,"nodeType":"Property","messageId":"missing","endLine":102,"endColumn":72,"fix":{"range":[3591,3619],"text":"'red', \n                    }"}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":5,"fixableWarningCount":0,"source":"import { format } from 'date-fns';\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport {\n    View,\n    Text,\n    FlatList,\n    TextInput,\n    TouchableOpacity,\n    KeyboardAvoidingView,\n    Platform,\n    SafeAreaView,\n    ActivityIndicator,\n} from 'react-native';\nimport { Avatar } from 'react-native-paper';\n\nimport Icon from '../../components/common/Icon.js';\nimport chatService from '../../services/chatService';\nimport socketService from '../../services/socketService';\nimport { useChatSocketEvents } from '../../hooks/useChatSocketEvents';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { useTheme } from '../../store/contexts/ThemeContext';\nimport { chatRoomStyles } from '../../styles/screens/chat/ChatRoomStyles';\nimport { showErrorAlert } from '../../utils/alerts';\nimport { devLog, devError } from '../../utils';\nimport { colors } from '../../constants/theme';\n\nconst ChatRoomScreenSimplified = ({ route, navigation }) => {\n    const theme = useTheme();\n    const styles = chatRoomStyles(theme);\n    const { user } = useAuth();\n    const { roomId, roomTitle } = route.params;\n\n    const [messages, setMessages] = useState([]);\n    const [inputText, setInputText] = useState('');\n    const [loading, setLoading] = useState(true);\n    const [sending, setSending] = useState(false);\n    const [typingUsers, setTypingUsers] = useState([]);\n    const [connectionError, setConnectionError] = useState(false);\n    const [isConnected, setIsConnected] = useState(false);\n\n    const flatListRef = useRef(null);\n    const typingTimeoutRef = useRef(null);\n\n    // Handle new messages\n    const handleNewMessage = useCallback((data) => {\n        devLog('ChatRoom', 'Processing new message:', data);\n        \n        const newMessage = data.message || data;\n        \n        setMessages((prev) => {\n            // Check for duplicates\n            const exists = prev.some(msg => msg._id === newMessage._id);\n            if (exists) {\n                devLog('ChatRoom', 'Message already exists, skipping');\n                return prev;\n            }\n            devLog('ChatRoom', 'Adding new message to list');\n            return [...prev, newMessage];\n        });\n        \n        // Scroll to bottom\n        setTimeout(() => {\n            flatListRef.current?.scrollToEnd({ animated: true });\n        }, 100);\n    }, []);\n\n    // Handle typing indicators\n    const handleUserTyping = useCallback(({ userId, isTyping }) => {\n        if (userId === user._id) return; // Don't show own typing\n        \n        setTypingUsers((prev) => {\n            if (isTyping) {\n                return prev.includes(userId) ? prev : [...prev, userId];\n            } else {\n                return prev.filter((id) => id !== userId);\n            }\n        });\n    }, [user._id]);\n\n    // Handle room users update\n    const handleRoomUsers = useCallback((users) => {\n        devLog('ChatRoom', 'Room users update:', users);\n    }, []);\n\n    // Use the socket events hook\n    const { sendTyping } = useChatSocketEvents(roomId, {\n        onNewMessage: handleNewMessage,\n        onUserTyping: handleUserTyping,\n        onRoomUsers: handleRoomUsers\n    });\n\n    // Set navigation header\n    useEffect(() => {\n        navigation.setOptions({\n            title: roomTitle,\n            headerRight: () => (\n                <View style={{ marginRight: 10 }}>\n                    <View style={{ \n                        width: 8, \n                        height: 8, \n                        borderRadius: 4, \n                        backgroundColor: isConnected ? 'green' : 'red' \n                    }} />\n                </View>\n            ),\n        });\n    }, [navigation, roomTitle, isConnected]);\n\n    // Monitor connection status\n    useEffect(() => {\n        const checkConnection = () => {\n            setIsConnected(socketService.isConnected());\n        };\n\n        checkConnection();\n        const interval = setInterval(checkConnection, 2000);\n\n        return () => clearInterval(interval);\n    }, []);\n\n    // Load initial messages\n    useEffect(() => {\n        const loadMessages = async () => {\n            setLoading(true);\n            setConnectionError(false);\n            \n            try {\n                const initialMessages = await chatService.getRoomMessages(roomId);\n                setMessages(initialMessages || []);\n                devLog('ChatRoom', `Loaded ${initialMessages?.length || 0} initial messages`);\n            } catch (error) {\n                devError('ChatRoom', 'Failed to load messages', error);\n                setConnectionError(true);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        loadMessages();\n    }, [roomId]);\n\n    // Send message\n    const sendMessage = async () => {\n        if (!inputText.trim() || sending) return;\n\n        const messageText = inputText.trim();\n        setInputText('');\n        setSending(true);\n\n        try {\n            devLog('ChatRoom', 'Sending message via API...');\n            const sentMessage = await chatService.sendMessage(roomId, messageText);\n            \n            // Message will be received via socket event\n            devLog('ChatRoom', 'Message sent successfully:', sentMessage);\n        } catch (error) {\n            devError('ChatRoom', 'Failed to send message', error);\n            showErrorAlert('Error', 'Failed to send message');\n            setInputText(messageText); // Restore text\n        } finally {\n            setSending(false);\n        }\n    };\n\n    // Handle typing\n    const handleTyping = (text) => {\n        setInputText(text);\n\n        if (typingTimeoutRef.current) {\n            clearTimeout(typingTimeoutRef.current);\n        }\n\n        if (text.trim()) {\n            sendTyping(true);\n            typingTimeoutRef.current = setTimeout(() => {\n                sendTyping(false);\n            }, 3000);\n        } else {\n            sendTyping(false);\n        }\n    };\n\n    // Render message\n    const renderMessage = ({ item, index }) => {\n        const isOwnMessage = item.sender._id === user._id;\n        const showAvatar = index === 0 || messages[index - 1]?.sender._id !== item.sender._id;\n        const showTimestamp =\n            index === 0 ||\n            new Date(item.createdAt) - new Date(messages[index - 1]?.createdAt) > 300000;\n\n        if (item.deleted) {\n            return (\n                <View style={[styles.messageContainer, isOwnMessage && styles.ownMessageContainer]}>\n                    <Text style={styles.deletedMessage}>Message deleted</Text>\n                </View>\n            );\n        }\n\n        return (\n            <>\n                {showTimestamp && (\n                    <View style={styles.timestampContainer}>\n                        <Text style={styles.timestamp}>\n                            {format(new Date(item.createdAt), 'MMM d, h:mm a')}\n                        </Text>\n                    </View>\n                )}\n                <View style={[styles.messageContainer, isOwnMessage && styles.ownMessageContainer]}>\n                    {!isOwnMessage && showAvatar && (\n                        <Avatar.Text\n                            size={32}\n                            label={item.sender.name?.[0]?.toUpperCase() || '?'}\n                            style={styles.avatar}\n                        />\n                    )}\n                    <View\n                        style={[\n                            styles.messageBubble,\n                            isOwnMessage ? styles.ownMessage : styles.otherMessage,\n                            !showAvatar && !isOwnMessage && styles.messageBubbleNoAvatar,\n                        ]}\n                    >\n                        {!isOwnMessage && showAvatar && (\n                            <Text style={styles.senderName}>{item.sender.name}</Text>\n                        )}\n                        <Text style={[styles.messageText, isOwnMessage && styles.ownMessageText]}>\n                            {item.content}\n                        </Text>\n                    </View>\n                </View>\n            </>\n        );\n    };\n\n    if (loading) {\n        return (\n            <View style={styles.loadingContainer}>\n                <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n                <Text style={styles.loadingText}>Loading chat...</Text>\n            </View>\n        );\n    }\n\n    return (\n        <SafeAreaView style={styles.container}>\n            <KeyboardAvoidingView\n                style={styles.container}\n                behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n                keyboardVerticalOffset={90}\n            >\n                {connectionError && (\n                    <View style={styles.connectionError}>\n                        <Icon name=\"wifi-off\" size={16} color={colors.error} />\n                        <Text style={styles.connectionErrorText}>Connection issues</Text>\n                    </View>\n                )}\n\n                <FlatList\n                    ref={flatListRef}\n                    data={messages}\n                    keyExtractor={(item) => item._id}\n                    renderItem={renderMessage}\n                    contentContainerStyle={styles.messagesList}\n                    showsVerticalScrollIndicator={false}\n                    onContentSizeChange={() => flatListRef.current?.scrollToEnd()}\n                />\n\n                {typingUsers.length > 0 && (\n                    <View style={styles.typingIndicator}>\n                        <Text style={styles.typingText}>Someone is typing...</Text>\n                    </View>\n                )}\n\n                <View style={styles.inputContainer}>\n                    <TextInput\n                        style={styles.input}\n                        value={inputText}\n                        onChangeText={handleTyping}\n                        placeholder=\"Type a message...\"\n                        placeholderTextColor={theme.colors.placeholder}\n                        multiline\n                        maxLength={1000}\n                        editable={!sending}\n                    />\n                    <TouchableOpacity\n                        style={[styles.sendButton, sending && styles.sendButtonDisabled]}\n                        onPress={sendMessage}\n                        disabled={!inputText.trim() || sending}\n                    >\n                        {sending ? (\n                            <ActivityIndicator size=\"small\" color={theme.colors.primary} />\n                        ) : (\n                            <Icon\n                                name=\"send\"\n                                size={24}\n                                color={\n                                    inputText.trim() ? theme.colors.primary : theme.colors.disabled\n                                }\n                            />\n                        )}\n                    </TouchableOpacity>\n                </View>\n            </KeyboardAvoidingView>\n        </SafeAreaView>\n    );\n};\n\nexport default React.memo(ChatRoomScreenSimplified);","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/checklist/ChecklistScreen.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'socketService' is defined but never used.","line":20,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":21},{"ruleId":"import/order","severity":2,"message":"`../../services/api/client` import should occur before import of `../../services/checklistService`","line":21,"column":1,"nodeType":"ImportDeclaration","endLine":21,"endColumn":51,"fix":{"range":[649,822],"text":"import apiClient from '../../services/api/client';\nimport checklistService from '../../services/checklistService';\nimport socketService from '../../services/socketService';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../hooks/useSocketEvents` import should occur before import of `../../services/checklistService`","line":26,"column":1,"nodeType":"ImportDeclaration","endLine":26,"endColumn":63,"fix":{"range":[649,1169],"text":"import { useSocketEvents } from '../../hooks/useSocketEvents';\nimport checklistService from '../../services/checklistService';\nimport socketService from '../../services/socketService';\nimport apiClient from '../../services/api/client';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { checklistStyles as styles } from '../../styles/screens/checklist/ChecklistScreenStyles';\nimport { showErrorAlert, showSuccessAlert } from '../../utils/alerts';\nimport { devLog, devError } from '../../utils/devLog';\n"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":213,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"missing","endLine":214,"endColumn":1,"fix":{"range":[8562,8588],"text":"item,\n                    )"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":214,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"missing","endLine":215,"endColumn":1,"fix":{"range":[8587,8606],"text":"),\n                )"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":220,"column":28,"nodeType":"Property","messageId":"missing","endLine":221,"endColumn":1,"fix":{"range":[8774,8781],"text":"),\n    }"}},{"ruleId":"max-len","severity":1,"message":"This line has a length of 104. Maximum allowed is 100.","line":241,"column":1,"nodeType":"Program","messageId":"max","endLine":241,"endColumn":105},{"ruleId":"no-unused-vars","severity":2,"message":"'updatedItem' is assigned a value but never used.","line":241,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":241,"endColumn":34},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":248,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"missing","endLine":249,"endColumn":1,"fix":{"range":[9720,9746],"text":"item,\n                    )"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":249,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"missing","endLine":250,"endColumn":1,"fix":{"range":[9745,9764],"text":"),\n                )"}},{"ruleId":"no-unused-vars","severity":2,"message":"'infoLink' is defined but never used. Allowed unused args must match /^_/u.","line":270,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":270,"endColumn":50}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":7,"fixableWarningCount":0,"source":"// frontend/src/screens/checklist/ChecklistScreen.js\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n    View,\n    Text,\n    ScrollView,\n    TouchableOpacity,\n    Alert,\n    RefreshControl,\n    SafeAreaView,\n} from 'react-native';\nimport { Card, Checkbox, ProgressBar } from 'react-native-paper';\n\nimport Icon from '../../components/common/Icon.js';\nimport LoadingSpinner from '../../components/common/LoadingSpinner';\nimport { ERROR_MESSAGES, SUCCESS_MESSAGES } from '../../constants/messages';\nimport { colors } from '../../constants/theme';\nimport checklistService from '../../services/checklistService';\nimport socketService from '../../services/socketService';\nimport apiClient from '../../services/api/client';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { checklistStyles as styles } from '../../styles/screens/checklist/ChecklistScreenStyles';\nimport { showErrorAlert, showSuccessAlert } from '../../utils/alerts';\nimport { devLog, devError } from '../../utils/devLog';\nimport { useSocketEvents } from '../../hooks/useSocketEvents';\n\nconst CHECKLIST_ITEMS = {\n    FREELANCER: [\n        {\n            key: 'OBTAIN_NIE',\n            title: 'Obtain your NIE',\n            description: 'Get your foreigner identification number',\n            icon: 'card-account-details',\n            infoLink: 'nie-guide',\n        },\n        {\n            key: 'REGISTER_AUTONOMO',\n            title: 'Register as Autónomo',\n            description: 'Complete your self-employment registration',\n            icon: 'briefcase-account',\n            infoLink: 'autonomo-guide',\n        },\n        {\n            key: 'UNDERSTAND_TAXES',\n            title: 'Understand Tax Obligations',\n            description: 'Learn about IVA and IRPF requirements',\n            icon: 'calculator',\n            infoLink: 'taxes-guide',\n        },\n        {\n            key: 'OPEN_BANK_ACCOUNT',\n            title: 'Open Spanish Bank Account',\n            description: 'Set up your business banking',\n            icon: 'bank',\n            infoLink: 'banking-guide',\n        },\n    ],\n    ENTREPRENEUR: [\n        {\n            key: 'OBTAIN_NIE',\n            title: 'Obtain your NIE',\n            description: 'Get your foreigner identification number',\n            icon: 'card-account-details',\n            infoLink: 'nie-guide',\n        },\n        {\n            key: 'FORM_SL_COMPANY',\n            title: 'Form an S.L. Company',\n            description: 'Establish your limited liability company',\n            icon: 'domain',\n            infoLink: 'company-formation-guide',\n        },\n        {\n            key: 'GET_COMPANY_NIF',\n            title: 'Get Company NIF',\n            description: 'Obtain your company tax ID',\n            icon: 'identifier',\n            infoLink: 'company-nif-guide',\n        },\n        {\n            key: 'RESEARCH_FUNDING',\n            title: 'Research Funding Options',\n            description: 'Explore grants and investment opportunities',\n            icon: 'cash-multiple',\n            infoLink: 'funding-guide',\n        },\n    ],\n};\n\nconst ChecklistItem = React.memo(({ item, checklistItem, isUpdating, onToggle, onInfoPress }) => {\n    const isCompleted = checklistItem?.isCompleted || false;\n\n    return (\n        <Card style={[styles.checklistCard, isCompleted && styles.completedCard]}>\n            <TouchableOpacity\n                onPress={() => onToggle(item.key, isCompleted)}\n                disabled={isUpdating}\n                style={styles.cardTouchable}\n                activeOpacity={0.7}\n            >\n                <View style={styles.cardContent}>\n                    <View style={styles.checkboxContainer}>\n                        {isUpdating ? (\n                            <View style={styles.loadingCheckbox}>\n                                <LoadingSpinner size=\"small\" />\n                            </View>\n                        ) : (\n                            <Checkbox\n                                status={isCompleted ? 'checked' : 'unchecked'}\n                                color={colors.primary}\n                                disabled={isUpdating}\n                            />\n                        )}\n                    </View>\n\n                    <View style={styles.cardTextContainer}>\n                        <View style={styles.titleRow}>\n                            <Icon\n                                name={item.icon}\n                                size={20}\n                                color={isCompleted ? colors.textSecondary : colors.primary}\n                                style={styles.itemIcon}\n                            />\n                            <Text style={[styles.cardTitle, isCompleted && styles.completedText]}>\n                                {item.title}\n                            </Text>\n                        </View>\n                        <Text\n                            style={[\n                                styles.cardDescription,\n                                isCompleted && styles.completedDescription,\n                            ]}\n                        >\n                            {item.description}\n                        </Text>\n                    </View>\n\n                    <TouchableOpacity\n                        onPress={() => onInfoPress(item.infoLink)}\n                        style={styles.infoButton}\n                        hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}\n                    >\n                        <Icon name=\"information-outline\" size={24} color={colors.primary} />\n                    </TouchableOpacity>\n                </View>\n            </TouchableOpacity>\n        </Card>\n    );\n});\n\nChecklistItem.displayName = 'ChecklistItem';\n\nconst ChecklistScreen = ({ navigation }) => {\n    const { user } = useAuth();\n    const [checklistData, setChecklistData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [refreshing, setRefreshing] = useState(false);\n    const [updating, setUpdating] = useState({});\n    const [isInitializing, setIsInitializing] = useState(false);\n\n    const loadChecklist = useCallback(async () => {\n        try {\n            const data = await checklistService.getChecklist();\n\n            // If no checklist data and user has pendingChecklistItems, try to initialize\n            if ((!data || data.length === 0) && user && !isInitializing) {\n                const pendingItems = await AsyncStorage.getItem('pendingChecklistItems');\n                if (pendingItems) {\n                    const items = JSON.parse(pendingItems);\n                    if (items.length > 0) {\n                        try {\n                            setIsInitializing(true);\n                            devLog('Checklist', 'Initializing checklist with pending items', items);\n                            await checklistService.initializeChecklist(items);\n                            await AsyncStorage.removeItem('pendingChecklistItems');\n                            // Reload checklist after initialization\n                            const newData = await checklistService.getChecklist();\n                            setChecklistData(newData || []);\n                            setIsInitializing(false);\n                            return;\n                        } catch (error) {\n                            devError('Checklist', 'Failed to initialize checklist from pending items', error);\n                            setIsInitializing(false);\n                        }\n                    }\n                }\n            }\n\n            setChecklistData(data || []);\n        } catch (error) {\n            devError('Checklist', 'Failed to load checklist', error);\n            showErrorAlert('Error', ERROR_MESSAGES.CHECKLIST_LOAD_FAILED);\n        } finally {\n            setLoading(false);\n        }\n    }, [user, isInitializing]);\n\n    // Socket event handlers\n    const socketEventHandlers = {\n        'checklist_update': useCallback((data) => {\n            devLog('Checklist', 'Received real-time update:', data);\n            \n            // Clear API cache for checklist\n            apiClient.clearCache('/checklist');\n            \n            if (data.type === 'update') {\n                // Update specific item\n                setChecklistData(prevData => \n                    prevData.map(item => \n                        item.itemKey === data.item.itemKey \n                            ? data.item \n                            : item\n                    )\n                );\n            } else if (data.type === 'create') {\n                // Reload to get fresh data\n                loadChecklist();\n            }\n        }, [loadChecklist])\n    };\n    \n    // Use socket events hook\n    useSocketEvents(socketEventHandlers, [loadChecklist]);\n    \n    useEffect(() => {\n        loadChecklist();\n    }, [loadChecklist]);\n\n    const handleRefresh = useCallback(async () => {\n        setRefreshing(true);\n        await loadChecklist();\n        setRefreshing(false);\n    }, [loadChecklist]);\n\n    const handleToggle = useCallback(\n        async (itemKey, currentStatus) => {\n            setUpdating((prev) => ({ ...prev, [itemKey]: true }));\n\n            try {\n                const updatedItem = await checklistService.updateChecklistItem(itemKey, !currentStatus);\n                \n                // Update the local state immediately for better UX\n                setChecklistData(prevData => \n                    prevData.map(item => \n                        item.itemKey === itemKey \n                            ? { ...item, isCompleted: !currentStatus }\n                            : item\n                    )\n                );\n\n                if (!currentStatus) {\n                    showSuccessAlert('Great job!', SUCCESS_MESSAGES.TASK_COMPLETED);\n                }\n                \n                // Reload checklist in background to sync with server\n                loadChecklist();\n            } catch (error) {\n                devError('Checklist', 'Failed to update checklist item', error);\n                showErrorAlert('Error', ERROR_MESSAGES.CHECKLIST_UPDATE_FAILED);\n                // Reload to revert on error\n                loadChecklist();\n            } finally {\n                setUpdating((prev) => ({ ...prev, [itemKey]: false }));\n            }\n        },\n        [loadChecklist],\n    );\n\n    const handleInfoPress = useCallback((infoLink) => {\n        Alert.alert('Guide Coming Soon', 'Detailed guides are being prepared. Check back soon!', [\n            { text: 'OK' },\n        ]);\n    }, []);\n\n    // Use useMemo for calculations that depend on state/props\n    const { items, completedCount, progress } = useMemo(() => {\n        // Get all available items for the professional path\n        const allItems =\n            user?.professionalPath === 'FREELANCER'\n                ? CHECKLIST_ITEMS.FREELANCER\n                : CHECKLIST_ITEMS.ENTREPRENEUR;\n\n        // Filter to show only the items that were selected during registration\n        // The checklistData from backend should contain only the selected items\n        const selectedItemKeys = checklistData.map((item) => item.itemKey);\n        const items = allItems.filter((item) => selectedItemKeys.includes(item.key));\n\n        const completedCount = checklistData.filter((item) => item.isCompleted).length;\n        const progress = items.length > 0 ? completedCount / items.length : 0;\n\n        return { items, completedCount, progress };\n    }, [user?.professionalPath, checklistData]);\n\n    const motivationalMessage = useMemo(() => {\n        if (progress === 0) return 'Let\\'s get started! 🚀';\n        if (progress < 0.5) return 'Great progress! Keep going! 💪';\n        if (progress < 1) return 'Almost there! You\\'re doing amazing! 🌟';\n        return 'All done! You\\'re ready to rock! 🎉';\n    }, [progress]);\n\n    if (loading || isInitializing) {\n        return <LoadingSpinner fullScreen text=\"Loading your checklist...\" />;\n    }\n\n    // If no items selected during registration\n    if (items.length === 0) {\n        return (\n            <SafeAreaView style={styles.safeArea}>\n                <View style={styles.container}>\n                    <View style={styles.emptyContainer}>\n                        <Icon\n                            name=\"clipboard-check-outline\"\n                            size={64}\n                            color={colors.textSecondary}\n                        />\n                        <Text style={styles.emptyTitle}>No checklist items</Text>\n                        <Text style={styles.emptyText}>\n                            You haven't selected any checklist items during registration.\n                        </Text>\n                        <TouchableOpacity\n                            style={styles.emptyStateButton}\n                            onPress={() => navigation.navigate('Profile')}\n                        >\n                            <Text style={styles.emptyStateButtonText}>Go to Profile</Text>\n                        </TouchableOpacity>\n                    </View>\n                </View>\n            </SafeAreaView>\n        );\n    }\n\n    return (\n        <SafeAreaView style={styles.safeArea}>\n            <ScrollView\n                style={styles.container}\n                contentContainerStyle={styles.scrollContent}\n                refreshControl={\n                    <RefreshControl\n                        refreshing={refreshing}\n                        onRefresh={handleRefresh}\n                        tintColor={colors.primary}\n                    />\n                }\n                showsVerticalScrollIndicator={false}\n            >\n                <View style={styles.progressSection}>\n                    <View style={styles.progressHeader}>\n                        <Text style={styles.progressTitle}>Your Progress</Text>\n                        <Text style={styles.progressPercentage}>{Math.round(progress * 100)}%</Text>\n                    </View>\n                    <Text style={styles.progressText}>\n                        {completedCount} of {items.length} steps completed\n                    </Text>\n                    <ProgressBar\n                        progress={progress}\n                        color={colors.primary}\n                        style={styles.progressBar}\n                    />\n                    <Text style={styles.motivationalText}>{motivationalMessage}</Text>\n                </View>\n\n                <View style={styles.checklistSection}>\n                    {items.map((item, index) => {\n                        const checklistItem = checklistData.find((d) => d.itemKey === item.key);\n                        const isUpdating = updating[item.key] || false;\n\n                        return (\n                            <View\n                                key={item.key}\n                                style={\n                                    index === 0\n                                        ? styles.firstCard\n                                        : index === items.length - 1\n                                            ? styles.lastCard\n                                            : null\n                                }\n                            >\n                                <ChecklistItem\n                                    item={item}\n                                    checklistItem={checklistItem}\n                                    isUpdating={isUpdating}\n                                    onToggle={handleToggle}\n                                    onInfoPress={handleInfoPress}\n                                />\n                            </View>\n                        );\n                    })}\n                </View>\n\n                <View style={styles.tipsSection}>\n                    <Card style={styles.tipCard}>\n                        <Card.Content>\n                            <View style={styles.tipHeader}>\n                                <Icon name=\"lightbulb-outline\" size={24} color={colors.warning} />\n                                <Text style={styles.tipTitle}>Pro Tip</Text>\n                            </View>\n                            <Text style={styles.tipText}>\n                                {user?.professionalPath === 'FREELANCER'\n                                    ? 'Start with obtaining your NIE - it\\'s required for all other steps! The process usually takes 2-4 weeks, so plan ahead.'\n                                    : 'Consider consulting with a gestor for company formation - they can handle most of the paperwork and save you time.'}\n                            </Text>\n                        </Card.Content>\n                    </Card>\n\n                    <Card style={styles.resourceCard}>\n                        <TouchableOpacity\n                            onPress={() => navigation.navigate('Resources')}\n                            style={styles.resourceTouchable}\n                        >\n                            <Card.Content style={styles.resourceContent}>\n                                <Icon name=\"book-open-variant\" size={24} color={colors.primary} />\n                                <View style={styles.resourceTextContainer}>\n                                    <Text style={styles.resourceTitle}>Need more help?</Text>\n                                    <Text style={styles.resourceDescription}>\n                                        Explore our guides and service directory\n                                    </Text>\n                                </View>\n                                <Icon name=\"chevron-right\" size={24} color={colors.textSecondary} />\n                            </Card.Content>\n                        </TouchableOpacity>\n                    </Card>\n                </View>\n            </ScrollView>\n        </SafeAreaView>\n    );\n};\n\nexport default React.memo(ChecklistScreen);\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/content/GuideDetailScreen.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'title' is assigned a value but never used.","line":16,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadGuide'. Either include it or remove the dependency array.","line":29,"column":8,"nodeType":"ArrayExpression","endLine":29,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [loadGuide, slug]","fix":{"range":[1171,1177],"text":"[loadGuide, slug]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { ScrollView, View, Text, ActivityIndicator, TouchableOpacity } from 'react-native';\nimport { WebView } from 'react-native-webview';\n\nimport EmptyState from '../../components/common/EmptyState';\nimport Icon from '../../components/common/Icon.js'; // Add this\nimport LoadingSpinner from '../../components/common/LoadingSpinner';\nimport { Button } from '../../components/ui/Button'; // Add this\nimport { SCREEN_NAMES } from '../../constants/routes';\nimport { colors } from '../../constants/theme'; // Add this\nimport { useApi } from '../../hooks/useApi';\nimport contentService from '../../services/contentService';\nimport { styles } from '../../styles/screens/content/GuideDetailScreenStyles';\nimport { showErrorAlert } from '../../utils/alerts';\nconst GuideDetailScreen = ({ route, navigation }) => {\n    const { slug, title } = route.params || {};\n    const [guide, setGuide] = useState(null);\n\n    const {\n        execute: fetchGuide,\n        loading,\n        error,\n    } = useApi(() => contentService.getGuideBySlug(slug));\n\n    useEffect(() => {\n        if (slug) {\n            loadGuide();\n        }\n    }, [slug]);\n\n    useEffect(() => {\n        // Update header title if we have the guide title\n        if (guide?.title && navigation.setOptions) {\n            navigation.setOptions({\n                title: guide.title,\n            });\n        }\n    }, [guide?.title, navigation]);\n\n    const loadGuide = async () => {\n        try {\n            const data = await fetchGuide();\n            setGuide(data);\n        } catch (err) {\n            showErrorAlert('Error', 'Failed to load guide. Please try again.');\n        }\n    };\n\n    if (loading) {\n        return <LoadingSpinner fullScreen text=\"Loading guide...\" />;\n    }\n\n    if (error || !guide) {\n        return (\n            <EmptyState\n                icon=\"file-document-alert-outline\"\n                title=\"Guide Not Found\"\n                message=\"The guide you're looking for could not be loaded.\"\n                action={\n                    <Button title=\"Go Back\" onPress={() => navigation.goBack()} variant=\"outline\" />\n                }\n            />\n        );\n    }\n\n    // If content is HTML, render in WebView\n    if (guide.contentType === 'html') {\n        return (\n            <View style={styles.container}>\n                <WebView\n                    source={{ html: guide.content }}\n                    style={styles.webView}\n                    startInLoadingState={true}\n                    renderLoading={() => (\n                        <View style={styles.webViewLoading}>\n                            <ActivityIndicator size=\"large\" color={colors.primary} />\n                        </View>\n                    )}\n                />\n            </View>\n        );\n    }\n\n    // Otherwise render as markdown/text\n    return (\n        <ScrollView\n            style={styles.container}\n            contentContainerStyle={styles.content}\n            showsVerticalScrollIndicator={false}\n        >\n            <Text style={styles.title}>{guide.title}</Text>\n\n            {guide.metadata?.author && (\n                <Text style={styles.metadata}>\n                    By {guide.metadata.author} • {guide.metadata.readTime || '5 min read'}\n                </Text>\n            )}\n\n            {guide.metadata?.tags && (\n                <View style={styles.tags}>\n                    {guide.metadata.tags.map((tag, index) => (\n                        <View key={index} style={styles.tag}>\n                            <Text style={styles.tagText}>{tag}</Text>\n                        </View>\n                    ))}\n                </View>\n            )}\n\n            <Text style={styles.body}>{guide.content}</Text>\n\n            {guide.relatedGuides && guide.relatedGuides.length > 0 && (\n                <View style={styles.relatedSection}>\n                    <Text style={styles.relatedTitle}>Related Guides</Text>\n                    {guide.relatedGuides.map((related) => (\n                        <TouchableOpacity\n                            key={related._id}\n                            style={styles.relatedCard}\n                            onPress={() =>\n                                navigation.push(SCREEN_NAMES.GUIDE_DETAIL, {\n                                    slug: related.slug,\n                                    title: related.title,\n                                })\n                            }\n                        >\n                            <Text style={styles.relatedCardTitle}>{related.title}</Text>\n                            <Icon name=\"chevron-right\" size={20} color={colors.textSecondary} />\n                        </TouchableOpacity>\n                    ))}\n                </View>\n            )}\n        </ScrollView>\n    );\n};\n\nexport default React.memo(GuideDetailScreen);\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/content/ResourcesScreen.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'contentService' is defined but never used.","line":10,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'navigation' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":38},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'mockAllGuides' and 'mockMyGuides'. Either include them or remove the dependency array.","line":93,"column":8,"nodeType":"ArrayExpression","endLine":93,"endColumn":55,"suggestions":[{"desc":"Update the dependencies array to be: [activeTab, mockAllGuides, mockMyGuides, refreshing]","fix":{"range":[3346,3393],"text":"[activeTab, mockAllGuides, mockMyGuides, refreshing]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { View, Text, TouchableOpacity, FlatList, SafeAreaView, RefreshControl } from 'react-native';\nimport { Card, Chip, Searchbar } from 'react-native-paper';\n\nimport EmptyState from '../../components/common/EmptyState';\nimport Icon from '../../components/common/Icon.js';\nimport LoadingSpinner from '../../components/common/LoadingSpinner';\nimport { ERROR_MESSAGES } from '../../constants/messages';\nimport { colors } from '../../constants/theme';\nimport contentService from '../../services/contentService';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { resourcesStyles as styles } from '../../styles/screens/content/ResourcesScreenStyles';\nimport { showErrorAlert } from '../../utils/alerts';\n\nconst ResourcesScreen = ({ navigation }) => {\n    const { user } = useAuth();\n    const [activeTab, setActiveTab] = useState('myGuides');\n    const [searchQuery, setSearchQuery] = useState('');\n    const [guides, setGuides] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [refreshing, setRefreshing] = useState(false);\n\n    // Mock data for demonstration\n    const mockMyGuides = [\n        {\n            _id: '1',\n            title: 'Complete NIE Application Guide',\n            description: 'Step-by-step process for obtaining your NIE',\n            category: 'Legal',\n            readTime: '10 min',\n            icon: 'card-account-details',\n            isNew: true,\n        },\n        {\n            _id: '2',\n            title: 'Understanding Spanish Tax System',\n            description: 'Essential tax information for freelancers and entrepreneurs',\n            category: 'Tax',\n            readTime: '15 min',\n            icon: 'calculator',\n            isNew: false,\n        },\n    ];\n\n    const mockAllGuides = [\n        ...mockMyGuides,\n        {\n            _id: '3',\n            title: 'Opening a Business Bank Account',\n            description: 'Best banks and requirements for business accounts',\n            category: 'Banking',\n            readTime: '8 min',\n            icon: 'bank',\n            isNew: false,\n        },\n        {\n            _id: '4',\n            title: 'Networking in Alicante',\n            description: 'Top events and communities for professionals',\n            category: 'Networking',\n            readTime: '12 min',\n            icon: 'account-group',\n            isNew: true,\n        },\n        {\n            _id: '5',\n            title: 'Finding Office Space',\n            description: 'Coworking spaces and office rentals in Alicante',\n            category: 'Workspace',\n            readTime: '10 min',\n            icon: 'office-building',\n            isNew: false,\n        },\n    ];\n\n    const loadGuides = useCallback(async () => {\n        try {\n            await new Promise((resolve) => setTimeout(resolve, 1000));\n            if (activeTab === 'myGuides') {\n                setGuides(mockMyGuides);\n            } else {\n                setGuides(mockAllGuides);\n            }\n        } catch (error) {\n            console.error('Failed to load guides:', error);\n            if (!refreshing) {\n                showErrorAlert('Error', ERROR_MESSAGES.CONTENT_LOAD_FAILED);\n            }\n        } finally {\n            setLoading(false);\n            setRefreshing(false);\n        }\n    }, [activeTab, refreshing, user?.professionalPath]);\n\n    useEffect(() => {\n        setLoading(true);\n        loadGuides();\n    }, [activeTab, loadGuides]);\n\n    const handleRefresh = useCallback(async () => {\n        setRefreshing(true);\n        await loadGuides();\n    }, [loadGuides]);\n\n    const handleSearch = useCallback((query) => {\n        setSearchQuery(query);\n    }, []);\n\n    const handleTabChange = useCallback((tab) => {\n        setActiveTab(tab);\n        setSearchQuery('');\n    }, []);\n\n    const handleGuidePress = useCallback((guide) => {\n        showErrorAlert(\n            'Coming Soon',\n            `The guide \"${guide.title}\" is being prepared and will be available soon!`,\n        );\n    }, []);\n\n    const renderGuideItem = ({ item }) => (\n        <TouchableOpacity onPress={() => handleGuidePress(item)} activeOpacity={0.7}>\n            <Card style={styles.guideCard}>\n                <Card.Content>\n                    <View style={styles.guideContent}>\n                        <View\n                            style={[\n                                styles.guideIconContainer,\n                                { backgroundColor: colors.primaryLight + '20' },\n                            ]}\n                        >\n                            <Icon\n                                name={item.icon || 'file-document-outline'}\n                                size={24}\n                                color={colors.primary}\n                            />\n                        </View>\n                        <View style={styles.guideTextContainer}>\n                            <View style={styles.guideTitleRow}>\n                                <Text style={styles.guideTitle} numberOfLines={1}>\n                                    {item.title}\n                                </Text>\n                                {item.isNew && (\n                                    <Chip\n                                        style={styles.newChip}\n                                        textStyle={styles.newChipText}\n                                        mode=\"flat\"\n                                    >\n                                        NEW\n                                    </Chip>\n                                )}\n                            </View>\n                            <Text style={styles.guideDescription} numberOfLines={2}>\n                                {item.description}\n                            </Text>\n                            <View style={styles.guideMetadata}>\n                                <Chip\n                                    style={styles.categoryChip}\n                                    textStyle={styles.categoryChipText}\n                                    mode=\"outlined\"\n                                >\n                                    {item.category}\n                                </Chip>\n                                <Text style={styles.readTime}>\n                                    <Icon\n                                        name=\"clock-outline\"\n                                        size={14}\n                                        color={colors.textSecondary}\n                                    />{' '}\n                                    {item.readTime}\n                                </Text>\n                            </View>\n                        </View>\n                        <Icon name=\"chevron-right\" size={24} color={colors.textSecondary} />\n                    </View>\n                </Card.Content>\n            </Card>\n        </TouchableOpacity>\n    );\n\n    const getFilteredData = () => {\n        if (!searchQuery) return guides;\n\n        return guides.filter((item) => {\n            const searchLower = searchQuery.toLowerCase();\n            return (\n                item.title.toLowerCase().includes(searchLower) ||\n                item.description.toLowerCase().includes(searchLower) ||\n                item.category.toLowerCase().includes(searchLower)\n            );\n        });\n    };\n\n    const renderEmptyState = () => {\n        if (searchQuery) {\n            return (\n                <EmptyState\n                    icon=\"magnify\"\n                    title=\"No results found\"\n                    message={'Try adjusting your search terms'}\n                    style={styles.emptyState}\n                />\n            );\n        }\n\n        if (activeTab === 'myGuides') {\n            return (\n                <EmptyState\n                    icon=\"book-open-variant-outline\"\n                    title=\"No guides saved yet!\"\n                    message=\"Browse all guides and save the ones relevant to you.\"\n                    style={styles.emptyState}\n                />\n            );\n        } else {\n            return (\n                <EmptyState\n                    icon=\"book-open-variant-outline\"\n                    title=\"Guides coming soon!\"\n                    message=\"We're working hard to create comprehensive guides to help you navigate life in Alicante. Check back soon!\"\n                    style={styles.emptyState}\n                />\n            );\n        }\n    };\n\n    const filteredData = getFilteredData();\n\n    return (\n        <SafeAreaView style={styles.safeArea}>\n            <View style={styles.container}>\n                <Searchbar\n                    placeholder=\"Search guides...\"\n                    onChangeText={handleSearch}\n                    value={searchQuery}\n                    style={styles.searchBar}\n                    inputStyle={styles.searchInput}\n                    icon=\"magnify\"\n                    clearIcon=\"close\"\n                />\n\n                <View style={styles.tabContainer}>\n                    <TouchableOpacity\n                        style={[styles.tab, activeTab === 'myGuides' && styles.activeTab]}\n                        onPress={() => handleTabChange('myGuides')}\n                        activeOpacity={0.7}\n                    >\n                        <Icon\n                            name=\"bookmark\"\n                            size={20}\n                            color={activeTab === 'myGuides' ? colors.primary : colors.textSecondary}\n                            style={styles.tabIcon}\n                        />\n                        <Text\n                            style={[\n                                styles.tabText,\n                                activeTab === 'myGuides' && styles.activeTabText,\n                            ]}\n                        >\n                            My Guides\n                        </Text>\n                    </TouchableOpacity>\n\n                    <TouchableOpacity\n                        style={[styles.tab, activeTab === 'allGuides' && styles.activeTab]}\n                        onPress={() => handleTabChange('allGuides')}\n                        activeOpacity={0.7}\n                    >\n                        <Icon\n                            name=\"book-open-variant\"\n                            size={20}\n                            color={\n                                activeTab === 'allGuides' ? colors.primary : colors.textSecondary\n                            }\n                            style={styles.tabIcon}\n                        />\n                        <Text\n                            style={[\n                                styles.tabText,\n                                activeTab === 'allGuides' && styles.activeTabText,\n                            ]}\n                        >\n                            All Guides\n                        </Text>\n                    </TouchableOpacity>\n                </View>\n\n                {loading && !refreshing ? (\n                    <LoadingSpinner style={styles.loader} />\n                ) : (\n                    <FlatList\n                        data={filteredData}\n                        renderItem={renderGuideItem}\n                        keyExtractor={(item) => item._id}\n                        contentContainerStyle={[\n                            styles.listContent,\n                            filteredData.length === 0 && styles.emptyListContent,\n                        ]}\n                        ListEmptyComponent={renderEmptyState}\n                        refreshControl={\n                            <RefreshControl\n                                refreshing={refreshing}\n                                onRefresh={handleRefresh}\n                                tintColor={colors.primary}\n                            />\n                        }\n                        showsVerticalScrollIndicator={false}\n                        ItemSeparatorComponent={() => <View style={styles.separator} />}\n                    />\n                )}\n            </View>\n        </SafeAreaView>\n    );\n};\n\nexport default React.memo(ResourcesScreen);\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/events/CreateEventScreen.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":17,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import DateTimePicker from '@react-native-community/datetimepicker';\nimport React, { useState } from 'react';\nimport { View, ScrollView, Text, TouchableOpacity, Platform, SafeAreaView } from 'react-native';\nimport { TextInput, Button, Chip, Portal, Modal } from 'react-native-paper';\n\nimport Icon from '../../components/common/Icon.js';\nimport eventService from '../../services/eventService';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { useTheme } from '../../store/contexts/ThemeContext';\nimport { createEventStyles } from '../../styles/screens/events/CreateEventScreenStyles';\nimport { showErrorAlert, showSuccessAlert } from '../../utils/alerts';\nimport { formatDate } from '../../utils/formatting';\n\nconst CreateEventScreen = ({ navigation }) => {\n    const theme = useTheme();\n    const styles = createEventStyles(theme);\n    const { user } = useAuth();\n\n    const [loading, setLoading] = useState(false);\n    const [showDatePicker, setShowDatePicker] = useState(false);\n    const [showTimePicker, setShowTimePicker] = useState(false);\n    const [showCategoryModal, setShowCategoryModal] = useState(false);\n    const [showAudienceModal, setShowAudienceModal] = useState(false);\n\n    const [formData, setFormData] = useState({\n        title: '',\n        description: '',\n        date: new Date(),\n        time: new Date(),\n        location: {\n            name: '',\n            address: '',\n        },\n        maxAttendees: '',\n        category: 'meetup',\n        targetAudience: 'all',\n        tags: [],\n        isPublic: true,\n    });\n\n    const [formErrors, setFormErrors] = useState({});\n    const [tagInput, setTagInput] = useState('');\n\n    const categories = [\n        { value: 'networking', label: 'Networking', icon: 'account-group' },\n        { value: 'workshop', label: 'Workshop', icon: 'school' },\n        { value: 'social', label: 'Social', icon: 'party-popper' },\n        { value: 'meetup', label: 'Meetup', icon: 'coffee' },\n        { value: 'conference', label: 'Conference', icon: 'presentation' },\n        { value: 'other', label: 'Other', icon: 'dots-horizontal' },\n    ];\n\n    const audiences = [\n        { value: 'all', label: 'Everyone' },\n        { value: 'freelancers', label: 'Freelancers' },\n        { value: 'entrepreneurs', label: 'Entrepreneurs' },\n        { value: 'both', label: 'Both' },\n    ];\n\n    const validateForm = () => {\n        const errors = {};\n\n        if (!formData.title.trim()) {\n            errors.title = 'Title is required';\n        }\n        if (!formData.description.trim()) {\n            errors.description = 'Description is required';\n        }\n        if (!formData.location.name.trim()) {\n            errors.locationName = 'Location name is required';\n        }\n\n        setFormErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n\n    const handleSubmit = async () => {\n        if (!validateForm()) return;\n\n        setLoading(true);\n        try {\n            // Format time from Date object to string\n            const hours = formData.time.getHours();\n            const minutes = formData.time.getMinutes();\n            const timeString = `${hours.toString().padStart(2, '0')}:${minutes\n                .toString()\n                .padStart(2, '0')}`;\n\n            const eventData = {\n                ...formData,\n                time: timeString,\n                maxAttendees: formData.maxAttendees ? parseInt(formData.maxAttendees) : null,\n            };\n\n            await eventService.createEvent(eventData);\n            showSuccessAlert('Success', 'Event created successfully!');\n            navigation.goBack();\n        } catch (error) {\n            console.error('Failed to create event:', error);\n            showErrorAlert('Error', error.message || 'Failed to create event');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleDateChange = (event, selectedDate) => {\n        setShowDatePicker(false);\n        if (selectedDate) {\n            setFormData({ ...formData, date: selectedDate });\n        }\n    };\n\n    const handleTimeChange = (event, selectedTime) => {\n        setShowTimePicker(false);\n        if (selectedTime) {\n            setFormData({ ...formData, time: selectedTime });\n        }\n    };\n\n    const formatTime = (date) => {\n        const hours = date.getHours();\n        const minutes = date.getMinutes();\n        const ampm = hours >= 12 ? 'PM' : 'AM';\n        const displayHours = hours % 12 || 12;\n        return `${displayHours}:${minutes.toString().padStart(2, '0')} ${ampm}`;\n    };\n\n    const handleAddTag = () => {\n        if (tagInput.trim() && !formData.tags.includes(tagInput.trim())) {\n            setFormData({\n                ...formData,\n                tags: [...formData.tags, tagInput.trim().toLowerCase()],\n            });\n            setTagInput('');\n        }\n    };\n\n    const handleRemoveTag = (tag) => {\n        setFormData({\n            ...formData,\n            tags: formData.tags.filter((t) => t !== tag),\n        });\n    };\n\n    const selectedCategory = categories.find((cat) => cat.value === formData.category);\n    const selectedAudience = audiences.find((aud) => aud.value === formData.targetAudience);\n\n    return (\n        <SafeAreaView style={styles.safeArea}>\n            <ScrollView\n                style={styles.container}\n                contentContainerStyle={styles.scrollContent}\n                showsVerticalScrollIndicator={false}\n            >\n                <Text style={styles.sectionTitle}>Event Details</Text>\n\n                <TextInput\n                    label=\"Event Title\"\n                    value={formData.title}\n                    onChangeText={(text) => setFormData({ ...formData, title: text })}\n                    mode=\"outlined\"\n                    style={styles.input}\n                    error={!!formErrors.title}\n                    theme={{ colors: { primary: theme.colors.primary } }}\n                />\n                {formErrors.title && <Text style={styles.errorText}>{formErrors.title}</Text>}\n\n                <TextInput\n                    label=\"Description\"\n                    value={formData.description}\n                    onChangeText={(text) => setFormData({ ...formData, description: text })}\n                    mode=\"outlined\"\n                    multiline\n                    numberOfLines={4}\n                    style={styles.input}\n                    error={!!formErrors.description}\n                    theme={{ colors: { primary: theme.colors.primary } }}\n                />\n                {formErrors.description && (\n                    <Text style={styles.errorText}>{formErrors.description}</Text>\n                )}\n\n                <Text style={styles.sectionTitle}>Date & Time</Text>\n\n                <TouchableOpacity\n                    style={styles.dateTimeSelector}\n                    onPress={() => setShowDatePicker(true)}\n                >\n                    <Icon name=\"calendar\" size={24} color={theme.colors.primary} />\n                    <Text style={styles.dateTimeText}>{formatDate(formData.date)}</Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity\n                    style={styles.dateTimeSelector}\n                    onPress={() => setShowTimePicker(true)}\n                >\n                    <Icon name=\"clock-outline\" size={24} color={theme.colors.primary} />\n                    <Text style={styles.dateTimeText}>{formatTime(formData.time)}</Text>\n                </TouchableOpacity>\n\n                <Text style={styles.sectionTitle}>Location</Text>\n\n                <TextInput\n                    label=\"Location Name\"\n                    value={formData.location.name}\n                    onChangeText={(text) =>\n                        setFormData({\n                            ...formData,\n                            location: { ...formData.location, name: text },\n                        })\n                    }\n                    mode=\"outlined\"\n                    style={styles.input}\n                    error={!!formErrors.locationName}\n                    theme={{ colors: { primary: theme.colors.primary } }}\n                />\n                {formErrors.locationName && (\n                    <Text style={styles.errorText}>{formErrors.locationName}</Text>\n                )}\n\n                <TextInput\n                    label=\"Address (Optional)\"\n                    value={formData.location.address}\n                    onChangeText={(text) =>\n                        setFormData({\n                            ...formData,\n                            location: { ...formData.location, address: text },\n                        })\n                    }\n                    mode=\"outlined\"\n                    style={styles.input}\n                    theme={{ colors: { primary: theme.colors.primary } }}\n                />\n\n                <Text style={styles.sectionTitle}>Event Settings</Text>\n\n                <TextInput\n                    label=\"Max Attendees (Optional)\"\n                    value={formData.maxAttendees}\n                    onChangeText={(text) => setFormData({ ...formData, maxAttendees: text })}\n                    mode=\"outlined\"\n                    keyboardType=\"numeric\"\n                    style={styles.input}\n                    theme={{ colors: { primary: theme.colors.primary } }}\n                />\n\n                {/* Category Selection */}\n                <TouchableOpacity\n                    style={styles.selectorButton}\n                    onPress={() => setShowCategoryModal(true)}\n                >\n                    <View style={styles.selectorContent}>\n                        <Icon name={selectedCategory.icon} size={24} color={theme.colors.primary} />\n                        <View style={styles.selectorTextContainer}>\n                            <Text style={styles.selectorLabel}>Category</Text>\n                            <Text style={styles.selectorValue}>{selectedCategory.label}</Text>\n                        </View>\n                        <Icon name=\"chevron-down\" size={24} color={theme.colors.textSecondary} />\n                    </View>\n                </TouchableOpacity>\n\n                {/* Target Audience Selection */}\n                <TouchableOpacity\n                    style={styles.selectorButton}\n                    onPress={() => setShowAudienceModal(true)}\n                >\n                    <View style={styles.selectorContent}>\n                        <Icon name=\"account-group\" size={24} color={theme.colors.primary} />\n                        <View style={styles.selectorTextContainer}>\n                            <Text style={styles.selectorLabel}>Target Audience</Text>\n                            <Text style={styles.selectorValue}>{selectedAudience.label}</Text>\n                        </View>\n                        <Icon name=\"chevron-down\" size={24} color={theme.colors.textSecondary} />\n                    </View>\n                </TouchableOpacity>\n\n                <View style={styles.tagSection}>\n                    <Text style={styles.radioLabel}>Tags</Text>\n                    <View style={styles.tagInputContainer}>\n                        <TextInput\n                            placeholder=\"Add tags...\"\n                            value={tagInput}\n                            onChangeText={setTagInput}\n                            mode=\"outlined\"\n                            style={styles.tagInput}\n                            theme={{ colors: { primary: theme.colors.primary } }}\n                            onSubmitEditing={handleAddTag}\n                        />\n                        <Button\n                            mode=\"contained\"\n                            onPress={handleAddTag}\n                            style={styles.addTagButton}\n                            disabled={!tagInput.trim()}\n                        >\n                            Add\n                        </Button>\n                    </View>\n                    <View style={styles.tagsList}>\n                        {formData.tags.map((tag, index) => (\n                            <Chip\n                                key={index}\n                                style={styles.tag}\n                                onClose={() => handleRemoveTag(tag)}\n                            >\n                                {tag}\n                            </Chip>\n                        ))}\n                    </View>\n                </View>\n\n                <View style={styles.submitContainer}>\n                    <Button\n                        mode=\"outlined\"\n                        onPress={() => navigation.goBack()}\n                        style={styles.cancelButton}\n                        disabled={loading}\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        mode=\"contained\"\n                        onPress={handleSubmit}\n                        style={styles.submitButton}\n                        loading={loading}\n                        disabled={loading}\n                    >\n                        Create Event\n                    </Button>\n                </View>\n            </ScrollView>\n\n            {showDatePicker && (\n                <DateTimePicker\n                    value={formData.date}\n                    mode=\"date\"\n                    display={Platform.OS === 'ios' ? 'spinner' : 'default'}\n                    onChange={handleDateChange}\n                    minimumDate={new Date()}\n                />\n            )}\n\n            {showTimePicker && (\n                <DateTimePicker\n                    value={formData.time}\n                    mode=\"time\"\n                    display={Platform.OS === 'ios' ? 'spinner' : 'default'}\n                    onChange={handleTimeChange}\n                    is24Hour={false}\n                />\n            )}\n\n            {/* Category Selection Modal */}\n            <Portal>\n                <Modal\n                    visible={showCategoryModal}\n                    onDismiss={() => setShowCategoryModal(false)}\n                    contentContainerStyle={styles.modal}\n                >\n                    <Text style={styles.modalTitle}>Select Category</Text>\n                    {categories.map((category) => (\n                        <TouchableOpacity\n                            key={category.value}\n                            style={[\n                                styles.modalOption,\n                                formData.category === category.value && styles.modalOptionSelected,\n                            ]}\n                            onPress={() => {\n                                setFormData({ ...formData, category: category.value });\n                                setShowCategoryModal(false);\n                            }}\n                        >\n                            <Icon\n                                name={category.icon}\n                                size={24}\n                                color={\n                                    formData.category === category.value\n                                        ? theme.colors.primary\n                                        : theme.colors.textSecondary\n                                }\n                            />\n                            <Text\n                                style={[\n                                    styles.modalOptionText,\n                                    formData.category === category.value &&\n                                        styles.modalOptionTextSelected,\n                                ]}\n                            >\n                                {category.label}\n                            </Text>\n                            {formData.category === category.value && (\n                                <Icon name=\"check\" size={24} color={theme.colors.primary} />\n                            )}\n                        </TouchableOpacity>\n                    ))}\n                </Modal>\n            </Portal>\n\n            {/* Audience Selection Modal */}\n            <Portal>\n                <Modal\n                    visible={showAudienceModal}\n                    onDismiss={() => setShowAudienceModal(false)}\n                    contentContainerStyle={styles.modal}\n                >\n                    <Text style={styles.modalTitle}>Select Target Audience</Text>\n                    {audiences.map((audience) => (\n                        <TouchableOpacity\n                            key={audience.value}\n                            style={[\n                                styles.modalOption,\n                                formData.targetAudience === audience.value &&\n                                    styles.modalOptionSelected,\n                            ]}\n                            onPress={() => {\n                                setFormData({ ...formData, targetAudience: audience.value });\n                                setShowAudienceModal(false);\n                            }}\n                        >\n                            <Text\n                                style={[\n                                    styles.modalOptionText,\n                                    formData.targetAudience === audience.value &&\n                                        styles.modalOptionTextSelected,\n                                ]}\n                            >\n                                {audience.label}\n                            </Text>\n                            {formData.targetAudience === audience.value && (\n                                <Icon name=\"check\" size={24} color={theme.colors.primary} />\n                            )}\n                        </TouchableOpacity>\n                    ))}\n                </Modal>\n            </Portal>\n        </SafeAreaView>\n    );\n};\n\nexport default React.memo(CreateEventScreen);\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/events/EventDetailScreen.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":4,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":28},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadEventDetail'. Either include it or remove the dependency array.","line":27,"column":8,"nodeType":"ArrayExpression","endLine":27,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [eventId, loadEventDetail]","fix":{"range":[1209,1218],"text":"[eventId, loadEventDetail]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":196,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":196,"endColumn":79}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { format } from 'date-fns';\nimport React, { useState, useEffect } from 'react';\nimport { View, Text, ScrollView, TouchableOpacity, SafeAreaView } from 'react-native';\nimport { Card, Button, Chip, Avatar, Menu, Divider } from 'react-native-paper';\n\nimport Icon from '../../components/common/Icon.js';\nimport LoadingSpinner from '../../components/common/LoadingSpinner';\nimport eventService from '../../services/eventService';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { useTheme } from '../../store/contexts/ThemeContext';\nimport { eventDetailStyles } from '../../styles/screens/events/EventDetailScreenStyles';\nimport { showErrorAlert, showSuccessAlert, showConfirmAlert } from '../../utils/alerts';\n\nconst EventDetailScreen = ({ route, navigation }) => {\n    const theme = useTheme();\n    const styles = eventDetailStyles(theme);\n    const { user } = useAuth();\n    const { eventId } = route.params;\n\n    const [event, setEvent] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [actionLoading, setActionLoading] = useState(false);\n    const [menuVisible, setMenuVisible] = useState(false);\n\n    useEffect(() => {\n        loadEventDetail();\n    }, [eventId]);\n\n    const loadEventDetail = async () => {\n        try {\n            const data = await eventService.getEvent(eventId);\n            setEvent(data);\n        } catch (error) {\n            console.error('Failed to load event:', error);\n            showErrorAlert('Error', 'Failed to load event details');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleJoinEvent = async () => {\n        setActionLoading(true);\n        try {\n            await eventService.joinEvent(eventId);\n            showSuccessAlert('Success', 'You have joined the event!');\n            loadEventDetail();\n        } catch (error) {\n            showErrorAlert('Error', error.message || 'Failed to join event');\n        } finally {\n            setActionLoading(false);\n        }\n    };\n\n    const handleLeaveEvent = async () => {\n        setActionLoading(true);\n        try {\n            await eventService.leaveEvent(eventId);\n            showSuccessAlert('Success', 'You have left the event');\n            loadEventDetail();\n        } catch (error) {\n            showErrorAlert('Error', error.message || 'Failed to leave event');\n        } finally {\n            setActionLoading(false);\n        }\n    };\n\n    const handleDeleteEvent = async () => {\n        showConfirmAlert(\n            'Delete Event',\n            'Are you sure you want to delete this event? This action cannot be undone.',\n            async () => {\n                setActionLoading(true);\n                try {\n                    await eventService.deleteEvent(eventId);\n                    showSuccessAlert('Success', 'Event deleted successfully');\n                    navigation.goBack();\n                } catch (error) {\n                    showErrorAlert('Error', error.message || 'Failed to delete event');\n                } finally {\n                    setActionLoading(false);\n                }\n            },\n        );\n    };\n\n    if (loading) {\n        return <LoadingSpinner fullScreen text=\"Loading event...\" />;\n    }\n\n    if (!event) {\n        return (\n            <View style={styles.errorContainer}>\n                <Text style={styles.errorText}>Event not found</Text>\n            </View>\n        );\n    }\n\n    const isOrganizer = event.organizer?._id === user?._id;\n    const isAttending = event.attendees?.some((att) => att._id === user?._id);\n    const isFull = event.maxAttendees && event.attendees?.length >= event.maxAttendees;\n    const eventDate = new Date(event.date);\n\n    return (\n        <SafeAreaView style={styles.safeArea}>\n            <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n                <Card style={styles.headerCard}>\n                    <Card.Content>\n                        <View style={styles.dateContainer}>\n                            <View style={styles.dateBadge}>\n                                <Text style={styles.dateDay}>{format(eventDate, 'dd')}</Text>\n                                <Text style={styles.dateMonth}>{format(eventDate, 'MMM')}</Text>\n                            </View>\n                            <View style={styles.headerInfo}>\n                                <Text style={styles.title}>{event.title}</Text>\n                                <View style={styles.metaContainer}>\n                                    <Icon\n                                        name=\"clock-outline\"\n                                        size={16}\n                                        color={theme.colors.textSecondary}\n                                    />\n                                    <Text style={styles.metaText}>{event.time}</Text>\n                                </View>\n                            </View>\n                            {isOrganizer && (\n                                <Menu\n                                    visible={menuVisible}\n                                    onDismiss={() => setMenuVisible(false)}\n                                    anchor={\n                                        <TouchableOpacity\n                                            onPress={() => setMenuVisible(true)}\n                                            style={styles.menuButton}\n                                        >\n                                            <Icon\n                                                name=\"dots-vertical\"\n                                                size={24}\n                                                color={theme.colors.text}\n                                            />\n                                        </TouchableOpacity>\n                                    }\n                                >\n                                    <Menu.Item\n                                        onPress={() => {\n                                            setMenuVisible(false);\n                                            navigation.navigate('EditEvent', { eventId, event });\n                                        }}\n                                        title=\"Edit Event\"\n                                        leadingIcon=\"pencil\"\n                                    />\n                                    <Divider />\n                                    <Menu.Item\n                                        onPress={() => {\n                                            setMenuVisible(false);\n                                            handleDeleteEvent();\n                                        }}\n                                        title=\"Delete Event\"\n                                        leadingIcon=\"delete\"\n                                        titleStyle={{ color: theme.colors.error }}\n                                    />\n                                </Menu>\n                            )}\n                        </View>\n                    </Card.Content>\n                </Card>\n\n                <Card style={styles.infoCard}>\n                    <Card.Content>\n                        <Text style={styles.sectionTitle}>About this event</Text>\n                        <Text style={styles.description}>{event.description}</Text>\n                    </Card.Content>\n                </Card>\n\n                <Card style={styles.infoCard}>\n                    <Card.Content>\n                        <Text style={styles.sectionTitle}>Location</Text>\n                        <View style={styles.locationContainer}>\n                            <Icon name=\"map-marker\" size={20} color={theme.colors.primary} />\n                            <View style={styles.locationInfo}>\n                                <Text style={styles.locationName}>{event.location.name}</Text>\n                                {event.location.address && (\n                                    <Text style={styles.locationAddress}>\n                                        {event.location.address}\n                                    </Text>\n                                )}\n                            </View>\n                        </View>\n                    </Card.Content>\n                </Card>\n\n                <Card style={styles.infoCard}>\n                    <Card.Content>\n                        <Text style={styles.sectionTitle}>\n                            Attendees ({event.attendees?.length || 0}\n                            {event.maxAttendees && `/${event.maxAttendees}`})\n                        </Text>\n                        <View style={styles.attendeesList}>\n                            {event.attendees?.slice(0, 5).map((attendee, index) => (\n                                <View key={attendee._id} style={styles.attendeeChip}>\n                                    <Avatar.Text size={32} label={attendee.name.charAt(0)} />\n                                    <Text style={styles.attendeeName}>{attendee.name}</Text>\n                                </View>\n                            ))}\n                            {event.attendees?.length > 5 && (\n                                <Text style={styles.moreAttendees}>\n                                    +{event.attendees.length - 5} more\n                                </Text>\n                            )}\n                        </View>\n                    </Card.Content>\n                </Card>\n\n                <View style={styles.actionContainer}>\n                    {isOrganizer ? (\n                        <Button mode=\"contained\" style={styles.actionButton} disabled>\n                            You're the organizer\n                        </Button>\n                    ) : isAttending ? (\n                        <Button\n                            mode=\"outlined\"\n                            style={styles.actionButton}\n                            onPress={handleLeaveEvent}\n                            loading={actionLoading}\n                            disabled={actionLoading}\n                        >\n                            Leave Event\n                        </Button>\n                    ) : (\n                        <Button\n                            mode=\"contained\"\n                            style={styles.actionButton}\n                            onPress={handleJoinEvent}\n                            loading={actionLoading}\n                            disabled={actionLoading || isFull}\n                        >\n                            {isFull ? 'Event Full' : 'Join Event'}\n                        </Button>\n                    )}\n                </View>\n            </ScrollView>\n        </SafeAreaView>\n    );\n};\n\nexport default React.memo(EventDetailScreen);\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/events/EventsScreen.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Avatar' is defined but never used.","line":12,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":33},{"ruleId":"no-unused-vars","severity":2,"message":"'fonts' is defined but never used.","line":17,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'socketService' is defined but never used.","line":19,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":21},{"ruleId":"import/order","severity":2,"message":"`../../services/api/client` import should occur before import of `../../services/eventService`","line":20,"column":1,"nodeType":"ImportDeclaration","endLine":20,"endColumn":51,"fix":{"range":[551,716],"text":"import apiClient from '../../services/api/client';\nimport eventService from '../../services/eventService';\nimport socketService from '../../services/socketService';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../hooks/useSocketEvents` import should occur before import of `../../services/eventService`","line":24,"column":1,"nodeType":"ImportDeclaration","endLine":24,"endColumn":63,"fix":{"range":[551,937],"text":"import { useSocketEvents } from '../../hooks/useSocketEvents';\nimport eventService from '../../services/eventService';\nimport socketService from '../../services/socketService';\nimport apiClient from '../../services/api/client';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { showErrorAlert } from '../../utils/alerts';\nimport { devLog } from '../../utils/devLog';\n"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":71,"column":74,"nodeType":"ArrowFunctionExpression","messageId":"missing","endLine":72,"endColumn":1,"fix":{"range":[2723,2750],"text":"event,\n                    )"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":72,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"missing","endLine":73,"endColumn":1,"fix":{"range":[2749,2768],"text":"),\n                )"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":77,"column":75,"nodeType":"ArrowFunctionExpression","messageId":"missing","endLine":78,"endColumn":1,"fix":{"range":[2973,2992],"text":"),\n                )"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":80,"column":25,"nodeType":"Property","messageId":"missing","endLine":81,"endColumn":1,"fix":{"range":[3031,3038],"text":"),\n    }"}}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import { format } from 'date-fns';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport {\n    View,\n    Text,\n    FlatList,\n    TouchableOpacity,\n    RefreshControl,\n    SafeAreaView,\n    StyleSheet,\n} from 'react-native';\nimport { Card, FAB, Chip, Avatar } from 'react-native-paper';\n\nimport EmptyState from '../../components/common/EmptyState';\nimport Icon from '../../components/common/Icon.js';\nimport LoadingSpinner from '../../components/common/LoadingSpinner';\nimport { colors, fonts, spacing } from '../../constants/theme';\nimport eventService from '../../services/eventService';\nimport socketService from '../../services/socketService';\nimport apiClient from '../../services/api/client';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { showErrorAlert } from '../../utils/alerts';\nimport { devLog } from '../../utils/devLog';\nimport { useSocketEvents } from '../../hooks/useSocketEvents';\n\nconst EventsScreen = ({ navigation }) => {\n    const { user } = useAuth();\n    const [events, setEvents] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [refreshing, setRefreshing] = useState(false);\n    const [filter, setFilter] = useState('upcoming'); // 'upcoming', 'past', 'myEvents'\n    \n    const loadEvents = useCallback(async () => {\n        try {\n            const params = {\n                upcoming: filter === 'upcoming' ? 'true' : undefined,\n                myEvents: filter === 'myEvents' ? 'true' : undefined,\n            };\n\n            const data = await eventService.getEvents(params);\n            setEvents(data || []);\n        } catch (error) {\n            console.error('Failed to load events:', error);\n            if (!refreshing) {\n                showErrorAlert('Error', 'Failed to load events');\n            }\n        } finally {\n            setLoading(false);\n            setRefreshing(false);\n        }\n    }, [filter, refreshing]);\n\n    // Socket event handlers\n    const socketEventHandlers = {\n        'event_update': useCallback((data) => {\n            devLog('Events', 'Received real-time update:', data);\n            \n            // Clear API cache for events\n            apiClient.clearCache('/events');\n            if (data.event?._id) {\n                apiClient.clearCache(`/events/${data.event._id}`);\n            }\n            \n            if (data.type === 'create') {\n                // Reload events to get fresh data with proper filtering\n                loadEvents();\n            } else if (data.type === 'update') {\n                // Update existing event\n                setEvents(prevEvents => \n                    prevEvents.map(event => \n                        event._id === data.event._id ? data.event : event\n                    )\n                );\n            } else if (data.type === 'delete') {\n                // Remove deleted event\n                setEvents(prevEvents => \n                    prevEvents.filter(event => event._id !== data.eventId)\n                );\n            }\n        }, [loadEvents])\n    };\n    \n    // Use socket events hook\n    useSocketEvents(socketEventHandlers, [loadEvents]);\n    \n    useEffect(() => {\n        loadEvents();\n    }, [filter, loadEvents]);\n\n    const handleRefresh = useCallback(() => {\n        setRefreshing(true);\n        loadEvents();\n    }, [loadEvents]);\n\n    const handleEventPress = (event) => {\n        navigation.navigate('EventDetail', { eventId: event._id });\n    };\n\n    const handleCreateEvent = () => {\n        navigation.navigate('CreateEvent');\n    };\n\n    const renderEventItem = ({ item }) => {\n        const eventDate = new Date(item.date);\n        const isAttending = item.attendees?.some((att) => att === user?._id);\n        const isFull = item.maxAttendees && item.attendees?.length >= item.maxAttendees;\n\n        return (\n            <TouchableOpacity onPress={() => handleEventPress(item)} activeOpacity={0.7}>\n                <Card style={styles.eventCard}>\n                    <View style={styles.cardContentWrapper}>\n                        <Card.Content>\n                            <View style={styles.eventHeader}>\n                                <View style={styles.eventDateBadge}>\n                                    <Text style={styles.eventDateDay}>\n                                        {format(eventDate, 'dd')}\n                                    </Text>\n                                    <Text style={styles.eventDateMonth}>\n                                        {format(eventDate, 'MMM')}\n                                    </Text>\n                                </View>\n                                <View style={styles.eventInfo}>\n                                    <Text style={styles.eventTitle} numberOfLines={2}>\n                                        {item.title}\n                                    </Text>\n                                    <View style={styles.eventMeta}>\n                                        <Icon\n                                            name=\"clock-outline\"\n                                            size={14}\n                                            color={colors.textSecondary}\n                                        />\n                                        <Text style={styles.eventTime}>{item.time}</Text>\n                                        <Icon\n                                            name=\"map-marker-outline\"\n                                            size={14}\n                                            color={colors.textSecondary}\n                                            style={styles.metaIcon}\n                                        />\n                                        <Text style={styles.eventLocation} numberOfLines={1}>\n                                            {item.location.name}\n                                        </Text>\n                                    </View>\n                                    <View style={styles.eventFooter}>\n                                        <View style={styles.attendeesPreview}>\n                                            <Icon\n                                                name=\"account-group\"\n                                                size={16}\n                                                color={colors.textSecondary}\n                                            />\n                                            <Text style={styles.attendeesCount}>\n                                                {item.attendees?.length || 0}\n                                                {item.maxAttendees && ` / ${item.maxAttendees}`}\n                                            </Text>\n                                        </View>\n                                        <View style={styles.eventTags}>\n                                            {isAttending && (\n                                                <Chip\n                                                    style={styles.attendingChip}\n                                                    textStyle={styles.chipText}\n                                                >\n                                                    Attending\n                                                </Chip>\n                                            )}\n                                            {isFull && !isAttending && (\n                                                <Chip\n                                                    style={styles.fullChip}\n                                                    textStyle={styles.chipText}\n                                                >\n                                                    Full\n                                                </Chip>\n                                            )}\n                                        </View>\n                                    </View>\n                                </View>\n                            </View>\n                        </Card.Content>\n                    </View>\n                </Card>\n            </TouchableOpacity>\n        );\n    };\n\n    if (loading && !refreshing) {\n        return <LoadingSpinner fullScreen text=\"Loading events...\" />;\n    }\n\n    return (\n        <SafeAreaView style={styles.safeArea}>\n            <View style={styles.container}>\n                <View style={styles.header}>\n                    <Text style={styles.headerTitle}>Events</Text>\n                    <View style={styles.filterContainer}>\n                        <TouchableOpacity\n                            style={[\n                                styles.filterChip,\n                                filter === 'upcoming' && styles.filterChipActive,\n                            ]}\n                            onPress={() => setFilter('upcoming')}\n                        >\n                            <Text\n                                style={[\n                                    styles.filterText,\n                                    filter === 'upcoming' && styles.filterTextActive,\n                                ]}\n                            >\n                                Upcoming\n                            </Text>\n                        </TouchableOpacity>\n                        <TouchableOpacity\n                            style={[\n                                styles.filterChip,\n                                filter === 'past' && styles.filterChipActive,\n                            ]}\n                            onPress={() => setFilter('past')}\n                        >\n                            <Text\n                                style={[\n                                    styles.filterText,\n                                    filter === 'past' && styles.filterTextActive,\n                                ]}\n                            >\n                                Past\n                            </Text>\n                        </TouchableOpacity>\n                        <TouchableOpacity\n                            style={[\n                                styles.filterChip,\n                                filter === 'myEvents' && styles.filterChipActive,\n                            ]}\n                            onPress={() => setFilter('myEvents')}\n                        >\n                            <Text\n                                style={[\n                                    styles.filterText,\n                                    filter === 'myEvents' && styles.filterTextActive,\n                                ]}\n                            >\n                                My Events\n                            </Text>\n                        </TouchableOpacity>\n                    </View>\n                </View>\n\n                <FlatList\n                    data={events}\n                    renderItem={renderEventItem}\n                    keyExtractor={(item) => item._id}\n                    contentContainerStyle={styles.listContent}\n                    refreshControl={\n                        <RefreshControl\n                            refreshing={refreshing}\n                            onRefresh={handleRefresh}\n                            tintColor={colors.primary}\n                        />\n                    }\n                    showsVerticalScrollIndicator={false}\n                    ListEmptyComponent={\n                        <EmptyState\n                            icon=\"calendar-blank-outline\"\n                            title={filter === 'myEvents' ? 'No events yet' : 'No upcoming events'}\n                            message={\n                                filter === 'myEvents'\n                                    ? 'Events you create or join will appear here'\n                                    : 'Check back later or create your own event!'\n                            }\n                            action={\n                                <TouchableOpacity\n                                    style={styles.createButton}\n                                    onPress={handleCreateEvent}\n                                >\n                                    <Text style={styles.createButtonText}>Create Event</Text>\n                                </TouchableOpacity>\n                            }\n                        />\n                    }\n                />\n\n                <FAB\n                    icon=\"plus\"\n                    style={styles.fab}\n                    onPress={handleCreateEvent}\n                    color={colors.textInverse}\n                />\n            </View>\n        </SafeAreaView>\n    );\n};\n\nconst styles = StyleSheet.create({\n    safeArea: {\n        flex: 1,\n        backgroundColor: colors.background,\n    },\n    container: {\n        flex: 1,\n        backgroundColor: colors.background,\n    },\n    header: {\n        padding: spacing.md,\n        backgroundColor: colors.surface,\n        borderBottomWidth: 1,\n        borderBottomColor: colors.border,\n    },\n    headerTitle: {\n        fontSize: 24,\n        fontWeight: 'bold',\n        color: colors.text,\n        marginBottom: spacing.md,\n    },\n    filterContainer: {\n        flexDirection: 'row',\n        gap: spacing.sm,\n    },\n    filterChip: {\n        paddingHorizontal: spacing.md,\n        paddingVertical: spacing.xs,\n        borderRadius: 20,\n        backgroundColor: colors.surface,\n        borderWidth: 1,\n        borderColor: colors.border,\n    },\n    filterChipActive: {\n        backgroundColor: colors.primary,\n        borderColor: colors.primary,\n    },\n    filterText: {\n        fontSize: 14,\n        color: colors.text,\n    },\n    filterTextActive: {\n        color: colors.textInverse,\n        fontWeight: 'bold',\n    },\n    listContent: {\n        padding: spacing.md,\n    },\n    eventCard: {\n        marginBottom: spacing.md,\n        backgroundColor: colors.surface,\n        borderRadius: 12,\n        elevation: 2,\n        shadowColor: colors.shadow,\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.1,\n        shadowRadius: 4,\n    },\n    cardContentWrapper: {\n        borderRadius: 12,\n        overflow: 'hidden',\n    },\n    eventHeader: {\n        flexDirection: 'row',\n        alignItems: 'flex-start',\n    },\n    eventDateBadge: {\n        width: 60,\n        height: 60,\n        backgroundColor: colors.primary,\n        borderRadius: 8,\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginRight: spacing.md,\n    },\n    eventDateDay: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        color: colors.textInverse,\n    },\n    eventDateMonth: {\n        fontSize: 12,\n        color: colors.textInverse,\n        textTransform: 'uppercase',\n    },\n    eventInfo: {\n        flex: 1,\n    },\n    eventTitle: {\n        fontSize: 18,\n        fontWeight: 'bold',\n        color: colors.text,\n        marginBottom: spacing.xs,\n    },\n    eventMeta: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: spacing.sm,\n    },\n    eventTime: {\n        fontSize: 14,\n        color: colors.textSecondary,\n        marginLeft: spacing.xs,\n        marginRight: spacing.md,\n    },\n    metaIcon: {\n        marginLeft: spacing.sm,\n    },\n    eventLocation: {\n        fontSize: 14,\n        color: colors.textSecondary,\n        marginLeft: spacing.xs,\n        flex: 1,\n    },\n    eventFooter: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        marginTop: spacing.sm,\n    },\n    attendeesPreview: {\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    attendeesCount: {\n        fontSize: 14,\n        color: colors.textSecondary,\n        marginLeft: spacing.xs,\n    },\n    eventTags: {\n        flexDirection: 'row',\n        gap: spacing.xs,\n    },\n    attendingChip: {\n        height: 24,\n        backgroundColor: colors.primary,\n    },\n    fullChip: {\n        height: 24,\n        backgroundColor: colors.error,\n    },\n    chipText: {\n        fontSize: 12,\n        color: colors.textInverse,\n    },\n    fab: {\n        position: 'absolute',\n        margin: 16,\n        right: 0,\n        bottom: 0,\n        backgroundColor: colors.primary,\n    },\n    createButton: {\n        backgroundColor: colors.primary,\n        paddingHorizontal: spacing.lg,\n        paddingVertical: spacing.md,\n        borderRadius: 30,\n        marginTop: spacing.md,\n    },\n    createButtonText: {\n        color: colors.textInverse,\n        fontWeight: 'bold',\n        fontSize: 16,\n    },\n});\n\nexport default React.memo(EventsScreen);\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/forums/ConnectionDebugModal.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'TouchableOpacity' is defined but never used.","line":2,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":38},{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":2,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":57},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":52,"fix":{"range":[183,183],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`../../services/realtimeService` import should occur before import of `../../services/socketService`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":62,"fix":{"range":[184,379],"text":"import realtimeService from '../../services/realtimeService';\nimport socketService from '../../services/socketService';\nimport socketConnectionManager from '../../utils/socketConnectionManager';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../constants/theme` import should occur before import of `../../services/socketService`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":48,"fix":{"range":[184,532],"text":"import { colors } from '../../constants/theme';\nimport socketService from '../../services/socketService';\nimport socketConnectionManager from '../../utils/socketConnectionManager';\nimport realtimeService from '../../services/realtimeService';\nimport { testDirectSocketConnection, testHttpConnection } from '../../utils/testDirectSocketConnection';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../components/common/Icon` import should occur before import of `../../services/socketService`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":49,"fix":{"range":[184,581],"text":"import Icon from '../../components/common/Icon';\nimport socketService from '../../services/socketService';\nimport socketConnectionManager from '../../utils/socketConnectionManager';\nimport realtimeService from '../../services/realtimeService';\nimport { testDirectSocketConnection, testHttpConnection } from '../../utils/testDirectSocketConnection';\nimport { colors } from '../../constants/theme';\n"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":35,"column":52,"nodeType":"Property","messageId":"missing","endLine":36,"endColumn":1,"fix":{"range":[1545,1562],"text":"details,\n        }"}},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  backgroundColor: 'white',\n  padding: 20,\n  margin: 20,\n  borderRadius: 8,\n  maxHeight: '80%'\n}","line":105,"column":36,"nodeType":"ObjectExpression","endLine":111,"endColumn":14},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":110,"column":33,"nodeType":"Property","messageId":"missing","endLine":111,"endColumn":1,"fix":{"range":[3759,3778],"text":"'80%',\n            }"}},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontSize: 18, fontWeight: 'bold', marginBottom: 20 }","line":113,"column":26,"nodeType":"ObjectExpression","endLine":113,"endColumn":80},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginBottom: 20 }","line":117,"column":26,"nodeType":"ObjectExpression","endLine":117,"endColumn":46},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontWeight: 'bold', marginBottom: 10 }","line":118,"column":30,"nodeType":"ObjectExpression","endLine":118,"endColumn":70},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { backgroundColor: '#f5f5f5', padding: 10, borderRadius: 4 }","line":119,"column":30,"nodeType":"ObjectExpression","endLine":119,"endColumn":90},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginTop: 10, fontSize: 12 }","line":129,"column":38,"nodeType":"ObjectExpression","endLine":129,"endColumn":89},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flexDirection: 'row', flexWrap: 'wrap', marginBottom: 20 }","line":136,"column":26,"nodeType":"ObjectExpression","endLine":136,"endColumn":86},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { margin: 5 }","line":140,"column":28,"nodeType":"ObjectExpression","endLine":140,"endColumn":41},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { margin: 5 }","line":148,"column":28,"nodeType":"ObjectExpression","endLine":148,"endColumn":41},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { margin: 5 }","line":156,"column":28,"nodeType":"ObjectExpression","endLine":156,"endColumn":41},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { margin: 5 }","line":168,"column":28,"nodeType":"ObjectExpression","endLine":168,"endColumn":41},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  maxHeight: 200,\n  backgroundColor: '#f5f5f5',\n  padding: 10,\n  borderRadius: 4\n}","line":175,"column":32,"nodeType":"ObjectExpression","endLine":175,"endColumn":108},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontSize: 12, marginBottom: 2 }","line":177,"column":46,"nodeType":"ObjectExpression","endLine":177,"endColumn":79},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontSize: 12, color: '#666' }","line":182,"column":34,"nodeType":"ObjectExpression","endLine":182,"endColumn":65},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginTop: 20 }","line":191,"column":24,"nodeType":"ObjectExpression","endLine":191,"endColumn":41},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  flexDirection: 'row',\n  justifyContent: 'space-between',\n  marginBottom: 5\n}","line":200,"column":18,"nodeType":"ObjectExpression","endLine":200,"endColumn":92},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { fontWeight: 'bold' }","line":203,"column":26,"nodeType":"ObjectExpression","endLine":203,"endColumn":48},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { flexDirection: 'row', alignItems: 'center' }","line":205,"column":26,"nodeType":"ObjectExpression","endLine":205,"endColumn":72},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginLeft: 5 }","line":211,"column":30,"nodeType":"ObjectExpression","endLine":211,"endColumn":47}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, ScrollView, Alert } from 'react-native';\nimport { Modal, Button } from 'react-native-paper';\nimport socketService from '../../services/socketService';\nimport socketConnectionManager from '../../utils/socketConnectionManager';\nimport realtimeService from '../../services/realtimeService';\nimport { testDirectSocketConnection, testHttpConnection } from '../../utils/testDirectSocketConnection';\nimport { colors } from '../../constants/theme';\nimport Icon from '../../components/common/Icon';\n\nconst ConnectionDebugModal = ({ visible, onDismiss, userId }) => {\n    const [status, setStatus] = useState({});\n    const [logs, setLogs] = useState([]);\n\n    useEffect(() => {\n        if (visible) {\n            checkStatus();\n            const interval = setInterval(checkStatus, 1000);\n            return () => clearInterval(interval);\n        }\n    }, [visible]);\n\n    const checkStatus = () => {\n        const socketStatus = socketConnectionManager.getStatus();\n        const realtimeStatus = realtimeService.getStatus();\n        const now = new Date().toLocaleTimeString();\n        \n        setStatus({\n            ...socketStatus,\n            timestamp: now,\n            socketServiceConnected: socketService.socket?.connected || false,\n            socketServiceAuth: socketService.isAuthenticated || false,\n            realtimeMode: realtimeStatus.mode,\n            realtimeConnected: realtimeStatus.connected,\n            realtimeDetails: realtimeStatus.details\n        });\n    };\n\n    const forceReconnect = async () => {\n        addLog('Forcing reconnection...');\n        await socketConnectionManager.forceReconnect();\n        checkStatus();\n        addLog('Reconnection attempt completed');\n    };\n\n    const testConnection = async () => {\n        addLog('Starting connection test...');\n        \n        // Test 1: HTTP Connection\n        addLog('Testing HTTP connection...');\n        const httpOk = await testHttpConnection();\n        if (httpOk) {\n            addLog('✅ HTTP connection successful');\n        } else {\n            addLog('❌ HTTP connection failed - check backend URL');\n        }\n        \n        // Test 2: Check socket instance\n        if (!socketService.socket) {\n            addLog('❌ No socket instance found');\n        } else {\n            addLog('✅ Socket instance exists');\n        }\n\n        // Test 3: Check connection state\n        addLog(`Connection state: ${socketService.getConnectionState()}`);\n        \n        // Test 4: Try to connect\n        if (userId) {\n            addLog('Attempting to connect...');\n            try {\n                await socketService.connect(userId);\n                addLog('✅ Connection attempt completed');\n            } catch (error) {\n                addLog(`❌ Connection error: ${error.message}`);\n            }\n        }\n\n        // Test 5: Check authentication\n        if (socketService.isConnected()) {\n            addLog('✅ Socket is connected and authenticated');\n        } else {\n            addLog('❌ Socket is not fully connected');\n        }\n        \n        // Test 6: Direct socket test\n        addLog('Running direct socket test...');\n        await testDirectSocketConnection();\n\n        checkStatus();\n    };\n\n    const addLog = (message) => {\n        setLogs(prev => [...prev, `${new Date().toLocaleTimeString()} - ${message}`]);\n    };\n\n    const clearLogs = () => {\n        setLogs([]);\n    };\n\n    return (\n        <Modal\n            visible={visible}\n            onDismiss={onDismiss}\n            contentContainerStyle={{\n                backgroundColor: 'white',\n                padding: 20,\n                margin: 20,\n                borderRadius: 8,\n                maxHeight: '80%'\n            }}\n        >\n            <Text style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 20 }}>\n                Socket Connection Debug\n            </Text>\n\n            <View style={{ marginBottom: 20 }}>\n                <Text style={{ fontWeight: 'bold', marginBottom: 10 }}>Current Status:</Text>\n                <View style={{ backgroundColor: '#f5f5f5', padding: 10, borderRadius: 4 }}>\n                    <StatusRow label=\"Mode\" value={status.realtimeMode || 'none'} text />\n                    <StatusRow label=\"Connected\" value={status.realtimeConnected} />\n                    <StatusRow label=\"WebSocket Auth\" value={status.isAuthenticated} />\n                    <StatusRow label=\"Connection State\" value={status.connectionState} text />\n                    <StatusRow label=\"Socket ID\" value={status.socketId || 'None'} text />\n                    <StatusRow label=\"Monitoring\" value={status.isMonitoring} />\n                    <StatusRow label=\"Attempts\" value={status.attempts} text />\n                    <StatusRow label=\"Last Update\" value={status.timestamp} text />\n                    {status.realtimeMode === 'polling' && (\n                        <Text style={{ marginTop: 10, fontSize: 12, color: colors.info }}>\n                            📊 Using HTTP polling (WebSocket unavailable)\n                        </Text>\n                    )}\n                </View>\n            </View>\n\n            <View style={{ flexDirection: 'row', flexWrap: 'wrap', marginBottom: 20 }}>\n                <Button \n                    mode=\"contained\" \n                    onPress={testConnection}\n                    style={{ margin: 5 }}\n                    compact\n                >\n                    Test Connection\n                </Button>\n                <Button \n                    mode=\"contained\" \n                    onPress={forceReconnect}\n                    style={{ margin: 5 }}\n                    compact\n                >\n                    Force Reconnect\n                </Button>\n                <Button \n                    mode=\"outlined\" \n                    onPress={clearLogs}\n                    style={{ margin: 5 }}\n                    compact\n                >\n                    Clear Logs\n                </Button>\n                <Button \n                    mode=\"outlined\" \n                    onPress={() => {\n                        socketConnectionManager.connectionAttempts = 0;\n                        addLog('Reset connection attempts counter');\n                        checkStatus();\n                    }}\n                    style={{ margin: 5 }}\n                    compact\n                >\n                    Reset Counter\n                </Button>\n            </View>\n\n            <ScrollView style={{ maxHeight: 200, backgroundColor: '#f5f5f5', padding: 10, borderRadius: 4 }}>\n                {logs.map((log, index) => (\n                    <Text key={index} style={{ fontSize: 12, marginBottom: 2 }}>\n                        {log}\n                    </Text>\n                ))}\n                {logs.length === 0 && (\n                    <Text style={{ fontSize: 12, color: '#666' }}>\n                        No logs yet. Press \"Test Connection\" to start.\n                    </Text>\n                )}\n            </ScrollView>\n\n            <Button \n                mode=\"contained\" \n                onPress={onDismiss}\n                style={{ marginTop: 20 }}\n            >\n                Close\n            </Button>\n        </Modal>\n    );\n};\n\nconst StatusRow = ({ label, value, text = false }) => (\n    <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 5 }}>\n        <Text>{label}:</Text>\n        {text ? (\n            <Text style={{ fontWeight: 'bold' }}>{value}</Text>\n        ) : (\n            <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                <Icon \n                    name={value ? 'check-circle' : 'close-circle'} \n                    size={16} \n                    color={value ? colors.success : colors.error} \n                />\n                <Text style={{ marginLeft: 5 }}>{value ? 'Yes' : 'No'}</Text>\n            </View>\n        )}\n    </View>\n);\n\nexport default ConnectionDebugModal;","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/forums/ForumDetailScreen.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":14,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":10},{"ruleId":"no-unused-vars","severity":2,"message":"'Avatar' is defined but never used.","line":17,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":17,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":23},{"ruleId":"import/order","severity":2,"message":"`../../utils` import should occur before import of `../../utils/alerts`","line":28,"column":1,"nodeType":"ImportDeclaration","endLine":28,"endColumn":48,"fix":{"range":[946,1047],"text":"import { devLog, devError } from '../../utils';\nimport { showErrorAlert } from '../../utils/alerts';\n"}},{"ruleId":"no-unused-vars","severity":2,"message":"'onlineUsers' is assigned a value but never used.","line":42,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'connectionError' is assigned a value but never used.","line":43,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":27},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginRight: 15 }","line":56,"column":28,"nodeType":"ObjectExpression","endLine":56,"endColumn":47},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'cleanupSocketListeners', 'initializeChat', 'navigation', 'roomTitle', and 'theme.colors.primary'. Either include them or remove the dependency array.","line":76,"column":8,"nodeType":"ArrayExpression","endLine":76,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [cleanupSocketListeners, initializeChat, navigation, roomId, roomTitle, theme.colors.primary]","fix":{"range":[2764,2772],"text":"[cleanupSocketListeners, initializeChat, navigation, roomId, roomTitle, theme.colors.primary]"}}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// frontend/src/screens/forums/ForumDetailScreen.js\nimport { format } from 'date-fns';\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport {\n    View,\n    Text,\n    FlatList,\n    TextInput,\n    TouchableOpacity,\n    KeyboardAvoidingView,\n    Platform,\n    SafeAreaView,\n    ActivityIndicator,\n    Alert,\n} from 'react-native';\nimport { Menu, Divider } from 'react-native-paper';\nimport { Avatar, Badge } from 'react-native-paper';\n\nimport Icon from '../../components/common/Icon.js';\nimport { SCREEN_NAMES } from '../../constants/routes';\nimport chatService from '../../services/chatService';\nimport personalChatService from '../../services/personalChatService';\nimport socketService from '../../services/socketService';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { useTheme } from '../../store/contexts/ThemeContext';\nimport { chatRoomStyles } from '../../styles/screens/chat/ChatRoomStyles';\nimport { showErrorAlert } from '../../utils/alerts';\nimport { devLog, devError } from '../../utils';\n\nconst ForumDetailScreen = ({ route, navigation }) => {\n    const theme = useTheme();\n    const styles = chatRoomStyles(theme);\n    const { user } = useAuth();\n    const { roomId, roomTitle } = route.params;\n\n    const [menuVisible, setMenuVisible] = useState({});\n    const [messages, setMessages] = useState([]);\n    const [inputText, setInputText] = useState('');\n    const [loading, setLoading] = useState(true);\n    const [sending, setSending] = useState(false);\n    const [typingUsers, setTypingUsers] = useState([]);\n    const [onlineUsers, setOnlineUsers] = useState([]);\n    const [connectionError, setConnectionError] = useState(false);\n    const [connectionStatus, setConnectionStatus] = useState('connecting');\n\n    const flatListRef = useRef(null);\n    const typingTimeoutRef = useRef(null);\n\n    useEffect(() => {\n        // Set navigation header\n        navigation.setOptions({\n            title: roomTitle,\n            headerRight: () => (\n                <TouchableOpacity\n                    onPress={() => navigation.navigate('ChatInfo', { roomId, roomTitle })}\n                    style={{ marginRight: 15 }}\n                >\n                    <Icon name=\"information-outline\" size={24} color={theme.colors.primary} />\n                </TouchableOpacity>\n            ),\n        });\n\n        // Connect to socket and join room\n        initializeChat();\n\n        return () => {\n            // Leave room and cleanup\n            if (socketService.isConnected()) {\n                socketService.leaveRoom(roomId);\n            }\n            cleanupSocketListeners();\n            if (typingTimeoutRef.current) {\n                clearTimeout(typingTimeoutRef.current);\n            }\n        };\n    }, [roomId]);\n\n    // Add connection status listener\n    useEffect(() => {\n        const handleConnectionChange = (status) => {\n            setConnectionStatus(status);\n        };\n\n        socketService.on('connect', () => handleConnectionChange('connected'));\n        socketService.on('disconnect', () => handleConnectionChange('disconnected'));\n        socketService.on('reconnecting', () => handleConnectionChange('reconnecting'));\n\n        return () => {\n            socketService.off('connect', handleConnectionChange);\n            socketService.off('disconnect', handleConnectionChange);\n            socketService.off('reconnecting', handleConnectionChange);\n        };\n    }, []);\n\n    const handleStartChat = async (senderId, senderName) => {\n        try {\n            // Start or get existing conversation\n            const conversation = await personalChatService.startConversation(senderId);\n\n            // Navigate to personal chat\n            navigation.navigate(SCREEN_NAMES.PERSONAL_CHAT, {\n                screen: SCREEN_NAMES.PERSONAL_CHAT_DETAIL,\n                params: {\n                    userId: senderId,\n                    userName: senderName,\n                    conversationId: conversation.conversationId,\n                },\n            });\n        } catch (error) {\n            devError('ForumDetail', 'Failed to start conversation', error);\n            showErrorAlert('Error', 'Failed to start conversation');\n        }\n    };\n\n    const initializeChat = async () => {\n        try {\n            setConnectionError(false);\n\n            // In development with mock mode, skip socket connection\n            if (__DEV__ && !socketService.isConnected()) {\n                devLog('ForumDetail', 'Development mode: Using mock data');\n                setConnectionError(false);\n\n                // Load initial messages from API/Mock\n                try {\n                    const initialMessages = await chatService.getRoomMessages(roomId);\n                    // Ensure messages is always an array\n                    setMessages(Array.isArray(initialMessages) ? initialMessages : []);\n                } catch (error) {\n                    devError('ForumDetail', 'Failed to load messages', error);\n                    setMessages([]);\n                }\n\n                setLoading(false);\n                return;\n            }\n\n            // Production mode or when socket is needed\n            if (!socketService.isConnected()) {\n                devLog('ForumDetail', 'Attempting to connect socket...');\n                try {\n                    await socketService.connect(user._id);\n                    devLog('ForumDetail', 'Socket connected successfully');\n                } catch (error) {\n                    devError('ForumDetail', 'Socket connection failed', error);\n                    setConnectionError(true);\n                    // Continue anyway to load messages from API\n                }\n            }\n\n            // Join the room if connected\n            if (socketService.isConnected()) {\n                socketService.joinRoom(roomId);\n                // Setup socket listeners\n                setupSocketListeners();\n            }\n\n            // Load initial messages from API (works even without socket)\n            try {\n                const initialMessages = await chatService.getRoomMessages(roomId);\n                // Ensure messages is always an array\n                setMessages(Array.isArray(initialMessages) ? initialMessages : []);\n            } catch (error) {\n                devError('ForumDetail', 'Failed to load messages', error);\n                setMessages([]);\n            }\n\n            setLoading(false);\n        } catch (error) {\n            devError('ForumDetail', 'Failed to initialize chat', error);\n            setLoading(false);\n            setConnectionError(true);\n            setMessages([]);\n        }\n    };\n\n    const setupSocketListeners = () => {\n        socketService.on('newMessage', handleNewMessage);\n        socketService.on('messageDeleted', handleMessageDeleted);\n        socketService.on('userTyping', handleUserTyping);\n        socketService.on('roomUsers', handleRoomUsers);\n    };\n\n    const cleanupSocketListeners = () => {\n        socketService.off('newMessage', handleNewMessage);\n        socketService.off('messageDeleted', handleMessageDeleted);\n        socketService.off('userTyping', handleUserTyping);\n        socketService.off('roomUsers', handleRoomUsers);\n    };\n\n    const handleNewMessage = useCallback((message) => {\n        setMessages((prev) => {\n            // Ensure prev is an array\n            const prevMessages = Array.isArray(prev) ? prev : [];\n            return [...prevMessages, message];\n        });\n        setTimeout(() => {\n            flatListRef.current?.scrollToEnd({ animated: true });\n        }, 100);\n    }, []);\n\n    const handleMessageDeleted = useCallback(({ messageId }) => {\n        setMessages((prev) => {\n            // Ensure prev is an array\n            const prevMessages = Array.isArray(prev) ? prev : [];\n            return prevMessages.map((msg) =>\n                msg._id === messageId ? { ...msg, deleted: true } : msg,\n            );\n        });\n    }, []);\n\n    const handleUserTyping = useCallback(({ userId, isTyping }) => {\n        setTypingUsers((prev) => {\n            // Ensure prev is an array\n            const prevUsers = Array.isArray(prev) ? prev : [];\n            if (isTyping) {\n                return prevUsers.includes(userId) ? prevUsers : [...prevUsers, userId];\n            } else {\n                return prevUsers.filter((id) => id !== userId);\n            }\n        });\n    }, []);\n\n    const handleRoomUsers = useCallback((users) => {\n        // Ensure users is an array\n        setOnlineUsers(Array.isArray(users) ? users : []);\n    }, []);\n\n    const sendMessage = async () => {\n        if (!inputText.trim() || sending) return;\n\n        const messageText = inputText.trim();\n        setInputText('');\n        setSending(true);\n\n        try {\n            if (socketService.isConnected()) {\n                socketService.sendMessage({\n                    roomId,\n                    content: messageText,\n                    type: 'text',\n                });\n            } else {\n                // Fallback to API\n                await chatService.sendMessage(roomId, messageText);\n                // Reload messages\n                const updatedMessages = await chatService.getRoomMessages(roomId);\n                setMessages(Array.isArray(updatedMessages) ? updatedMessages : []);\n            }\n        } catch (error) {\n            devError('ForumDetail', 'Failed to send message', error);\n            showErrorAlert('Error', 'Failed to send message');\n            setInputText(messageText);\n        } finally {\n            setSending(false);\n        }\n    };\n\n    const handleTyping = (text) => {\n        setInputText(text);\n\n        if (typingTimeoutRef.current) {\n            clearTimeout(typingTimeoutRef.current);\n        }\n\n        if (text.trim() && socketService.isConnected()) {\n            socketService.typing(roomId, true);\n            typingTimeoutRef.current = setTimeout(() => {\n                socketService.typing(roomId, false);\n            }, 3000);\n        } else if (socketService.isConnected()) {\n            socketService.typing(roomId, false);\n        }\n    };\n\n    const renderMessage = ({ item, index }) => {\n        if (!item || !item.sender || !user) return null;\n\n        const isOwnMessage = item.sender._id === user._id;\n        const messageList = Array.isArray(messages) ? messages : [];\n        const showAvatar = index === 0 || messageList[index - 1]?.sender._id !== item.sender._id;\n\n        // Group messages by time (5 minute intervals)\n        const showTimestamp =\n            index === 0 ||\n            (messageList[index - 1] &&\n                new Date(item.createdAt) - new Date(messageList[index - 1]?.createdAt) > 300000);\n\n        if (item.deleted) {\n            return (\n                <View style={[styles.messageContainer, isOwnMessage && styles.ownMessageContainer]}>\n                    <Text style={styles.deletedMessage}>Message deleted</Text>\n                </View>\n            );\n        }\n\n        return (\n            <>\n                {showTimestamp && (\n                    <View style={styles.timestampContainer}>\n                        <Text style={styles.timestamp}>\n                            {format(new Date(item.createdAt), 'HH:mm')}\n                        </Text>\n                    </View>\n                )}\n\n                <View style={[styles.messageContainer, isOwnMessage && styles.ownMessageContainer]}>\n                    {showAvatar && !isOwnMessage && (\n                        <Menu\n                            visible={menuVisible[item._id] || false}\n                            onDismiss={() =>\n                                setMenuVisible((prev) => ({ ...prev, [item._id]: false }))\n                            }\n                            anchor={\n                                <TouchableOpacity\n                                    style={styles.avatarContainer}\n                                    onPress={() =>\n                                        setMenuVisible((prev) => ({ ...prev, [item._id]: true }))\n                                    }\n                                    onLongPress={() =>\n                                        setMenuVisible((prev) => ({ ...prev, [item._id]: true }))\n                                    }\n                                >\n                                    <View style={styles.avatar}>\n                                        <Text style={styles.avatarText}>\n                                            {item.sender.name.charAt(0).toUpperCase()}\n                                        </Text>\n                                    </View>\n                                </TouchableOpacity>\n                            }\n                            contentStyle={styles.menuContent}\n                        >\n                            <Menu.Item\n                                onPress={() => {\n                                    setMenuVisible((prev) => ({ ...prev, [item._id]: false }));\n                                    navigation.navigate(SCREEN_NAMES.USER_PROFILE, {\n                                        userId: item.sender._id,\n                                        userName: item.sender.name,\n                                    });\n                                }}\n                                title=\"View Profile\"\n                                leadingIcon=\"account\"\n                            />\n                            <Divider />\n                            <Menu.Item\n                                onPress={() => {\n                                    setMenuVisible((prev) => ({ ...prev, [item._id]: false }));\n                                    handleStartChat(item.sender._id, item.sender.name);\n                                }}\n                                title=\"Start Chatting\"\n                                leadingIcon=\"message\"\n                            />\n                        </Menu>\n                    )}\n\n                    <View\n                        style={[\n                            styles.messageBubble,\n                            isOwnMessage && styles.ownMessageBubble,\n                            !showAvatar && !isOwnMessage && styles.messageBubbleWithoutAvatar,\n                        ]}\n                    >\n                        {!isOwnMessage && showAvatar && (\n                            <TouchableOpacity\n                                onPress={() =>\n                                    setMenuVisible((prev) => ({ ...prev, [item._id]: true }))\n                                }\n                            >\n                                <Text style={styles.senderName}>{item.sender.name}</Text>\n                            </TouchableOpacity>\n                        )}\n\n                        <Text style={[styles.messageText, isOwnMessage && styles.ownMessageText]}>\n                            {item.content}\n                        </Text>\n\n                        {isOwnMessage && (\n                            <View style={styles.messageStatus}>\n                                <Icon\n                                    name={item.readBy?.length > 1 ? 'check-all' : 'check'}\n                                    size={16}\n                                    color={item.readBy?.length > 1 ? '#60A5FA' : '#FFFFFF99'}\n                                />\n                            </View>\n                        )}\n                    </View>\n                </View>\n            </>\n        );\n    };\n\n    const renderTypingIndicator = () => {\n        const typingUsersList = Array.isArray(typingUsers) ? typingUsers : [];\n        if (typingUsersList.length === 0) return null;\n\n        return (\n            <View style={styles.typingContainer}>\n                <View style={styles.typingDots}>\n                    <View style={[styles.dot, styles.dot1]} />\n                    <View style={[styles.dot, styles.dot2]} />\n                    <View style={[styles.dot, styles.dot3]} />\n                </View>\n                <Text style={styles.typingText}>\n                    {typingUsersList.length === 1\n                        ? 'Someone is typing'\n                        : 'Multiple people are typing'}\n                </Text>\n            </View>\n        );\n    };\n\n    if (loading) {\n        return (\n            <View style={styles.loadingContainer}>\n                <ActivityIndicator size=\"large\" color={theme.colors.primary} />\n            </View>\n        );\n    }\n\n    // Ensure messages is always an array\n    const messageList = Array.isArray(messages) ? messages : [];\n\n    return (\n        <SafeAreaView style={styles.container}>\n            {connectionStatus !== 'connected' && (\n                <View style={styles.connectionStatus}>\n                    <Text style={styles.connectionStatusText}>\n                        {connectionStatus === 'reconnecting' ? 'Reconnecting...' : 'Offline Mode'}\n                    </Text>\n                </View>\n            )}\n\n            <KeyboardAvoidingView\n                style={styles.container}\n                behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n                keyboardVerticalOffset={Platform.OS === 'ios' ? 90 : 0}\n            >\n                <FlatList\n                    ref={flatListRef}\n                    data={messageList}\n                    renderItem={renderMessage}\n                    keyExtractor={(item) => item?._id || String(Math.random())}\n                    contentContainerStyle={styles.messagesList}\n                    showsVerticalScrollIndicator={false}\n                    onContentSizeChange={() =>\n                        flatListRef.current?.scrollToEnd({ animated: false })\n                    }\n                    ListFooterComponent={renderTypingIndicator}\n                    extraData={menuVisible}\n                />\n\n                <View style={styles.inputContainer}>\n                    <View style={styles.inputWrapper}>\n                        <TextInput\n                            style={styles.input}\n                            value={inputText}\n                            onChangeText={handleTyping}\n                            placeholder=\"Type a message\"\n                            placeholderTextColor={theme.colors.textSecondary}\n                            multiline\n                            maxLength={1000}\n                            onSubmitEditing={sendMessage}\n                            blurOnSubmit={false}\n                        />\n\n                        <TouchableOpacity\n                            onPress={sendMessage}\n                            disabled={!inputText.trim() || sending}\n                            style={[\n                                styles.sendButton,\n                                (!inputText.trim() || sending) && styles.sendButtonDisabled,\n                            ]}\n                        >\n                            <Icon\n                                name=\"send\"\n                                size={24}\n                                color={\n                                    inputText.trim() && !sending\n                                        ? theme.colors.primary\n                                        : theme.colors.disabled\n                                }\n                            />\n                        </TouchableOpacity>\n                    </View>\n                </View>\n            </KeyboardAvoidingView>\n        </SafeAreaView>\n    );\n};\n\nexport default React.memo(ForumDetailScreen);\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/forums/ForumScreen.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Platform' is defined but never used.","line":10,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Portal' is defined but never used.","line":15,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":18,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'Provider' is defined but never used.","line":21,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":13},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":27,"column":1,"nodeType":"ImportDeclaration","endLine":27,"endColumn":69,"fix":{"range":[575,575],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":28,"column":1,"nodeType":"ImportDeclaration","endLine":28,"endColumn":59,"fix":{"range":[634,634],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`./ConnectionDebugModal` import should occur after import of `../../hooks/useSocketEvents`","line":28,"column":1,"nodeType":"ImportDeclaration","endLine":28,"endColumn":59,"fix":{"range":[576,1358],"text":"import { colors } from '../../constants/theme';\nimport forumService from '../../services/forumService';\nimport socketService from '../../services/socketService';\nimport realtimeService from '../../services/realtimeService';\nimport apiClient from '../../services/api/client';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { useTheme } from '../../store/contexts/ThemeContext';\nimport { forumsStyles as createStyles } from '../../styles/screens/forums/ForumScreenStyles';\nimport { showErrorAlert, showSuccessAlert } from '../../utils/alerts';\nimport { debounce } from '../../utils/debounce';\nimport { devError, devWarn } from '../../utils';\nimport { useSocketEvents } from '../../hooks/useSocketEvents';\nimport ConnectionDebugModal from './ConnectionDebugModal';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../services/forumService` import should occur after import of `../../hooks/useSocketEvents`","line":30,"column":1,"nodeType":"ImportDeclaration","endLine":30,"endColumn":56,"fix":{"range":[683,1358],"text":"import socketService from '../../services/socketService';\nimport realtimeService from '../../services/realtimeService';\nimport apiClient from '../../services/api/client';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { useTheme } from '../../store/contexts/ThemeContext';\nimport { forumsStyles as createStyles } from '../../styles/screens/forums/ForumScreenStyles';\nimport { showErrorAlert, showSuccessAlert } from '../../utils/alerts';\nimport { debounce } from '../../utils/debounce';\nimport { devError, devWarn } from '../../utils';\nimport { useSocketEvents } from '../../hooks/useSocketEvents';\nimport forumService from '../../services/forumService';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../services/socketService` import should occur after import of `../../hooks/useSocketEvents`","line":31,"column":1,"nodeType":"ImportDeclaration","endLine":31,"endColumn":58,"fix":{"range":[739,1358],"text":"import realtimeService from '../../services/realtimeService';\nimport apiClient from '../../services/api/client';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { useTheme } from '../../store/contexts/ThemeContext';\nimport { forumsStyles as createStyles } from '../../styles/screens/forums/ForumScreenStyles';\nimport { showErrorAlert, showSuccessAlert } from '../../utils/alerts';\nimport { debounce } from '../../utils/debounce';\nimport { devError, devWarn } from '../../utils';\nimport { useSocketEvents } from '../../hooks/useSocketEvents';\nimport socketService from '../../services/socketService';\n"}},{"ruleId":"no-unused-vars","severity":2,"message":"'socketService' is defined but never used.","line":31,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":21},{"ruleId":"import/order","severity":2,"message":"`../../services/realtimeService` import should occur after import of `../../hooks/useSocketEvents`","line":32,"column":1,"nodeType":"ImportDeclaration","endLine":32,"endColumn":62,"fix":{"range":[797,1358],"text":"import apiClient from '../../services/api/client';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { useTheme } from '../../store/contexts/ThemeContext';\nimport { forumsStyles as createStyles } from '../../styles/screens/forums/ForumScreenStyles';\nimport { showErrorAlert, showSuccessAlert } from '../../utils/alerts';\nimport { debounce } from '../../utils/debounce';\nimport { devError, devWarn } from '../../utils';\nimport { useSocketEvents } from '../../hooks/useSocketEvents';\nimport realtimeService from '../../services/realtimeService';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../services/api/client` import should occur after import of `../../hooks/useSocketEvents`","line":33,"column":1,"nodeType":"ImportDeclaration","endLine":33,"endColumn":51,"fix":{"range":[859,1358],"text":"import { useAuth } from '../../store/contexts/AuthContext';\nimport { useTheme } from '../../store/contexts/ThemeContext';\nimport { forumsStyles as createStyles } from '../../styles/screens/forums/ForumScreenStyles';\nimport { showErrorAlert, showSuccessAlert } from '../../utils/alerts';\nimport { debounce } from '../../utils/debounce';\nimport { devError, devWarn } from '../../utils';\nimport { useSocketEvents } from '../../hooks/useSocketEvents';\nimport apiClient from '../../services/api/client';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../store/contexts/AuthContext` import should occur after import of `../../hooks/useSocketEvents`","line":34,"column":1,"nodeType":"ImportDeclaration","endLine":34,"endColumn":60,"fix":{"range":[910,1358],"text":"import { useTheme } from '../../store/contexts/ThemeContext';\nimport { forumsStyles as createStyles } from '../../styles/screens/forums/ForumScreenStyles';\nimport { showErrorAlert, showSuccessAlert } from '../../utils/alerts';\nimport { debounce } from '../../utils/debounce';\nimport { devError, devWarn } from '../../utils';\nimport { useSocketEvents } from '../../hooks/useSocketEvents';\nimport { useAuth } from '../../store/contexts/AuthContext';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../store/contexts/ThemeContext` import should occur after import of `../../hooks/useSocketEvents`","line":35,"column":1,"nodeType":"ImportDeclaration","endLine":35,"endColumn":62,"fix":{"range":[970,1358],"text":"import { forumsStyles as createStyles } from '../../styles/screens/forums/ForumScreenStyles';\nimport { showErrorAlert, showSuccessAlert } from '../../utils/alerts';\nimport { debounce } from '../../utils/debounce';\nimport { devError, devWarn } from '../../utils';\nimport { useSocketEvents } from '../../hooks/useSocketEvents';\nimport { useTheme } from '../../store/contexts/ThemeContext';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../styles/screens/forums/ForumScreenStyles` import should occur after import of `../../hooks/useSocketEvents`","line":36,"column":1,"nodeType":"ImportDeclaration","endLine":36,"endColumn":94,"fix":{"range":[1032,1358],"text":"import { showErrorAlert, showSuccessAlert } from '../../utils/alerts';\nimport { debounce } from '../../utils/debounce';\nimport { devError, devWarn } from '../../utils';\nimport { useSocketEvents } from '../../hooks/useSocketEvents';\nimport { forumsStyles as createStyles } from '../../styles/screens/forums/ForumScreenStyles';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../utils/alerts` import should occur after import of `../../hooks/useSocketEvents`","line":37,"column":1,"nodeType":"ImportDeclaration","endLine":37,"endColumn":71,"fix":{"range":[1126,1358],"text":"import { debounce } from '../../utils/debounce';\nimport { devError, devWarn } from '../../utils';\nimport { useSocketEvents } from '../../hooks/useSocketEvents';\nimport { showErrorAlert, showSuccessAlert } from '../../utils/alerts';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../utils/debounce` import should occur after import of `../../hooks/useSocketEvents`","line":38,"column":1,"nodeType":"ImportDeclaration","endLine":38,"endColumn":49,"fix":{"range":[1197,1358],"text":"import { devError, devWarn } from '../../utils';\nimport { useSocketEvents } from '../../hooks/useSocketEvents';\nimport { debounce } from '../../utils/debounce';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../utils` import should occur after import of `../../hooks/useSocketEvents`","line":39,"column":1,"nodeType":"ImportDeclaration","endLine":39,"endColumn":49,"fix":{"range":[1246,1358],"text":"import { useSocketEvents } from '../../hooks/useSocketEvents';\nimport { devError, devWarn } from '../../utils';\n"}},{"ruleId":"no-unused-vars","severity":2,"message":"'isSearching' is assigned a value but never used.","line":171,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":171,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'setIsSearching' is assigned a value but never used.","line":171,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":171,"endColumn":39},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":280,"column":74,"nodeType":"ArrowFunctionExpression","messageId":"missing","endLine":281,"endColumn":1,"fix":{"range":[11406,11433],"text":"forum,\n                    )"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":281,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"missing","endLine":282,"endColumn":1,"fix":{"range":[11432,11451],"text":"),\n                )"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":284,"column":25,"nodeType":"Property","messageId":"missing","endLine":285,"endColumn":1,"fix":{"range":[11490,11497],"text":"),\n    }"}},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { textDecorationLine: 'underline', marginLeft: 5 }","line":467,"column":69,"nodeType":"ObjectExpression","endLine":467,"endColumn":119},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'connectionMode'. Either include it or remove the dependency array.","line":486,"column":9,"nodeType":"ArrayExpression","endLine":486,"endColumn":71,"suggestions":[{"desc":"Update the dependencies array to be: [styles.header, styles.headerTitle, styles.headerSubtitle, styles.connectionWarning, styles.connectionWarningText, styles.searchBar, styles.searchInput, isConnected, connectionMode, handleSearch, displaySearchQuery, theme.colors.primary]","fix":{"range":[18563,18625],"text":"[styles.header, styles.headerTitle, styles.headerSubtitle, styles.connectionWarning, styles.connectionWarningText, styles.searchBar, styles.searchInput, isConnected, connectionMode, handleSearch, displaySearchQuery, theme.colors.primary]"}}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { elevation: 5 }","line":549,"column":59,"nodeType":"ObjectExpression","endLine":549,"endColumn":75},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { minHeight: 100, textAlignVertical: 'top' }","line":576,"column":47,"nodeType":"ObjectExpression","endLine":576,"endColumn":91}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":16,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';\nimport {\n    View,\n    Text,\n    FlatList,\n    TouchableOpacity,\n    RefreshControl,\n    SafeAreaView,\n    Animated,\n    Platform,\n} from 'react-native';\nimport {\n    Card,\n    FAB,\n    Portal,\n    Modal,\n    Button,\n    Chip,\n    TextInput,\n    Badge,\n    Provider,\n    Searchbar,\n} from 'react-native-paper';\n\nimport EmptyState from '../../components/common/EmptyState';\nimport Icon from '../../components/common/Icon.js';\nimport LoadingSpinner from '../../components/common/LoadingSpinner';\nimport ConnectionDebugModal from './ConnectionDebugModal';\nimport { colors } from '../../constants/theme';\nimport forumService from '../../services/forumService';\nimport socketService from '../../services/socketService';\nimport realtimeService from '../../services/realtimeService';\nimport apiClient from '../../services/api/client';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { useTheme } from '../../store/contexts/ThemeContext';\nimport { forumsStyles as createStyles } from '../../styles/screens/forums/ForumScreenStyles';\nimport { showErrorAlert, showSuccessAlert } from '../../utils/alerts';\nimport { debounce } from '../../utils/debounce';\nimport { devError, devWarn } from '../../utils';\nimport { useSocketEvents } from '../../hooks/useSocketEvents';\n\n// Add formatRelativeTime helper function\nconst formatRelativeTime = (dateString) => {\n    if (!dateString) return '';\n\n    try {\n        const date = new Date(dateString);\n        const now = new Date();\n        const diffInMs = now - date;\n        const diffInMinutes = Math.floor(diffInMs / 60000);\n        const diffInHours = Math.floor(diffInMinutes / 60);\n        const diffInDays = Math.floor(diffInHours / 24);\n\n        if (diffInMinutes < 1) return 'just now';\n        if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n        if (diffInHours < 24) return `${diffInHours}h ago`;\n        if (diffInDays < 7) return `${diffInDays}d ago`;\n\n        return date.toLocaleDateString();\n    } catch (error) {\n        devError('ForumScreen', 'Error formatting date', error);\n        return '';\n    }\n};\n\n// Group Item Component with animation\nconst GroupItem = React.memo(({ item, onPress, styles, index }) => {\n    const fadeAnim = useRef(new Animated.Value(0)).current;\n\n    useEffect(() => {\n        Animated.timing(fadeAnim, {\n            toValue: 1,\n            duration: 300,\n            delay: index * 50,\n            useNativeDriver: true,\n        }).start();\n    }, [fadeAnim, index]);\n\n    if (!item || !item._id || !item.title) {\n        return null;\n    }\n\n    const unreadCount = item.unreadCount || 0;\n    const onlineCount = item.onlineCount || 0;\n\n    return (\n        <Animated.View style={{ opacity: fadeAnim }}>\n            <TouchableOpacity onPress={() => onPress(item)} activeOpacity={0.7}>\n                <Card style={styles.forumCard}>\n                    <Card.Content>\n                        <View style={styles.forumHeader}>\n                            <View style={styles.forumInfo}>\n                                <View style={styles.titleRow}>\n                                    <Text style={styles.forumTitle} numberOfLines={2}>\n                                        {item.title}\n                                    </Text>\n                                    {unreadCount > 0 && (\n                                        <Badge style={styles.unreadBadge}>\n                                            <Text style={styles.unreadBadgeText}>\n                                                {unreadCount > 99 ? '99+' : unreadCount.toString()}\n                                            </Text>\n                                        </Badge>\n                                    )}\n                                </View>\n\n                                {item.lastMessage ? (\n                                    <Text style={styles.lastMessage} numberOfLines={1}>\n                                        <Text style={styles.lastMessageSender}>\n                                            {item.lastMessage.sender?.name || 'Unknown'}:\n                                        </Text>\n                                        <Text> {item.lastMessage.content || ''}</Text>\n                                    </Text>\n                                ) : (\n                                    <Text style={styles.forumDescription} numberOfLines={2}>\n                                        {item.description || ''}\n                                    </Text>\n                                )}\n\n                                <View style={styles.forumMeta}>\n                                    {item.lastMessage && item.lastMessage.createdAt && (\n                                        <Text style={styles.lastMessageTime}>\n                                            {formatRelativeTime(item.lastMessage.createdAt)}\n                                        </Text>\n                                    )}\n                                    <View style={styles.metaItem}>\n                                        <Icon\n                                            name=\"account-group\"\n                                            size={14}\n                                            color={colors.textSecondary}\n                                        />\n                                        <Text style={styles.metaText}>{onlineCount} online</Text>\n                                    </View>\n                                    {item.messageCount > 0 && (\n                                        <View style={styles.metaItem}>\n                                            <Icon\n                                                name=\"message-text\"\n                                                size={14}\n                                                color={colors.textSecondary}\n                                            />\n                                            <Text style={styles.metaText}>\n                                                {item.messageCount} messages\n                                            </Text>\n                                        </View>\n                                    )}\n                                </View>\n                            </View>\n                            <Icon name=\"chevron-right\" size={24} color={colors.textSecondary} />\n                        </View>\n                    </Card.Content>\n                </Card>\n            </TouchableOpacity>\n        </Animated.View>\n    );\n});\n\nGroupItem.displayName = 'GroupItem';\n\nconst ForumScreen = ({ navigation }) => {\n    const theme = useTheme();\n    const { user } = useAuth();\n    const [isConnected, setIsConnected] = useState(false);\n    const [connectionMode, setConnectionMode] = useState('none');\n\n    const [forums, setForums] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [refreshing, setRefreshing] = useState(false);\n    const [modalVisible, setModalVisible] = useState(false);\n    const [submitting, setSubmitting] = useState(false);\n    const [searchQuery, setSearchQuery] = useState('');\n    const [displaySearchQuery, setDisplaySearchQuery] = useState('');\n    const [isSearching, setIsSearching] = useState(false);\n    const [debugModalVisible, setDebugModalVisible] = useState(false);\n\n    // Form state - kept in parent to avoid losing data\n    const [formData, setFormData] = useState({\n        title: '',\n        description: '',\n        tags: [],\n    });\n    const [formErrors, setFormErrors] = useState({});\n\n    // Memoize styles to prevent recreation\n    const styles = useMemo(() => createStyles(theme), [theme]);\n\n    // Filter forums based on search query\n    const filteredForums = useMemo(() => {\n        if (!searchQuery.trim()) return forums;\n\n        const query = searchQuery.toLowerCase();\n        return forums.filter(\n            (forum) =>\n                forum.title.toLowerCase().includes(query) ||\n                forum.description.toLowerCase().includes(query) ||\n                (forum.lastMessage?.content || '').toLowerCase().includes(query),\n        );\n    }, [forums, searchQuery]);\n\n    // Optimize data fetching with useCallback\n    const loadForums = useCallback(async () => {\n        try {\n            const data = await forumService.getForums();\n            const safeData = Array.isArray(data) ? data : [];\n            const validForums = safeData.filter(\n                (forum) => forum && typeof forum === 'object' && forum._id && forum.title,\n            );\n            setForums(validForums);\n        } catch (error) {\n            devError('ForumScreen', 'Failed to load groups', error);\n            setForums([]);\n        } finally {\n            setLoading(false);\n            setRefreshing(false);\n        }\n    }, []);\n\n    // Socket event handlers\n    const socketEventHandlers = {\n        'new_message': useCallback((data) => {\n            // Clear API cache for forums and messages\n            apiClient.clearCache('/forums');\n            apiClient.clearCache('/messages');\n            apiClient.clearCache('/messages/conversations');\n            if (data.roomId) {\n                apiClient.clearCache(`/chat/rooms/${data.roomId}/messages`);\n            }\n            \n            setForums((prevForums) =>\n                prevForums\n                    .map((forum) => {\n                        if (forum._id === data.roomId) {\n                            return {\n                                ...forum,\n                                lastMessage: {\n                                    content: data.content,\n                                    sender: data.sender,\n                                    createdAt: data.createdAt,\n                                },\n                                unreadCount: forum.unreadCount + 1,\n                                lastActivity: data.createdAt,\n                            };\n                        }\n                        return forum;\n                    })\n                    .sort(\n                        (a, b) =>\n                            new Date(b.lastActivity || b.createdAt) -\n                            new Date(a.lastActivity || a.createdAt),\n                    ),\n            );\n        }, []),\n        \n        'room_update': useCallback((data) => {\n            if (data.type === 'online_count') {\n                setForums((prevForums) =>\n                    prevForums.map((forum) =>\n                        forum._id === data.roomId ? { ...forum, onlineCount: data.count } : forum,\n                    ),\n                );\n            }\n        }, []),\n        \n        'new_room': useCallback((room) => {\n            setForums((prevForums) => [room, ...prevForums]);\n        }, []),\n        \n        'forum_update': useCallback((data) => {\n            // Clear API cache for forums\n            apiClient.clearCache('/forums');\n            if (data.forum?._id) {\n                apiClient.clearCache(`/forums/${data.forum._id}`);\n            }\n            \n            if (data.type === 'create') {\n                // Reload to get fresh data\n                loadForums();\n            } else if (data.type === 'update') {\n                // Update existing forum\n                setForums((prevForums) => \n                    prevForums.map(forum => \n                        forum._id === data.forum._id ? data.forum : forum\n                    )\n                );\n            }\n        }, [loadForums])\n    };\n    \n    // Use socket events hook\n    useSocketEvents(socketEventHandlers, [loadForums]);\n\n    useEffect(() => {\n        loadForums();\n        \n        // Setup connection state monitoring\n        const checkConnectionStatus = () => {\n            const status = realtimeService.getStatus();\n            setIsConnected(status.connected);\n            setConnectionMode(status.mode);\n        };\n        \n        // Check initial status\n        checkConnectionStatus();\n        \n        // Check periodically\n        const interval = setInterval(checkConnectionStatus, 3000);\n        \n        return () => {\n            clearInterval(interval);\n        };\n    }, [loadForums]);\n\n    const handleRefresh = useCallback(() => {\n        setRefreshing(true);\n        loadForums();\n    }, [loadForums]);\n\n    const handleForumPress = useCallback(\n        (forum) => {\n            if (!forum || !forum._id || !forum.title) {\n                devError('ForumScreen', 'Invalid group data', forum);\n                return;\n            }\n\n            // Mark messages as read\n            setForums((prevForums) =>\n                prevForums.map((f) => (f._id === forum._id ? { ...f, unreadCount: 0 } : f)),\n            );\n\n            navigation.navigate('ChatRoom', {\n                roomId: forum._id,\n                roomTitle: forum.title,\n            });\n        },\n        [navigation],\n    );\n\n    // Debounced search handler - update both display and search query\n    const debouncedSetSearchQuery = useMemo(\n        () =>\n            debounce((text) => {\n                setSearchQuery(text);\n            }, 300),\n        [],\n    );\n    \n    const handleSearch = useCallback((text) => {\n        setDisplaySearchQuery(text); // Update display immediately\n        debouncedSetSearchQuery(text); // Debounce actual search\n    }, [debouncedSetSearchQuery]);\n\n    // Fixed: Direct state updates without side effects\n    const handleTitleChange = useCallback(\n        (text) => {\n            setFormData((prev) => ({ ...prev, title: text || '' }));\n            if (formErrors.title) {\n                setFormErrors((prev) => ({ ...prev, title: null }));\n            }\n        },\n        [formErrors.title],\n    );\n\n    const handleDescriptionChange = useCallback(\n        (text) => {\n            setFormData((prev) => ({ ...prev, description: text || '' }));\n            if (formErrors.description) {\n                setFormErrors((prev) => ({ ...prev, description: null }));\n            }\n        },\n        [formErrors.description],\n    );\n\n    // Optimize validation\n    const validateForm = useCallback(() => {\n        const errors = {};\n        const trimmedTitle = (formData.title || '').trim();\n        const trimmedDescription = (formData.description || '').trim();\n\n        if (!trimmedTitle) {\n            errors.title = 'Group name is required';\n        } else if (trimmedTitle.length < 3) {\n            errors.title = 'Name must be at least 3 characters';\n        }\n\n        if (!trimmedDescription) {\n            errors.description = 'Group description is required';\n        } else if (trimmedDescription.length < 10) {\n            errors.description = 'Description must be at least 10 characters';\n        }\n\n        setFormErrors(errors);\n        return Object.keys(errors).length === 0;\n    }, [formData.title, formData.description]);\n\n    const handleCreateGroup = useCallback(async () => {\n        if (!validateForm()) return;\n\n        setSubmitting(true);\n        try {\n            const title = (formData.title || '').trim();\n            const description = (formData.description || '').trim();\n\n            await forumService.createForum(title, description);\n            showSuccessAlert('Success', 'Group created successfully!');\n            setModalVisible(false);\n            setFormData({ title: '', description: '', tags: [] });\n            setFormErrors({});\n            loadForums();\n        } catch (error) {\n            devError('ForumScreen', 'Failed to create group', error);\n            showErrorAlert('Error', error.message || 'Failed to create group');\n        } finally {\n            setSubmitting(false);\n        }\n    }, [formData.title, formData.description, validateForm, loadForums]);\n\n    const handleModalDismiss = useCallback(() => {\n        if (!submitting) {\n            setModalVisible(false);\n            setFormData({ title: '', description: '', tags: [] });\n            setFormErrors({});\n        }\n    }, [submitting]);\n\n    const keyExtractor = useCallback((item) => {\n        if (!item || !item._id) {\n            devWarn('ForumScreen', 'Invalid item in groups list', item);\n            return String(Math.random());\n        }\n        return item._id;\n    }, []);\n\n    const renderItem = useCallback(\n        ({ item, index }) => {\n            if (!item) return null;\n\n            return (\n                <GroupItem item={item} onPress={handleForumPress} styles={styles} index={index} />\n            );\n        },\n        [handleForumPress, styles],\n    );\n\n    const ListHeaderComponent = useMemo(\n        () => (\n            <View style={styles.header}>\n                <Text style={styles.headerTitle}>Chat Groups</Text>\n                <Text style={styles.headerSubtitle}>\n                    Join conversations and connect in real-time\n                </Text>\n\n                {(!isConnected || connectionMode === 'polling') && (\n                    <TouchableOpacity \n                        style={[styles.connectionWarning, connectionMode === 'polling' && { backgroundColor: colors.info + '20' }]}\n                        onPress={() => setDebugModalVisible(true)}\n                        activeOpacity={0.8}\n                    >\n                        <Icon \n                            name={connectionMode === 'polling' ? 'refresh' : 'wifi-off'} \n                            size={16} \n                            color={connectionMode === 'polling' ? colors.info : colors.warning} \n                        />\n                        <Text style={styles.connectionWarningText}>\n                            {connectionMode === 'polling' \n                                ? 'Using polling mode (WebSocket unavailable)' \n                                : 'Connecting... Real-time updates may be delayed'\n                            }\n                        </Text>\n                        <Text style={[styles.connectionWarningText, { textDecorationLine: 'underline', marginLeft: 5 }]}>\n                            Details\n                        </Text>\n                    </TouchableOpacity>\n                )}\n\n                <Searchbar\n                    placeholder=\"Search groups...\"\n                    onChangeText={handleSearch}\n                    value={displaySearchQuery}\n                    style={styles.searchBar}\n                    iconColor={theme.colors.primary}\n                    inputStyle={styles.searchInput}\n                    elevation={1}\n                    autoCorrect={false}\n                    autoCapitalize=\"none\"\n                />\n            </View>\n        ),\n        [styles, displaySearchQuery, handleSearch, theme, isConnected],\n    );\n\n    const ListEmptyComponent = useMemo(\n        () => (\n            <EmptyState\n                icon={searchQuery ? 'magnify' : 'forum-outline'}\n                title={searchQuery ? 'No groups found' : 'No groups yet'}\n                message={\n                    searchQuery\n                        ? 'Try adjusting your search terms'\n                        : 'Be the first to create a group!'\n                }\n                action={\n                    !searchQuery && (\n                        <Button mode=\"contained\" onPress={() => setModalVisible(true)} icon=\"plus\">\n                            <Text>Create Group</Text>\n                        </Button>\n                    )\n                }\n            />\n        ),\n        [searchQuery],\n    );\n\n    if (loading && !refreshing) {\n        return <LoadingSpinner fullScreen text=\"Loading groups...\" />;\n    }\n\n    return (\n        <SafeAreaView style={styles.safeArea}>\n            <View style={styles.container}>\n                <FlatList\n                    data={filteredForums}\n                    renderItem={renderItem}\n                    keyExtractor={keyExtractor}\n                    contentContainerStyle={styles.listContent}\n                    refreshControl={\n                        <RefreshControl\n                            refreshing={refreshing}\n                            onRefresh={handleRefresh}\n                            tintColor={theme.colors.primary}\n                        />\n                    }\n                    showsVerticalScrollIndicator={false}\n                    ListHeaderComponent={ListHeaderComponent}\n                    ListEmptyComponent={ListEmptyComponent}\n                    removeClippedSubviews={true}\n                    maxToRenderPerBatch={10}\n                    updateCellsBatchingPeriod={50}\n                    windowSize={10}\n                    initialNumToRender={10}\n                    onError={(error) => {\n                        devError('ForumScreen', 'FlatList error', error);\n                    }}\n                />\n\n                <FAB icon=\"plus\" style={styles.fab} onPress={() => setModalVisible(true)} />\n\n                {/* Modal without Provider/Portal wrapper to fix rendering issue */}\n                <Modal\n                    visible={modalVisible}\n                    onDismiss={handleModalDismiss}\n                    contentContainerStyle={[styles.modal, { elevation: 5 }]}\n                    dismissable={!submitting}\n                    dismissableBackButton={!submitting}\n                >\n                    <Text style={styles.modalTitle}>Create New Group</Text>\n\n                    <TextInput\n                        label=\"Group Name\"\n                        value={formData.title || ''}\n                        onChangeText={handleTitleChange}\n                        mode=\"outlined\"\n                        style={styles.input}\n                        error={!!formErrors.title}\n                        disabled={submitting}\n                        theme={{ colors: { primary: theme.colors.primary } }}\n                        maxLength={100}\n                        autoCorrect={false}\n                    />\n                    {formErrors.title && <Text style={styles.errorText}>{formErrors.title}</Text>}\n\n                    <TextInput\n                        label=\"Group Description\"\n                        value={formData.description || ''}\n                        onChangeText={handleDescriptionChange}\n                        mode=\"outlined\"\n                        multiline\n                        numberOfLines={4}\n                        style={[styles.input, { minHeight: 100, textAlignVertical: 'top' }]}\n                        error={!!formErrors.description}\n                        disabled={submitting}\n                        theme={{ colors: { primary: theme.colors.primary } }}\n                        maxLength={500}\n                        autoCorrect={false}\n                        autoComplete=\"off\"\n                        blurOnSubmit={true}\n                        textAlignVertical=\"top\"\n                    />\n                    {formErrors.description && (\n                        <Text style={styles.errorText}>{formErrors.description}</Text>\n                    )}\n\n                    <View style={styles.modalButtons}>\n                        <Button\n                            mode=\"outlined\"\n                            onPress={handleModalDismiss}\n                            style={styles.modalButton}\n                            disabled={submitting}\n                        >\n                            <Text>Cancel</Text>\n                        </Button>\n                        <Button\n                            mode=\"contained\"\n                            onPress={handleCreateGroup}\n                            style={styles.modalButton}\n                            loading={submitting}\n                            disabled={submitting}\n                        >\n                            <Text>Create Group</Text>\n                        </Button>\n                    </View>\n                </Modal>\n\n                <ConnectionDebugModal\n                    visible={debugModalVisible}\n                    onDismiss={() => setDebugModalVisible(false)}\n                    userId={user?._id}\n                />\n            </View>\n        </SafeAreaView>\n    );\n};\n\nexport default React.memo(ForumScreen);\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/forums/ThreadDetailScreen.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'threadId' is assigned a value but never used.","line":8,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nimport { useTheme } from '../../store/contexts/ThemeContext';\n\nconst ThreadDetailScreen = ({ route }) => {\n    const theme = useTheme();\n    const { threadId, threadTitle } = route.params;\n\n    return (\n        <View style={[styles.container, { backgroundColor: theme.colors.background }]}>\n            <Text style={[styles.title, { color: theme.colors.text }]}>Thread: {threadTitle}</Text>\n            <Text style={[styles.placeholder, { color: theme.colors.textSecondary }]}>\n                Thread detail view coming soon...\n            </Text>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 20,\n    },\n    title: {\n        fontSize: 24,\n        fontWeight: 'bold',\n        marginBottom: 20,\n    },\n    placeholder: {\n        fontSize: 16,\n    },\n});\n\nexport default ThreadDetailScreen;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/main/DashboardScreen.js","messages":[{"ruleId":"import/order","severity":2,"message":"`../../utils` import should occur before import of `../../utils/formatting`","line":15,"column":1,"nodeType":"ImportDeclaration","endLine":15,"endColumn":40,"fix":{"range":[767,864],"text":"import { devError } from '../../utils';\nimport { formatCurrency } from '../../utils/formatting';\n"}},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":47,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { View, Text, ScrollView, RefreshControl, TouchableOpacity, FlatList } from 'react-native';\nimport { Card } from 'react-native-paper';\n\nimport Icon from '../../components/common/Icon.js';\nimport LoadingSpinner from '../../components/common/LoadingSpinner';\nimport { SCREEN_NAMES } from '../../constants/routes';\nimport budgetService from '../../services/budgetService';\nimport checklistService from '../../services/checklistService';\nimport eventService from '../../services/eventService';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { useTheme } from '../../store/contexts/ThemeContext';\nimport { dashboardStyles } from '../../styles/screens/main/DashboardScreenStyles';\nimport { formatCurrency } from '../../utils/formatting';\nimport { devError } from '../../utils';\n\n// Simple date formatting function\nconst formatEventDate = (dateString) => {\n    try {\n        const date = new Date(dateString);\n        const months = [\n            'Jan',\n            'Feb',\n            'Mar',\n            'Apr',\n            'May',\n            'Jun',\n            'Jul',\n            'Aug',\n            'Sep',\n            'Oct',\n            'Nov',\n            'Dec',\n        ];\n        return {\n            day: date.getDate(),\n            month: months[date.getMonth()],\n        };\n    } catch (error) {\n        return { day: '?', month: '???' };\n    }\n};\n\nconst DashboardScreen = ({ navigation }) => {\n    const theme = useTheme();\n    const styles = React.useMemo(() => dashboardStyles(theme), [theme]);\n    const { user } = useAuth();\n\n    const [loading, setLoading] = useState(true);\n    const [refreshing, setRefreshing] = useState(false);\n    const [dashboardData, setDashboardData] = useState({\n        upcomingEvents: [],\n        budgetSummary: null,\n        checklistProgress: null,\n        recentForumActivity: [],\n    });\n\n    const loadDashboardData = useCallback(async () => {\n        try {\n            const [eventsResponse, budgetData, checklistData] = await Promise.all([\n                eventService.getUpcomingEvents(5).catch(() => ({ events: [] })),\n                budgetService.getBudgetSummary('month').catch(() => null),\n                checklistService.getChecklist().catch(() => []),\n            ]);\n\n            const events = Array.isArray(eventsResponse)\n                ? eventsResponse\n                : eventsResponse?.events || [];\n\n            const checklistProgress =\n                checklistData.length > 0\n                    ? Math.round(\n                        (checklistData.filter((item) => item.isCompleted).length /\n                              checklistData.length) *\n                              100,\n                    )\n                    : 0;\n\n            setDashboardData({\n                upcomingEvents: events,\n                budgetSummary: budgetData,\n                checklistProgress,\n                recentForumActivity: [],\n            });\n        } catch (error) {\n            devError('Dashboard', 'Failed to load dashboard data', error);\n        } finally {\n            setLoading(false);\n            setRefreshing(false);\n        }\n    }, []);\n\n    useEffect(() => {\n        loadDashboardData();\n    }, [loadDashboardData]);\n\n    const onRefresh = useCallback(() => {\n        setRefreshing(true);\n        loadDashboardData();\n    }, [loadDashboardData]);\n\n    const renderEventCard = ({ item }) => {\n        if (!item) return null;\n\n        const { day, month } = formatEventDate(item.date);\n\n        return (\n            <TouchableOpacity\n                style={styles.eventCard}\n                onPress={() =>\n                    navigation.navigate(SCREEN_NAMES.EVENTS, {\n                        screen: 'EventDetail',\n                        params: { eventId: item._id },\n                    })\n                }\n                activeOpacity={0.7}\n            >\n                <View style={styles.eventDateBadge}>\n                    <Text style={styles.eventDateDay}>{day}</Text>\n                    <Text style={styles.eventDateMonth}>{month}</Text>\n                </View>\n                <View style={styles.eventInfo}>\n                    <Text style={styles.eventTitle} numberOfLines={1}>\n                        {item.title || 'Untitled Event'}\n                    </Text>\n                    <View style={styles.eventMeta}>\n                        <Icon\n                            name=\"clock-outline\"\n                            size={14}\n                            color={theme?.colors?.textSecondary || '#6B7280'}\n                        />\n                        <Text style={styles.eventTime}>{item.time || 'TBD'}</Text>\n                    </View>\n                    <View style={styles.eventMeta}>\n                        <Icon\n                            name=\"map-marker-outline\"\n                            size={14}\n                            color={theme?.colors?.textSecondary || '#6B7280'}\n                        />\n                        <Text style={styles.eventLocation} numberOfLines={1}>\n                            {item.location?.name || 'Location TBD'}\n                        </Text>\n                    </View>\n                    {item.attendees && (\n                        <View style={styles.eventAttendees}>\n                            <Icon\n                                name=\"account-group-outline\"\n                                size={14}\n                                color={theme?.colors?.textSecondary || '#6B7280'}\n                            />\n                            <Text style={styles.eventAttendeesText}>\n                                {item.attendees.length} attending\n                            </Text>\n                        </View>\n                    )}\n                </View>\n            </TouchableOpacity>\n        );\n    };\n\n    if (loading) {\n        return <LoadingSpinner fullScreen text=\"Loading Dashboard...\" />;\n    }\n\n    const { upcomingEvents, budgetSummary, checklistProgress } = dashboardData;\n\n    return (\n        <ScrollView\n            style={styles.container}\n            contentContainerStyle={styles.scrollView}\n            refreshControl={\n                <RefreshControl\n                    refreshing={refreshing}\n                    onRefresh={onRefresh}\n                    tintColor={theme?.colors?.primary || '#1E3A8A'}\n                />\n            }\n            showsVerticalScrollIndicator={false}\n        >\n            {/* Header with only profile button */}\n            <View style={styles.headerSection}>\n                <TouchableOpacity\n                    style={styles.profileButton}\n                    onPress={() => navigation.navigate(SCREEN_NAMES.PROFILE)}\n                >\n                    <Icon\n                        name=\"account-circle\"\n                        size={40}\n                        color={theme?.colors?.primary || '#1E3A8A'}\n                    />\n                </TouchableOpacity>\n            </View>\n\n            {/* Quick Stats */}\n            <View style={styles.statsContainer}>\n                <Card style={styles.statCard}>\n                    <TouchableOpacity\n                        onPress={() => navigation.navigate(SCREEN_NAMES.BUDGET)}\n                        style={styles.statContent}\n                    >\n                        <Icon name=\"wallet\" size={32} color={theme?.colors?.primary || '#1E3A8A'} />\n                        <Text style={styles.statNumber}>\n                            {budgetSummary ? formatCurrency(budgetSummary.balance || 0) : '€0'}\n                        </Text>\n                        <Text style={styles.statLabel}>Monthly Balance</Text>\n                    </TouchableOpacity>\n                </Card>\n\n                <Card style={styles.statCard}>\n                    <TouchableOpacity\n                        onPress={() => navigation.navigate(SCREEN_NAMES.CHECKLIST)}\n                        style={styles.statContent}\n                    >\n                        <Icon\n                            name=\"clipboard-check\"\n                            size={32}\n                            color={theme?.colors?.success || '#10B981'}\n                        />\n                        <Text style={styles.statNumber}>{checklistProgress}%</Text>\n                        <Text style={styles.statLabel}>Tasks Complete</Text>\n                    </TouchableOpacity>\n                </Card>\n            </View>\n\n            {/* Upcoming Events */}\n            <Card style={styles.sectionCard}>\n                <Card.Content>\n                    <View style={styles.sectionHeader}>\n                        <Text style={styles.sectionTitle}>Upcoming Events</Text>\n                        <TouchableOpacity\n                            style={styles.viewAllButton}\n                            onPress={() => navigation.navigate(SCREEN_NAMES.EVENTS)}\n                        >\n                            <Text style={styles.viewAllText}>View All</Text>\n                            <Icon\n                                name=\"chevron-right\"\n                                size={20}\n                                color={theme?.colors?.primary || '#1E3A8A'}\n                            />\n                        </TouchableOpacity>\n                    </View>\n\n                    {upcomingEvents && upcomingEvents.length > 0 ? (\n                        <FlatList\n                            data={upcomingEvents}\n                            renderItem={renderEventCard}\n                            keyExtractor={(item) => item?._id || String(Math.random())}\n                            horizontal\n                            showsHorizontalScrollIndicator={false}\n                            contentContainerStyle={styles.eventsList}\n                        />\n                    ) : (\n                        <View style={styles.emptyState}>\n                            <Icon\n                                name=\"calendar-blank-outline\"\n                                size={48}\n                                color={theme?.colors?.textSecondary || '#6B7280'}\n                            />\n                            <Text style={styles.emptyStateText}>No upcoming events</Text>\n                            <TouchableOpacity\n                                style={styles.emptyStateButton}\n                                onPress={() =>\n                                    navigation.navigate(SCREEN_NAMES.EVENTS, {\n                                        screen: 'CreateEvent',\n                                    })\n                                }\n                            >\n                                <Text style={styles.emptyStateButtonText}>Create Event</Text>\n                            </TouchableOpacity>\n                        </View>\n                    )}\n                </Card.Content>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card style={styles.sectionCard}>\n                <Card.Content>\n                    <Text style={styles.sectionTitle}>Quick Actions</Text>\n                    <View style={styles.quickActions}>\n                        <TouchableOpacity\n                            style={styles.quickActionButton}\n                            onPress={() => navigation.navigate(SCREEN_NAMES.BUDGET)}\n                        >\n                            <Icon\n                                name=\"plus-circle\"\n                                size={48}\n                                color={theme?.colors?.primary || '#1E3A8A'}\n                            />\n                            <Text style={styles.quickActionText}>Add Entry</Text>\n                        </TouchableOpacity>\n\n                        <TouchableOpacity\n                            style={styles.quickActionButton}\n                            onPress={() => navigation.navigate(SCREEN_NAMES.FORUMS)}\n                        >\n                            <Icon\n                                name=\"forum\"\n                                size={48}\n                                color={theme?.colors?.primary || '#1E3A8A'}\n                            />\n                            <Text style={styles.quickActionText}>Groups</Text>\n                        </TouchableOpacity>\n\n                        <TouchableOpacity\n                            style={styles.quickActionButton}\n                            onPress={() => navigation.navigate(SCREEN_NAMES.RESOURCES)}\n                        >\n                            <Icon\n                                name=\"book-open-variant\"\n                                size={48}\n                                color={theme?.colors?.primary || '#1E3A8A'}\n                            />\n                            <Text style={styles.quickActionText}>Guides</Text>\n                        </TouchableOpacity>\n\n                        <TouchableOpacity\n                            style={styles.quickActionButton}\n                            onPress={() =>\n                                navigation.navigate(SCREEN_NAMES.EVENTS, {\n                                    screen: 'CreateEvent',\n                                })\n                            }\n                        >\n                            <Icon\n                                name=\"calendar-plus\"\n                                size={48}\n                                color={theme?.colors?.primary || '#1E3A8A'}\n                            />\n                            <Text style={styles.quickActionText}>New Event</Text>\n                        </TouchableOpacity>\n                    </View>\n                </Card.Content>\n            </Card>\n\n            {/* Budget Summary */}\n            {budgetSummary && (\n                <Card style={styles.sectionCard}>\n                    <Card.Content>\n                        <View style={styles.sectionHeader}>\n                            <Text style={styles.sectionTitle}>This Month</Text>\n                            <TouchableOpacity\n                                style={styles.viewAllButton}\n                                onPress={() => navigation.navigate(SCREEN_NAMES.BUDGET)}\n                            >\n                                <Text style={styles.viewAllText}>Details</Text>\n                                <Icon\n                                    name=\"chevron-right\"\n                                    size={20}\n                                    color={theme?.colors?.primary || '#1E3A8A'}\n                                />\n                            </TouchableOpacity>\n                        </View>\n\n                        <View style={styles.budgetSummary}>\n                            <View style={styles.budgetItem}>\n                                <Text style={styles.budgetLabel}>Income</Text>\n                                <Text style={[styles.budgetAmount, styles.incomeAmount]}>\n                                    {formatCurrency(budgetSummary.income?.total || 0)}\n                                </Text>\n                            </View>\n                            <View style={styles.budgetDivider} />\n                            <View style={styles.budgetItem}>\n                                <Text style={styles.budgetLabel}>Expenses</Text>\n                                <Text style={[styles.budgetAmount, styles.expenseAmount]}>\n                                    {formatCurrency(budgetSummary.expenses?.total || 0)}\n                                </Text>\n                            </View>\n                        </View>\n                    </Card.Content>\n                </Card>\n            )}\n        </ScrollView>\n    );\n};\n\nexport default DashboardScreen;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/main/ProfileScreen.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'navigation' is defined but never used. Allowed unused args must match /^_/u.","line":12,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, ScrollView, TouchableOpacity, Alert } from 'react-native';\nimport { Card, Avatar, List, Divider } from 'react-native-paper';\n\nimport Icon from '../../components/common/Icon.js';\nimport { colors } from '../../constants/theme';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { profileStyles as styles } from '../../styles/screens/main/ProfileScreenStyles';\nimport { devLog } from '../../utils';\nimport { showSuccessAlert } from '../../utils/alerts';\n\nconst ProfileScreen = ({ navigation }) => {\n    const { user, logout } = useAuth();\n\n    const handleLogout = () => {\n        Alert.alert('Logout', 'Are you sure you want to logout?', [\n            { text: 'Cancel', style: 'cancel' },\n            { text: 'Logout', onPress: logout, style: 'destructive' },\n        ]);\n    };\n\n    const menuItems = [\n        {\n            title: 'Account Settings',\n            icon: 'account-cog',\n            onPress: () => {\n                devLog('Profile', 'Account settings tapped');\n                showSuccessAlert('Coming Soon', 'Account settings will be available in the next update.');\n            },\n        },\n        {\n            title: 'Notifications',\n            icon: 'bell-outline',\n            onPress: () => {\n                devLog('Profile', 'Notifications tapped');\n                showSuccessAlert('Coming Soon', 'Notification settings will be available in the next update.');\n            },\n        },\n        {\n            title: 'Privacy Policy',\n            icon: 'shield-check-outline',\n            onPress: () => {\n                devLog('Profile', 'Privacy policy tapped');\n                showSuccessAlert('Coming Soon', 'Privacy policy will be available in the next update.');\n            },\n        },\n        {\n            title: 'Terms of Service',\n            icon: 'file-document-outline',\n            onPress: () => {\n                devLog('Profile', 'Terms of service tapped');\n                showSuccessAlert('Coming Soon', 'Terms of service will be available in the next update.');\n            },\n        },\n        {\n            title: 'Help & Support',\n            icon: 'help-circle-outline',\n            onPress: () => {\n                devLog('Profile', 'Help & support tapped');\n                showSuccessAlert('Coming Soon', 'Help & support will be available in the next update.');\n            },\n        },\n        {\n            title: 'About',\n            icon: 'information-outline',\n            onPress: () => {\n                devLog('Profile', 'About tapped');\n                showSuccessAlert('About', 'Conecta Alicante v1.0.0\\nConnecting entrepreneurs and freelancers in Alicante.');\n            },\n        },\n    ];\n\n    return (\n        <ScrollView style={styles.container}>\n            <View style={styles.header}>\n                <Avatar.Text\n                    size={80}\n                    label={user?.name?.charAt(0).toUpperCase() || 'U'}\n                    style={styles.avatar}\n                />\n                <Text style={styles.name}>{user?.name}</Text>\n                <Text style={styles.email}>{user?.email}</Text>\n                <View style={styles.pathBadge}>\n                    <Icon\n                        name={user?.professionalPath === 'FREELANCER' ? 'laptop' : 'rocket-launch'}\n                        size={16}\n                        color={colors.primary}\n                    />\n                    <Text style={styles.pathText}>\n                        {user?.professionalPath === 'FREELANCER' ? 'Freelancer' : 'Entrepreneur'}\n                    </Text>\n                </View>\n            </View>\n\n            <Card style={styles.menuCard}>\n                {menuItems.map((item, index) => (\n                    <React.Fragment key={item.title}>\n                        <List.Item\n                            title={item.title}\n                            left={() => <List.Icon icon={item.icon} color={colors.primary} />}\n                            right={() => <List.Icon icon=\"chevron-right\" />}\n                            onPress={item.onPress}\n                            titleStyle={styles.menuItemTitle}\n                        />\n                        {index < menuItems.length - 1 && <Divider />}\n                    </React.Fragment>\n                ))}\n            </Card>\n\n            <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>\n                <Icon name=\"logout\" size={20} color={colors.error} />\n                <Text style={styles.logoutText}>Logout</Text>\n            </TouchableOpacity>\n\n            <Text style={styles.versionText}>Version 1.0.0</Text>\n        </ScrollView>\n    );\n};\n\nexport default ProfileScreen;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/onboarding/PathSelectionScreen.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/onboarding/PrioritySelectionScreen.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'navigation' is defined but never used. Allowed unused args must match /^_/u.","line":12,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":53},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":14,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":37},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { color: 'white' }","line":133,"column":37,"nodeType":"ObjectExpression","endLine":133,"endColumn":55}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, SafeAreaView, ScrollView, Alert } from 'react-native';\nimport { Button, Checkbox } from 'react-native-paper';\n\nimport { PROFESSIONAL_PATHS } from '../../constants/config';\nimport { colors } from '../../constants/theme';\nimport checklistService from '../../services/checklistService';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { styles } from '../../styles/screens/onboarding/PrioritySelectionScreenStyles';\n\nconst PrioritySelectionScreen = ({ route, navigation }) => {\n    const { professionalPath } = route.params;\n    const { completeOnboarding, user } = useAuth();\n    const [selectedPriorities, setSelectedPriorities] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        // Load any pre-selected items from registration\n        loadPendingChecklistItems();\n    }, []);\n\n    const loadPendingChecklistItems = async () => {\n        try {\n            const pendingItems = await AsyncStorage.getItem('pendingChecklistItems');\n            if (pendingItems) {\n                setSelectedPriorities(JSON.parse(pendingItems));\n                // Clear the pending items\n                await AsyncStorage.removeItem('pendingChecklistItems');\n            }\n        } catch (error) {\n            console.error('Error loading pending checklist items:', error);\n        }\n    };\n\n    const priorities =\n        professionalPath === PROFESSIONAL_PATHS.FREELANCER\n            ? [\n                { id: 'OBTAIN_NIE', title: 'Obtain your NIE' },\n                { id: 'REGISTER_AUTONOMO', title: 'Register as \\'Autónomo\\'' },\n                { id: 'UNDERSTAND_TAXES', title: 'Understand Tax Obligations' },\n                { id: 'OPEN_BANK_ACCOUNT', title: 'Open Spanish Bank Account' },\n            ]\n            : [\n                { id: 'OBTAIN_NIE', title: 'Obtain your NIE' },\n                { id: 'FORM_SL_COMPANY', title: 'Form an S.L. Company' },\n                { id: 'GET_COMPANY_NIF', title: 'Get Company NIF' },\n                { id: 'RESEARCH_FUNDING', title: 'Research Funding Options' },\n            ];\n\n    const togglePriority = (priorityId) => {\n        if (selectedPriorities.includes(priorityId)) {\n            setSelectedPriorities(selectedPriorities.filter((id) => id !== priorityId));\n        } else {\n            setSelectedPriorities([...selectedPriorities, priorityId]);\n        }\n    };\n\n    const handleComplete = async () => {\n        if (selectedPriorities.length === 0) {\n            Alert.alert('Select Priorities', 'Please select at least one priority to continue.');\n            return;\n        }\n\n        setLoading(true);\n        try {\n            // First, initialize the checklist items in the backend\n            await checklistService.initializeChecklist(selectedPriorities);\n\n            // Then complete the onboarding\n            await completeOnboarding(selectedPriorities);\n\n            // Navigation will be handled by AuthContext\n        } catch (error) {\n            console.error('Error completing onboarding:', error);\n            Alert.alert('Error', error.message || 'Something went wrong. Please try again.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <SafeAreaView style={styles.container}>\n            <ScrollView contentContainerStyle={styles.scrollContent}>\n                <View style={styles.header}>\n                    <Text style={styles.title}>What's on your mind right now?</Text>\n                    <Text style={styles.subtitle}>\n                        Select your priorities and we'll pin them to your dashboard.\n                    </Text>\n                </View>\n\n                <View style={styles.prioritiesContainer}>\n                    {priorities.map((priority) => (\n                        <TouchableOpacity\n                            key={priority.id}\n                            style={[\n                                styles.priorityCard,\n                                selectedPriorities.includes(priority.id) &&\n                                    styles.priorityCardSelected,\n                            ]}\n                            onPress={() => togglePriority(priority.id)}\n                            activeOpacity={0.8}\n                        >\n                            <Checkbox.Android\n                                status={\n                                    selectedPriorities.includes(priority.id)\n                                        ? 'checked'\n                                        : 'unchecked'\n                                }\n                                color={colors.primary}\n                            />\n                            <Text\n                                style={[\n                                    styles.priorityText,\n                                    selectedPriorities.includes(priority.id) &&\n                                        styles.priorityTextSelected,\n                                ]}\n                            >\n                                {priority.title}\n                            </Text>\n                        </TouchableOpacity>\n                    ))}\n                </View>\n\n                <View style={styles.footer}>\n                    <Button\n                        mode=\"contained\"\n                        onPress={handleComplete}\n                        loading={loading}\n                        disabled={loading || selectedPriorities.length === 0}\n                        style={styles.completeButton}\n                        contentStyle={styles.completeButtonContent}\n                        labelStyle={{ color: 'white' }}\n                    >\n                        Complete Setup\n                    </Button>\n                </View>\n            </ScrollView>\n        </SafeAreaView>\n    );\n};\n\nexport default PrioritySelectionScreen;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/personalChat/PersonalChatDetailScreen.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Avatar' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":16},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: { marginRight: 15 }","line":47,"column":28,"nodeType":"ObjectExpression","endLine":47,"endColumn":47},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'cleanupSocketListeners', 'loadMessages', 'navigation', 'setupSocketListeners', and 'userName'. Either include them or remove the dependency array.","line":63,"column":8,"nodeType":"ArrayExpression","endLine":63,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [cleanupSocketListeners, loadMessages, navigation, setupSocketListeners, userId, userName]","fix":{"range":[2156,2164],"text":"[cleanupSocketListeners, loadMessages, navigation, setupSocketListeners, userId, userName]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/screens/personalChat/PersonalChatDetailScreen.js\nimport { format } from 'date-fns';\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport {\n    View,\n    Text,\n    FlatList,\n    TextInput,\n    TouchableOpacity,\n    KeyboardAvoidingView,\n    Platform,\n    SafeAreaView,\n    StyleSheet,\n} from 'react-native';\nimport { Avatar } from 'react-native-paper';\n\nimport Icon from '../../components/common/Icon.js';\nimport LoadingSpinner from '../../components/common/LoadingSpinner';\nimport { SCREEN_NAMES } from '../../constants/routes';\nimport { colors, spacing, fonts } from '../../constants/theme';\nimport personalChatService from '../../services/personalChatService';\nimport socketService from '../../services/socketService';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { showErrorAlert } from '../../utils/alerts';\n\nconst PersonalChatDetailScreen = ({ route, navigation }) => {\n    const { user } = useAuth();\n    const { userId, userName, conversationId } = route.params;\n\n    const [messages, setMessages] = useState([]);\n    const [inputText, setInputText] = useState('');\n    const [loading, setLoading] = useState(true);\n    const [sending, setSending] = useState(false);\n    const [isTyping, setIsTyping] = useState(false);\n\n    const flatListRef = useRef(null);\n    const typingTimeoutRef = useRef(null);\n\n    useEffect(() => {\n        // Set navigation options\n        navigation.setOptions({\n            headerRight: () => (\n                <TouchableOpacity\n                    onPress={() =>\n                        navigation.navigate(SCREEN_NAMES.USER_PROFILE, { userId, userName })\n                    }\n                    style={{ marginRight: 15 }}\n                >\n                    <Icon name=\"account-circle-outline\" size={24} color={colors.textInverse} />\n                </TouchableOpacity>\n            ),\n        });\n\n        loadMessages();\n        setupSocketListeners();\n\n        return () => {\n            cleanupSocketListeners();\n            if (typingTimeoutRef.current) {\n                clearTimeout(typingTimeoutRef.current);\n            }\n        };\n    }, [userId]);\n\n    const loadMessages = async () => {\n        try {\n            const data = await personalChatService.getMessages(userId);\n            setMessages(data.reverse());\n\n            // Mark messages as read\n            if (conversationId) {\n                await personalChatService.markAsRead(conversationId);\n            }\n        } catch (error) {\n            console.error('Failed to load messages:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const setupSocketListeners = () => {\n        // Listen for new messages from this user\n        socketService.on('private_message', handleNewMessage);\n        socketService.on('user_typing', handleUserTyping);\n        socketService.on('message_read', handleMessageRead);\n    };\n\n    const cleanupSocketListeners = () => {\n        socketService.off('private_message', handleNewMessage);\n        socketService.off('user_typing', handleUserTyping);\n        socketService.off('message_read', handleMessageRead);\n    };\n\n    const handleNewMessage = useCallback(\n        (message) => {\n            if (message.sender === userId || message.recipient === userId) {\n                setMessages((prev) => [...prev, message]);\n                setTimeout(() => {\n                    flatListRef.current?.scrollToEnd({ animated: true });\n                }, 100);\n            }\n        },\n        [userId],\n    );\n\n    const handleUserTyping = useCallback(\n        ({ userId: typingUserId, isTyping: typing }) => {\n            if (typingUserId === userId) {\n                setIsTyping(typing);\n            }\n        },\n        [userId],\n    );\n\n    const handleMessageRead = useCallback(({ messageIds }) => {\n        setMessages((prev) =>\n            prev.map((msg) => (messageIds.includes(msg._id) ? { ...msg, read: true } : msg)),\n        );\n    }, []);\n\n    const sendMessage = async () => {\n        if (!inputText.trim() || sending) return;\n\n        const messageText = inputText.trim();\n        setInputText('');\n        setSending(true);\n\n        try {\n            await personalChatService.sendMessage(userId, messageText);\n\n            // Optimistically add message to UI\n            const optimisticMessage = {\n                _id: `temp-${Date.now()}`,\n                content: messageText,\n                sender: user._id,\n                recipient: userId,\n                createdAt: new Date().toISOString(),\n                read: false,\n            };\n\n            setMessages((prev) => [...prev, optimisticMessage]);\n\n            setTimeout(() => {\n                flatListRef.current?.scrollToEnd({ animated: true });\n            }, 100);\n        } catch (error) {\n            console.error('Failed to send message:', error);\n            showErrorAlert('Error', 'Failed to send message');\n            setInputText(messageText);\n        } finally {\n            setSending(false);\n        }\n    };\n\n    const handleTyping = (text) => {\n        setInputText(text);\n\n        if (typingTimeoutRef.current) {\n            clearTimeout(typingTimeoutRef.current);\n        }\n\n        if (text.trim() && socketService.isConnected()) {\n            socketService.emit('typing', { recipientId: userId, isTyping: true });\n\n            typingTimeoutRef.current = setTimeout(() => {\n                socketService.emit('typing', { recipientId: userId, isTyping: false });\n            }, 3000);\n        } else if (socketService.isConnected()) {\n            socketService.emit('typing', { recipientId: userId, isTyping: false });\n        }\n    };\n\n    const renderMessage = ({ item, index }) => {\n        const isOwnMessage = item.sender === user._id;\n        const showTimestamp =\n            index === 0 ||\n            new Date(item.createdAt) - new Date(messages[index - 1]?.createdAt) > 300000;\n\n        return (\n            <>\n                {showTimestamp && (\n                    <View style={styles.timestampContainer}>\n                        <Text style={styles.timestamp}>\n                            {format(new Date(item.createdAt), 'HH:mm')}\n                        </Text>\n                    </View>\n                )}\n\n                <View style={[styles.messageContainer, isOwnMessage && styles.ownMessageContainer]}>\n                    <View style={[styles.messageBubble, isOwnMessage && styles.ownMessageBubble]}>\n                        <Text style={[styles.messageText, isOwnMessage && styles.ownMessageText]}>\n                            {item.content}\n                        </Text>\n\n                        {isOwnMessage && (\n                            <View style={styles.messageStatus}>\n                                <Icon\n                                    name={item.read ? 'check-all' : 'check'}\n                                    size={16}\n                                    color={item.read ? '#60A5FA' : '#FFFFFF99'}\n                                />\n                            </View>\n                        )}\n                    </View>\n                </View>\n            </>\n        );\n    };\n\n    if (loading) {\n        return <LoadingSpinner fullScreen text=\"Loading messages...\" />;\n    }\n\n    return (\n        <SafeAreaView style={styles.container}>\n            <KeyboardAvoidingView\n                style={styles.container}\n                behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n                keyboardVerticalOffset={Platform.OS === 'ios' ? 90 : 0}\n            >\n                <FlatList\n                    ref={flatListRef}\n                    data={messages}\n                    renderItem={renderMessage}\n                    keyExtractor={(item) => item._id}\n                    contentContainerStyle={styles.messagesList}\n                    showsVerticalScrollIndicator={false}\n                    onContentSizeChange={() =>\n                        flatListRef.current?.scrollToEnd({ animated: false })\n                    }\n                    ListFooterComponent={\n                        isTyping ? (\n                            <View style={styles.typingIndicator}>\n                                <Text style={styles.typingText}>{userName} is typing...</Text>\n                            </View>\n                        ) : null\n                    }\n                />\n\n                <View style={styles.inputContainer}>\n                    <View style={styles.inputWrapper}>\n                        <TextInput\n                            style={styles.input}\n                            value={inputText}\n                            onChangeText={handleTyping}\n                            placeholder=\"Type a message\"\n                            placeholderTextColor={colors.textSecondary}\n                            multiline\n                            maxLength={1000}\n                            onSubmitEditing={sendMessage}\n                            blurOnSubmit={false}\n                        />\n\n                        <TouchableOpacity\n                            onPress={sendMessage}\n                            disabled={!inputText.trim() || sending}\n                            style={[\n                                styles.sendButton,\n                                (!inputText.trim() || sending) && styles.sendButtonDisabled,\n                            ]}\n                        >\n                            <Icon\n                                name=\"send\"\n                                size={24}\n                                color={\n                                    inputText.trim() && !sending ? colors.primary : colors.disabled\n                                }\n                            />\n                        </TouchableOpacity>\n                    </View>\n                </View>\n            </KeyboardAvoidingView>\n        </SafeAreaView>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: colors.background,\n    },\n    messagesList: {\n        padding: spacing.md,\n        paddingBottom: spacing.xs,\n    },\n    timestampContainer: {\n        alignItems: 'center',\n        marginVertical: spacing.md,\n    },\n    timestamp: {\n        fontSize: fonts.sizes.sm,\n        color: colors.textSecondary,\n        backgroundColor: colors.surface,\n        paddingHorizontal: spacing.md,\n        paddingVertical: spacing.xs,\n        borderRadius: 12,\n    },\n    messageContainer: {\n        marginBottom: spacing.sm,\n        alignItems: 'flex-start',\n    },\n    ownMessageContainer: {\n        alignItems: 'flex-end',\n    },\n    messageBubble: {\n        maxWidth: '80%',\n        backgroundColor: colors.surface,\n        padding: spacing.md,\n        borderRadius: 18,\n        borderTopLeftRadius: 4,\n    },\n    ownMessageBubble: {\n        backgroundColor: colors.primary,\n        borderTopLeftRadius: 18,\n        borderTopRightRadius: 4,\n    },\n    messageText: {\n        fontSize: fonts.sizes.md,\n        color: colors.text,\n    },\n    ownMessageText: {\n        color: colors.textInverse,\n    },\n    messageStatus: {\n        marginTop: spacing.xs,\n        alignSelf: 'flex-end',\n    },\n    typingIndicator: {\n        paddingHorizontal: spacing.md,\n        paddingVertical: spacing.sm,\n    },\n    typingText: {\n        fontSize: fonts.sizes.sm,\n        color: colors.textSecondary,\n        fontStyle: 'italic',\n    },\n    inputContainer: {\n        backgroundColor: colors.surface,\n        padding: spacing.md,\n        borderTopWidth: 1,\n        borderTopColor: colors.border,\n    },\n    inputWrapper: {\n        flexDirection: 'row',\n        alignItems: 'flex-end',\n        backgroundColor: colors.background,\n        borderRadius: 25,\n        paddingHorizontal: spacing.md,\n        paddingVertical: spacing.xs,\n    },\n    input: {\n        flex: 1,\n        fontSize: fonts.sizes.md,\n        color: colors.text,\n        maxHeight: 100,\n        paddingVertical: spacing.sm,\n    },\n    sendButton: {\n        padding: spacing.sm,\n        marginLeft: spacing.sm,\n    },\n    sendButtonDisabled: {\n        opacity: 0.5,\n    },\n});\n\nexport default React.memo(PersonalChatDetailScreen);\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/personalChat/PersonalChatListScreen.js","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadConversations'. Either include it or remove the dependency array.","line":33,"column":8,"nodeType":"ArrayExpression","endLine":33,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [loadConversations]","fix":{"range":[1201,1203],"text":"[loadConversations]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/screens/personalChat/PersonalChatListScreen.js\nimport { format } from 'date-fns';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport {\n    View,\n    Text,\n    FlatList,\n    TouchableOpacity,\n    RefreshControl,\n    SafeAreaView,\n    StyleSheet,\n    TextInput,\n} from 'react-native';\nimport { Card, Avatar, Badge, FAB } from 'react-native-paper';\n\nimport EmptyState from '../../components/common/EmptyState.js';\nimport Icon from '../../components/common/Icon.js';\nimport LoadingSpinner from '../../components/common/LoadingSpinner.js';\nimport { SCREEN_NAMES } from '../../constants/routes.js';\nimport { colors, spacing, fonts } from '../../constants/theme.js';\nimport personalChatService from '../../services/personalChatService.js';\nimport { useAuth } from '../../store/contexts/AuthContext.js';\n\nconst PersonalChatListScreen = ({ navigation }) => {\n    const { user } = useAuth();\n    const [conversations, setConversations] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [refreshing, setRefreshing] = useState(false);\n    const [searchQuery, setSearchQuery] = useState('');\n\n    useEffect(() => {\n        loadConversations();\n    }, []);\n\n    const loadConversations = useCallback(async () => {\n        try {\n            const data = await personalChatService.getConversations();\n            setConversations(data);\n        } catch (error) {\n            console.error('Failed to load conversations:', error);\n        } finally {\n            setLoading(false);\n            setRefreshing(false);\n        }\n    }, []);\n\n    const handleRefresh = useCallback(() => {\n        setRefreshing(true);\n        loadConversations();\n    }, [loadConversations]);\n\n    const handleConversationPress = (conversation) => {\n        navigation.navigate(SCREEN_NAMES.PERSONAL_CHAT_DETAIL, {\n            userId: conversation.otherUser._id,\n            userName: conversation.otherUser.name,\n            conversationId: conversation.conversationId,\n        });\n    };\n\n    const handleNewChat = () => {\n        // Navigate to a user selection screen or show a modal\n        // For now, we'll navigate to the groups screen where users can start chats\n        navigation.navigate(SCREEN_NAMES.FORUMS);\n    };\n\n    const formatLastMessageTime = (timestamp) => {\n        if (!timestamp) return '';\n\n        const date = new Date(timestamp);\n        const now = new Date();\n        const diffInHours = (now - date) / (1000 * 60 * 60);\n\n        if (diffInHours < 24) {\n            return format(date, 'HH:mm');\n        } else if (diffInHours < 48) {\n            return 'Yesterday';\n        } else if (diffInHours < 168) {\n            return format(date, 'EEEE');\n        } else {\n            return format(date, 'dd/MM/yy');\n        }\n    };\n\n    const renderConversation = ({ item }) => {\n        const lastMessage = item.lastMessage;\n        const otherUser = item.otherUser;\n        const unreadCount = item.unreadCount || 0;\n\n        return (\n            <TouchableOpacity onPress={() => handleConversationPress(item)} activeOpacity={0.7}>\n                <Card style={styles.conversationCard}>\n                    <View style={styles.conversationContent}>\n                        <View style={styles.avatarContainer}>\n                            <Avatar.Text\n                                size={50}\n                                label={otherUser.name.charAt(0).toUpperCase()}\n                                style={styles.avatar}\n                            />\n                            {otherUser.isOnline && <View style={styles.onlineIndicator} />}\n                        </View>\n\n                        <View style={styles.messageContent}>\n                            <View style={styles.messageHeader}>\n                                <Text style={styles.userName} numberOfLines={1}>\n                                    {otherUser.name}\n                                </Text>\n                                <Text style={styles.timestamp}>\n                                    {formatLastMessageTime(lastMessage?.createdAt)}\n                                </Text>\n                            </View>\n\n                            <View style={styles.messagePreview}>\n                                <Text\n                                    style={[\n                                        styles.lastMessage,\n                                        unreadCount > 0 && styles.unreadMessage,\n                                    ]}\n                                    numberOfLines={1}\n                                >\n                                    {lastMessage?.sender === user._id && 'You: '}\n                                    {lastMessage?.content || 'No messages yet'}\n                                </Text>\n                                {unreadCount > 0 && (\n                                    <Badge style={styles.unreadBadge}>\n                                        {unreadCount > 99 ? '99+' : unreadCount}\n                                    </Badge>\n                                )}\n                            </View>\n                        </View>\n                    </View>\n                </Card>\n            </TouchableOpacity>\n        );\n    };\n\n    const filteredConversations =\n        conversations && Array.isArray(conversations)\n            ? conversations.filter((conv) =>\n                conv.otherUser.name.toLowerCase().includes(searchQuery.toLowerCase()),\n            )\n            : [];\n\n    if (loading) {\n        return <LoadingSpinner fullScreen text=\"Loading conversations...\" />;\n    }\n\n    return (\n        <SafeAreaView style={styles.safeArea}>\n            <View style={styles.container}>\n                <View style={styles.header}>\n                    <Text style={styles.headerTitle}>Messages</Text>\n                    <View style={styles.searchContainer}>\n                        <Icon name=\"magnify\" size={20} color={colors.textSecondary} />\n                        <TextInput\n                            style={styles.searchInput}\n                            placeholder=\"Search conversations...\"\n                            value={searchQuery}\n                            onChangeText={setSearchQuery}\n                            placeholderTextColor={colors.textSecondary}\n                        />\n                    </View>\n                </View>\n\n                <FlatList\n                    data={filteredConversations}\n                    renderItem={renderConversation}\n                    keyExtractor={(item) => item.conversationId}\n                    contentContainerStyle={styles.listContent}\n                    refreshControl={\n                        <RefreshControl\n                            refreshing={refreshing}\n                            onRefresh={handleRefresh}\n                            tintColor={colors.primary}\n                        />\n                    }\n                    showsVerticalScrollIndicator={false}\n                    ListEmptyComponent={\n                        <EmptyState\n                            icon=\"message-text-outline\"\n                            title=\"No conversations yet\"\n                            message=\"Start a conversation by tapping the + button\"\n                            action={\n                                <TouchableOpacity\n                                    style={styles.emptyStateButton}\n                                    onPress={handleNewChat}\n                                >\n                                    <Text style={styles.emptyStateButtonText}>Start New Chat</Text>\n                                </TouchableOpacity>\n                            }\n                        />\n                    }\n                />\n\n                <FAB\n                    icon=\"message-plus\"\n                    style={styles.fab}\n                    onPress={handleNewChat}\n                    color={colors.textInverse}\n                />\n            </View>\n        </SafeAreaView>\n    );\n};\n\nconst styles = StyleSheet.create({\n    safeArea: {\n        flex: 1,\n        backgroundColor: colors.background,\n    },\n    container: {\n        flex: 1,\n    },\n    header: {\n        backgroundColor: colors.surface,\n        padding: spacing.md,\n        borderBottomWidth: 1,\n        borderBottomColor: colors.border,\n    },\n    headerTitle: {\n        fontSize: 24,\n        fontWeight: 'bold',\n        color: colors.text,\n        marginBottom: spacing.sm,\n    },\n    searchContainer: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        backgroundColor: colors.background,\n        borderRadius: 25,\n        paddingHorizontal: spacing.md,\n        paddingVertical: spacing.xs,\n    },\n    searchInput: {\n        flex: 1,\n        marginLeft: spacing.sm,\n        fontSize: fonts.sizes.md,\n        color: colors.text,\n    },\n    listContent: {\n        padding: spacing.md,\n    },\n    conversationCard: {\n        marginBottom: spacing.sm,\n        backgroundColor: colors.surface,\n        borderRadius: 12,\n        elevation: 1,\n    },\n    conversationContent: {\n        flexDirection: 'row',\n        padding: spacing.md,\n        alignItems: 'center',\n    },\n    avatarContainer: {\n        position: 'relative',\n        marginRight: spacing.md,\n    },\n    avatar: {\n        backgroundColor: colors.primary,\n    },\n    onlineIndicator: {\n        position: 'absolute',\n        bottom: 0,\n        right: 0,\n        width: 14,\n        height: 14,\n        backgroundColor: colors.success,\n        borderRadius: 7,\n        borderWidth: 2,\n        borderColor: colors.surface,\n    },\n    messageContent: {\n        flex: 1,\n    },\n    messageHeader: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        marginBottom: spacing.xs,\n    },\n    userName: {\n        fontSize: fonts.sizes.md,\n        fontWeight: '600',\n        color: colors.text,\n        flex: 1,\n    },\n    timestamp: {\n        fontSize: fonts.sizes.sm,\n        color: colors.textSecondary,\n    },\n    messagePreview: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n    },\n    lastMessage: {\n        fontSize: fonts.sizes.sm,\n        color: colors.textSecondary,\n        flex: 1,\n    },\n    unreadMessage: {\n        color: colors.text,\n        fontWeight: '600',\n    },\n    unreadBadge: {\n        backgroundColor: colors.primary,\n        marginLeft: spacing.sm,\n    },\n    fab: {\n        position: 'absolute',\n        margin: 16,\n        right: 0,\n        bottom: 0,\n        backgroundColor: colors.primary,\n    },\n    emptyStateButton: {\n        backgroundColor: colors.primary,\n        paddingHorizontal: spacing.lg,\n        paddingVertical: spacing.md,\n        borderRadius: 25,\n        marginTop: spacing.md,\n    },\n    emptyStateButtonText: {\n        color: colors.textInverse,\n        fontWeight: 'bold',\n        fontSize: fonts.sizes.md,\n    },\n});\n\nexport default React.memo(PersonalChatListScreen);\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/screens/personalChat/UserProfileScreen.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'TouchableOpacity' is defined but never used.","line":7,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'currentUser' is assigned a value but never used.","line":23,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":30},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUserProfile'. Either include it or remove the dependency array.","line":32,"column":8,"nodeType":"ArrayExpression","endLine":32,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [loadUserProfile, userId]","fix":{"range":[1121,1129],"text":"[loadUserProfile, userId]"}}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 102. Maximum allowed is 100.","line":69,"column":1,"nodeType":"Program","messageId":"max","endLine":69,"endColumn":103}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/screens/personalChat/UserProfileScreen.js\nimport React, { useState, useEffect } from 'react';\nimport {\n    View,\n    Text,\n    ScrollView,\n    TouchableOpacity,\n    SafeAreaView,\n    StyleSheet,\n    Alert,\n} from 'react-native';\nimport { Card, Avatar, Button, Chip } from 'react-native-paper';\n\nimport Icon from '../../components/common/Icon.js';\nimport LoadingSpinner from '../../components/common/LoadingSpinner';\nimport { SCREEN_NAMES } from '../../constants/routes';\nimport { colors, spacing, fonts } from '../../constants/theme';\nimport personalChatService from '../../services/personalChatService';\nimport { useAuth } from '../../store/contexts/AuthContext';\nimport { showErrorAlert, showSuccessAlert } from '../../utils/alerts';\n\nconst UserProfileScreen = ({ route, navigation }) => {\n    const { user: currentUser } = useAuth();\n    const { userId, userName } = route.params;\n\n    const [userProfile, setUserProfile] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [isBlocked, setIsBlocked] = useState(false);\n\n    useEffect(() => {\n        loadUserProfile();\n    }, [userId]);\n\n    const loadUserProfile = async () => {\n        try {\n            const profile = await personalChatService.getUserProfile(userId);\n            setUserProfile(profile);\n            setIsBlocked(profile.isBlocked || false);\n        } catch (error) {\n            console.error('Failed to load user profile:', error);\n            showErrorAlert('Error', 'Failed to load user profile');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleStartChat = async () => {\n        try {\n            // Start or get existing conversation\n            const conversation = await personalChatService.startConversation(userId);\n\n            // Navigate to chat detail\n            navigation.replace(SCREEN_NAMES.PERSONAL_CHAT_DETAIL, {\n                userId: userId,\n                userName: userName || userProfile?.name,\n                conversationId: conversation.conversationId,\n            });\n        } catch (error) {\n            console.error('Failed to start conversation:', error);\n            showErrorAlert('Error', 'Failed to start conversation');\n        }\n    };\n\n    const handleBlockUser = async () => {\n        Alert.alert(\n            isBlocked ? 'Unblock User' : 'Block User',\n            isBlocked\n                ? `Are you sure you want to unblock ${userName}?`\n                : `Are you sure you want to block ${userName}? You won't receive messages from them.`,\n            [\n                { text: 'Cancel', style: 'cancel' },\n                {\n                    text: isBlocked ? 'Unblock' : 'Block',\n                    style: isBlocked ? 'default' : 'destructive',\n                    onPress: async () => {\n                        try {\n                            await personalChatService.toggleBlockUser(userId, !isBlocked);\n                            setIsBlocked(!isBlocked);\n                            showSuccessAlert(\n                                'Success',\n                                isBlocked ? 'User unblocked' : 'User blocked',\n                            );\n                        } catch (error) {\n                            showErrorAlert('Error', 'Failed to update block status');\n                        }\n                    },\n                },\n            ],\n        );\n    };\n\n    if (loading) {\n        return <LoadingSpinner fullScreen text=\"Loading profile...\" />;\n    }\n\n    if (!userProfile) {\n        return (\n            <View style={styles.errorContainer}>\n                <Text style={styles.errorText}>User profile not found</Text>\n            </View>\n        );\n    }\n\n    return (\n        <SafeAreaView style={styles.container}>\n            <ScrollView showsVerticalScrollIndicator={false}>\n                <Card style={styles.profileCard}>\n                    <View style={styles.profileHeader}>\n                        <Avatar.Text\n                            size={100}\n                            label={userProfile.name.charAt(0).toUpperCase()}\n                            style={styles.avatar}\n                        />\n                        <Text style={styles.userName}>{userProfile.name}</Text>\n                        <Text style={styles.userEmail}>{userProfile.email}</Text>\n\n                        <View style={styles.statusContainer}>\n                            <View\n                                style={[\n                                    styles.statusDot,\n                                    {\n                                        backgroundColor: userProfile.isOnline\n                                            ? colors.success\n                                            : colors.textSecondary,\n                                    },\n                                ]}\n                            />\n                            <Text style={styles.statusText}>\n                                {userProfile.isOnline ? 'Online' : 'Offline'}\n                            </Text>\n                        </View>\n\n                        <Chip\n                            style={styles.pathChip}\n                            textStyle={styles.pathChipText}\n                            icon={\n                                userProfile.professionalPath === 'FREELANCER'\n                                    ? 'briefcase'\n                                    : 'rocket'\n                            }\n                        >\n                            {userProfile.professionalPath === 'FREELANCER'\n                                ? 'Freelancer'\n                                : 'Entrepreneur'}\n                        </Chip>\n                    </View>\n                </Card>\n\n                <Card style={styles.infoCard}>\n                    <Card.Content>\n                        <Text style={styles.sectionTitle}>About</Text>\n                        <Text style={styles.bioText}>{userProfile.bio || 'No bio available'}</Text>\n\n                        {userProfile.location && (\n                            <View style={styles.infoRow}>\n                                <Icon name=\"map-marker\" size={20} color={colors.textSecondary} />\n                                <Text style={styles.infoText}>{userProfile.location}</Text>\n                            </View>\n                        )}\n\n                        {userProfile.joinedDate && (\n                            <View style={styles.infoRow}>\n                                <Icon name=\"calendar\" size={20} color={colors.textSecondary} />\n                                <Text style={styles.infoText}>\n                                    Joined {new Date(userProfile.joinedDate).toLocaleDateString()}\n                                </Text>\n                            </View>\n                        )}\n                    </Card.Content>\n                </Card>\n\n                <View style={styles.actionButtons}>\n                    <Button\n                        mode=\"contained\"\n                        onPress={handleStartChat}\n                        style={styles.chatButton}\n                        icon=\"message\"\n                        disabled={isBlocked}\n                    >\n                        Start Chatting\n                    </Button>\n\n                    <Button\n                        mode=\"outlined\"\n                        onPress={handleBlockUser}\n                        style={styles.blockButton}\n                        textColor={isBlocked ? colors.primary : colors.error}\n                        icon={isBlocked ? 'account-check' : 'account-cancel'}\n                    >\n                        {isBlocked ? 'Unblock User' : 'Block User'}\n                    </Button>\n                </View>\n            </ScrollView>\n        </SafeAreaView>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: colors.background,\n    },\n    profileCard: {\n        margin: spacing.md,\n        backgroundColor: colors.surface,\n    },\n    profileHeader: {\n        alignItems: 'center',\n        padding: spacing.lg,\n    },\n    avatar: {\n        backgroundColor: colors.primary,\n        marginBottom: spacing.md,\n    },\n    userName: {\n        fontSize: fonts.sizes.xxl,\n        fontWeight: 'bold',\n        color: colors.text,\n        marginBottom: spacing.xs,\n    },\n    userEmail: {\n        fontSize: fonts.sizes.md,\n        color: colors.textSecondary,\n        marginBottom: spacing.md,\n    },\n    statusContainer: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: spacing.md,\n    },\n    statusDot: {\n        width: 10,\n        height: 10,\n        borderRadius: 5,\n        marginRight: spacing.xs,\n    },\n    statusText: {\n        fontSize: fonts.sizes.sm,\n        color: colors.textSecondary,\n    },\n    pathChip: {\n        backgroundColor: colors.primaryLight + '20',\n    },\n    pathChipText: {\n        color: colors.primary,\n        fontSize: fonts.sizes.sm,\n    },\n    infoCard: {\n        margin: spacing.md,\n        marginTop: 0,\n        backgroundColor: colors.surface,\n    },\n    sectionTitle: {\n        fontSize: fonts.sizes.lg,\n        fontWeight: '600',\n        color: colors.text,\n        marginBottom: spacing.md,\n    },\n    bioText: {\n        fontSize: fonts.sizes.md,\n        color: colors.text,\n        lineHeight: fonts.sizes.md * 1.5,\n        marginBottom: spacing.md,\n    },\n    infoRow: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: spacing.sm,\n    },\n    infoText: {\n        fontSize: fonts.sizes.md,\n        color: colors.textSecondary,\n        marginLeft: spacing.sm,\n    },\n    actionButtons: {\n        padding: spacing.md,\n        paddingTop: 0,\n    },\n    chatButton: {\n        marginBottom: spacing.md,\n    },\n    blockButton: {\n        borderColor: colors.error,\n    },\n    errorContainer: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    errorText: {\n        fontSize: fonts.sizes.lg,\n        color: colors.textSecondary,\n    },\n});\n\nexport default React.memo(UserProfileScreen);\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/services/api/client.js","messages":[{"ruleId":"import/order","severity":2,"message":"`../../utils` import should occur before import of `../../utils/cacheManager`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":48,"fix":{"range":[231,383],"text":"import { devLog, devError } from '../../utils';\nimport { cache } from '../../utils/cacheManager';\nimport { withRetry } from '../../utils/networkRetry';\n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// frontend/src/services/api/client.js\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport axios from 'axios';\nimport { Platform } from 'react-native';\n\nimport { API_BASE_URL } from '../../config/network';\nimport { cache } from '../../utils/cacheManager';\nimport { withRetry } from '../../utils/networkRetry';\nimport { devLog, devError } from '../../utils';\n\n\n// Request queue for offline support\nclass RequestQueue {\n    constructor() {\n        this.queue = [];\n        this.processing = false;\n    }\n\n    async add(config) {\n        this.queue.push({\n            ...config,\n            timestamp: Date.now(),\n            id: `${Date.now()}_${Math.random()}`,\n        });\n\n        // Store in AsyncStorage for persistence\n        await this.persist();\n    }\n\n    async process() {\n        if (this.processing || this.queue.length === 0) return;\n\n        this.processing = true;\n\n        while (this.queue.length > 0) {\n            const request = this.queue[0];\n\n            try {\n                await axios(request);\n                this.queue.shift();\n                await this.persist();\n            } catch (error) {\n                if (this.shouldRetryLater(error)) {\n                    break;\n                } else {\n                    // Remove failed request\n                    this.queue.shift();\n                    await this.persist();\n                }\n            }\n        }\n\n        this.processing = false;\n    }\n\n    shouldRetryLater(error) {\n        return !error.response || error.response.status >= 500;\n    }\n\n    async persist() {\n        try {\n            await AsyncStorage.setItem('request_queue', JSON.stringify(this.queue));\n        } catch (error) {\n            devError('API Client', 'Failed to persist request queue', error);\n        }\n    }\n\n    async restore() {\n        try {\n            const stored = await AsyncStorage.getItem('request_queue');\n            if (stored) {\n                this.queue = JSON.parse(stored);\n            }\n        } catch (error) {\n            devError('API Client', 'Failed to restore request queue', error);\n        }\n    }\n}\n\n// Create optimized axios instance\nconst createOptimizedClient = () => {\n    const requestQueue = new RequestQueue();\n\n    const client = axios.create({\n        baseURL: API_BASE_URL,\n        timeout: 30000,\n        headers: {\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n            'X-Platform': Platform.OS,\n            'X-App-Version': '1.0.0',\n        },\n    });\n\n    // Request interceptor\n    client.interceptors.request.use(\n        async (config) => {\n            // Add auth token\n            const token = await AsyncStorage.getItem('userToken');\n            if (token && !config.headers.skipAuth) {\n                config.headers.Authorization = `Bearer ${token}`;\n            }\n\n            // Add request ID for tracking\n            config.headers['X-Request-ID'] = `${Date.now()}_${Math.random()}`;\n\n            // Check cache for GET requests\n            if (config.method === 'get' && config.cache !== false) {\n                const cacheKey = `api_${config.url}_${JSON.stringify(config.params || {})}`;\n                const cached = await cache.get(cacheKey);\n\n                if (cached !== null) {\n                    // Return cached response\n                    config.adapter = () =>\n                        Promise.resolve({\n                            data: cached,\n                            status: 200,\n                            statusText: 'OK (from cache)',\n                            headers: {},\n                            config,\n                        });\n                }\n            }\n\n            // Add timestamp\n            config.metadata = { startTime: Date.now() };\n\n            return config;\n        },\n        (error) => {\n            return Promise.reject(error);\n        },\n    );\n\n    // Response interceptor\n    client.interceptors.response.use(\n        async (response) => {\n            // Log response time in development\n            if (__DEV__ && response.config.metadata) {\n                const duration = Date.now() - response.config.metadata.startTime;\n                devLog('API Client', `API ${response.config.method.toUpperCase()} ${response.config.url} - ${duration}ms`);\n            }\n\n            // Cache successful GET responses\n            if (response.config.method === 'get' && response.config.cache !== false) {\n                const cacheKey = `api_${response.config.url}_${JSON.stringify(\n                    response.config.params || {},\n                )}`;\n                const cacheTTL = response.config.cacheTTL || 5 * 60 * 1000; // 5 minutes default\n\n                await cache.set(cacheKey, response.data, {\n                    ttl: cacheTTL,\n                    persistent: response.config.persistCache || false,\n                });\n            }\n\n            return response.data;\n        },\n        async (error) => {\n            const { config, response } = error;\n\n            // Log error in development\n            if (__DEV__) {\n                devError('API Client', `API Error ${config?.method?.toUpperCase()} ${config?.url}`, {\n                    status: response?.status,\n                    data: response?.data,\n                    message: error.message,\n                });\n            }\n\n            // Handle specific error cases\n            if (!response) {\n                // Network error - add to queue if it's a mutation\n                if (config && ['post', 'put', 'patch', 'delete'].includes(config.method)) {\n                    await requestQueue.add(config);\n                    return Promise.reject(new Error('Request queued for retry when online'));\n                }\n\n                return Promise.reject(new Error('Network error - please check your connection'));\n            }\n\n            // Handle 401 - Unauthorized\n            if (response.status === 401 && !config.skipAuthRefresh) {\n                // Clear auth and redirect to login\n                await AsyncStorage.multiRemove(['userToken', 'user']);\n\n                // Notify app about auth failure\n                if (global.authFailureHandler) {\n                    global.authFailureHandler();\n                }\n\n                return Promise.reject(new Error('Session expired - please login again'));\n            }\n\n            // Handle rate limiting\n            if (response.status === 429) {\n                const retryAfter = response.headers['retry-after'];\n                const delay = retryAfter ? parseInt(retryAfter) * 1000 : 5000;\n\n                return new Promise((resolve, reject) => {\n                    setTimeout(async () => {\n                        try {\n                            const result = await client.request(config);\n                            resolve(result);\n                        } catch (retryError) {\n                            reject(retryError);\n                        }\n                    }, delay);\n                });\n            }\n\n            // Extract error message\n            const errorMessage =\n                response.data?.message ||\n                response.data?.error ||\n                error.message ||\n                'An error occurred';\n\n            return Promise.reject(new Error(errorMessage));\n        },\n    );\n\n    // Restore request queue\n    requestQueue.restore();\n\n    // Process queue when online\n    if (global.addEventListener) {\n        global.addEventListener('online', () => {\n            requestQueue.process();\n        });\n    }\n\n    return {\n        client,\n        defaults: client.defaults,\n\n        // Convenience methods with retry\n        get: (url, config) => withRetry(() => client.get(url, config)),\n        post: (url, data, config) => withRetry(() => client.post(url, data, config)),\n        put: (url, data, config) => withRetry(() => client.put(url, data, config)),\n        patch: (url, data, config) => withRetry(() => client.patch(url, data, config)),\n        delete: (url, config) => withRetry(() => client.delete(url, config)),\n\n        // Clear cache for specific endpoint\n        clearCache: (url, params) => {\n            const cacheKey = `api_${url}_${JSON.stringify(params || {})}`;\n            return cache.invalidate(cacheKey);\n        },\n\n        // Clear all API cache\n        clearAllCache: () => cache.invalidatePattern('^api_'),\n\n        // Get cache stats\n        getCacheStats: () => cache.getStats(),\n\n        // Set auth failure handler\n        setAuthFailureHandler: (handler) => {\n            global.authFailureHandler = handler;\n        },\n    };\n};\n\n// Create and export optimized client\nconst apiClient = createOptimizedClient();\n\nexport default apiClient;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/services/api/endpoints.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/services/api/interceptors.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'showErrorAlert' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":24},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1517,1730],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2111,2293],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/services/api/interceptors.js\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport { ERROR_MESSAGES } from '../../constants/messages';\nimport { showErrorAlert } from '../../utils/alerts';\n\nlet isRefreshing = false;\nlet failedQueue = [];\n\nconst processQueue = (error, token = null) => {\n    failedQueue.forEach((prom) => {\n        if (error) {\n            prom.reject(error);\n        } else {\n            prom.resolve(token);\n        }\n    });\n\n    failedQueue = [];\n};\n\nexport const setupInterceptors = (apiClient) => {\n    // Request interceptor\n    apiClient.interceptors.request.use(\n        async (config) => {\n            // Don't add auth header for login/register endpoints\n            const isAuthEndpoint =\n                config.url.includes('/login') || config.url.includes('/register');\n\n            if (!isAuthEndpoint) {\n                try {\n                    const token = await AsyncStorage.getItem('userToken');\n                    if (token) {\n                        config.headers.Authorization = `Bearer ${token}`;\n                    }\n                } catch (error) {\n                    console.error('Error getting token for request:', error);\n                }\n            }\n\n            // Add timestamp to prevent caching\n            const timestamp = Date.now();\n            const separator = config.url.includes('?') ? '&' : '?';\n            config.url = `${config.url}${separator}_t=${timestamp}`;\n\n            if (__DEV__) {\n                console.log('API Request:', {\n                    url: config.url,\n                    method: config.method,\n                    data: config.data,\n                    headers: config.headers,\n                });\n            }\n\n            return config;\n        },\n        (error) => {\n            if (__DEV__) {\n                console.error('API Request Error:', error);\n            }\n            return Promise.reject(error);\n        },\n    );\n\n    // Response interceptor - FIXED\n    apiClient.interceptors.response.use(\n        (response) => {\n            if (__DEV__) {\n                console.log('API Response:', {\n                    url: response.config.url,\n                    status: response.status,\n                    data: response.data,\n                });\n            }\n\n            // Handle both response.data and direct response formats\n            if (response.data !== undefined) {\n                return response.data;\n            }\n            return response;\n        },\n        async (error) => {\n            const originalRequest = error.config;\n\n            if (__DEV__) {\n                console.error('API Response Error:', {\n                    url: originalRequest?.url,\n                    status: error.response?.status,\n                    data: error.response?.data,\n                    message: error.message,\n                });\n            }\n\n            // Handle network errors\n            if (!error.response) {\n                return Promise.reject(new Error(ERROR_MESSAGES.NETWORK_ERROR));\n            }\n\n            const { status, data } = error.response;\n\n            // Check if this is a login/register request\n            const isAuthRequest =\n                originalRequest.url.includes('/login') || originalRequest.url.includes('/register');\n\n            // Handle 401 Unauthorized\n            if (status === 401 && !isAuthRequest) {\n                if (!originalRequest._retry) {\n                    if (isRefreshing) {\n                        return new Promise((resolve, reject) => {\n                            failedQueue.push({ resolve, reject });\n                        })\n                            .then((token) => {\n                                originalRequest.headers.Authorization = `Bearer ${token}`;\n                                return apiClient(originalRequest);\n                            })\n                            .catch((err) => {\n                                return Promise.reject(err);\n                            });\n                    }\n\n                    originalRequest._retry = true;\n                    isRefreshing = true;\n\n                    try {\n                        // Clear auth data and redirect to login\n                        await AsyncStorage.multiRemove(['userToken', 'user']);\n\n                        // Reset the default auth header\n                        delete apiClient.defaults.headers.common['Authorization'];\n\n                        // Process the queue with error\n                        processQueue(new Error('Session expired'), null);\n\n                        // Use setTimeout to ensure navigation is ready\n                        setTimeout(() => {\n                            const { resetRoot } = require('../../navigation/NavigationService');\n                            resetRoot();\n                        }, 100);\n\n                        return Promise.reject(new Error(ERROR_MESSAGES.SESSION_EXPIRED));\n                    } catch (refreshError) {\n                        processQueue(refreshError, null);\n                        return Promise.reject(refreshError);\n                    } finally {\n                        isRefreshing = false;\n                    }\n                }\n            }\n\n            // Handle other error statuses\n            const errorMessage = data?.message || data?.error || ERROR_MESSAGES.GENERIC_ERROR;\n            return Promise.reject(new Error(errorMessage));\n        },\n    );\n};\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/services/authService.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":49,"fix":{"range":[197,197],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`../utils` import should occur before import of `./api/client`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":45,"fix":{"range":[111,243],"text":"import { devLog, devError } from '../utils';\nimport apiClient from './api/client';\nimport { API_ENDPOINTS } from './api/endpoints';\n"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"// frontend/src/services/authService.js\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nimport apiClient from './api/client';\nimport { API_ENDPOINTS } from './api/endpoints';\nimport { devLog, devError } from '../utils';\n\nconst authService = {\n    login: async (email, password) => {\n        try {\n            const response = await apiClient.post(API_ENDPOINTS.AUTH.LOGIN, {\n                email,\n                password,\n            });\n\n            // Handle both response.data and direct response formats\n            const data = response.data || response;\n\n            // Validate response structure\n            if (!data || (!data.token && !data.accessToken)) {\n                devError('AuthService', 'Invalid login response', data);\n                throw new Error('Invalid response format from server');\n            }\n\n            // Normalize token field (handle both 'token' and 'accessToken')\n            const token = data.token || data.accessToken;\n            const user = data.user || data;\n\n            return {\n                token,\n                user,\n                ...data,\n            };\n        } catch (error) {\n            devError('AuthService', 'Login service error', error);\n            throw error;\n        }\n    },\n\n    register: async (name, email, password, professionalPath = null) => {\n        try {\n            const payload = {\n                name,\n                email,\n                password,\n            };\n\n            if (professionalPath) {\n                payload.professionalPath = professionalPath;\n            }\n\n            devLog('AuthService', 'Register payload', payload);\n\n            const response = await apiClient.post(API_ENDPOINTS.AUTH.REGISTER, payload);\n\n            // The interceptor now returns response.data directly\n            const data = response;\n\n            devLog('AuthService', 'Register response data', data);\n\n            // Validate response structure\n            if (!data) {\n                throw new Error('No response data from server');\n            }\n\n            // Backend might return user data directly without token for registration\n            // Check multiple possible response formats\n\n            // Format 1: { token, user }\n            if (data.token && data.user) {\n                return {\n                    token: data.token,\n                    user: data.user,\n                };\n            }\n\n            // Format 2: { accessToken, user }\n            if (data.accessToken && data.user) {\n                return {\n                    token: data.accessToken,\n                    user: data.user,\n                };\n            }\n\n            // Format 3: User object directly (need to login separately)\n            if (data._id && data.email) {\n                devLog('AuthService', 'Registration successful, but no token returned. User needs to login.');\n                // Return user data without token - the auth context should handle this\n                return {\n                    token: null,\n                    user: data,\n                    requiresLogin: true,\n                };\n            }\n\n            // Format 4: { success: true, data: { user } }\n            if (data.success && data.data) {\n                return {\n                    token: data.data.token || null,\n                    user: data.data.user || data.data,\n                    requiresLogin: !data.data.token,\n                };\n            }\n\n            // If we get here, the response format is unexpected\n            devError('AuthService', 'Unexpected register response format', data);\n            throw new Error(\n                'Registration may have succeeded, but the response format was unexpected. Please try logging in.',\n            );\n        } catch (error) {\n            devError('AuthService', 'Register service error', error);\n\n            // The error has already been processed by the interceptor\n            throw error;\n        }\n    },\n\n    getToken: async () => {\n        try {\n            return await AsyncStorage.getItem('userToken');\n        } catch (error) {\n            devError('AuthService', 'Error getting token', error);\n            return null;\n        }\n    },\n\n    getCurrentUser: async () => {\n        try {\n            const response = await apiClient.get(API_ENDPOINTS.AUTH.ME);\n            const data = response.data || response;\n\n            if (!data || !data._id) {\n                throw new Error('Invalid user data from server');\n            }\n\n            return data;\n        } catch (error) {\n            devError('AuthService', 'Get current user error', error);\n            throw error;\n        }\n    },\n\n    getMe: async () => {\n        return authService.getCurrentUser();\n    },\n\n    updateOnboarding: async (professionalPath, pinnedModules) => {\n        try {\n            const response = await apiClient.put(API_ENDPOINTS.AUTH.UPDATE_ONBOARDING, {\n                professionalPath,\n                pinnedModules,\n            });\n            return response.data || response;\n        } catch (error) {\n            devError('AuthService', 'Update onboarding error', error);\n            throw error;\n        }\n    },\n\n    updateOnboardingPath: async (professionalPath) => {\n        try {\n            const response = await apiClient.put('/api/users/professional-path', {\n                professionalPath,\n            });\n            return response.data || response;\n        } catch (error) {\n            devError('AuthService', 'Update onboarding path error', error);\n            throw error;\n        }\n    },\n\n    completeOnboarding: async (checklistItems) => {\n        try {\n            const response = await apiClient.put('/api/users/complete-onboarding', {\n                selectedChecklistItems: checklistItems,\n            });\n            return response.data || response;\n        } catch (error) {\n            devError('AuthService', 'Complete onboarding error', error);\n            throw error;\n        }\n    },\n\n    updateProfile: async (profileData) => {\n        try {\n            const response = await apiClient.put(API_ENDPOINTS.AUTH.UPDATE_PROFILE, profileData);\n            return response.data || response;\n        } catch (error) {\n            devError('AuthService', 'Update profile error', error);\n            throw error;\n        }\n    },\n\n    changePassword: async (currentPassword, newPassword) => {\n        try {\n            const response = await apiClient.put(API_ENDPOINTS.AUTH.CHANGE_PASSWORD, {\n                currentPassword,\n                newPassword,\n            });\n            return response.data || response;\n        } catch (error) {\n            devError('AuthService', 'Change password error', error);\n            throw error;\n        }\n    },\n\n    logout: async () => {\n        try {\n            await apiClient.post(API_ENDPOINTS.AUTH.LOGOUT);\n        } catch (error) {\n            devError('AuthService', 'Logout API error', error);\n            // Don't throw, continue with local logout\n        }\n    },\n\n    setAuthToken: (token) => {\n        if (token) {\n            apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        } else {\n            delete apiClient.defaults.headers.common['Authorization'];\n        }\n    },\n};\n\nexport default authService;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/services/budgetService.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'entriesCache' is assigned a value but never used.","line":10,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'entriesCacheTimestamp' is assigned a value but never used.","line":11,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":26}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import apiClient from './api/client';\nimport { API_ENDPOINTS } from './api/endpoints';\n\n// Cache for categories to avoid repeated API calls\nconst categoriesCache = new Map(); // professionalPath -> categories\nconst cacheTimestamp = new Map(); // professionalPath -> timestamp\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n// Cache for budget entries\nlet entriesCache = null;\nlet entriesCacheTimestamp = null;\n\nconst budgetService = {\n    getBudgetEntries: async (filters = {}) => {\n        try {\n            const response = await apiClient.get(API_ENDPOINTS.BUDGET.LIST, {\n                params: filters,\n            });\n            // Response is now the data directly from interceptor\n            return Array.isArray(response) ? response : response?.entries || [];\n        } catch (error) {\n            console.error('Error fetching budget entries:', error);\n            throw error;\n        }\n    },\n\n    createBudgetEntry: async (entry) => {\n        try {\n            const response = await apiClient.post(API_ENDPOINTS.BUDGET.CREATE, entry);\n            return response;\n        } catch (error) {\n            console.error('Error creating budget entry:', error);\n            throw error;\n        }\n    },\n\n    updateBudgetEntry: async (id, entry) => {\n        try {\n            const response = await apiClient.put(API_ENDPOINTS.BUDGET.UPDATE(id), entry);\n            return response;\n        } catch (error) {\n            console.error('Error updating budget entry:', error);\n            throw error;\n        }\n    },\n\n    deleteBudgetEntry: async (id) => {\n        try {\n            const response = await apiClient.delete(API_ENDPOINTS.BUDGET.DELETE(id));\n            return response;\n        } catch (error) {\n            console.error('Error deleting budget entry:', error);\n            throw error;\n        }\n    },\n\n    getBudgetSummary: async (period = 'month') => {\n        try {\n            const response = await apiClient.get(API_ENDPOINTS.BUDGET.SUMMARY, {\n                params: { period },\n            });\n            return response;\n        } catch (error) {\n            console.error('Error fetching budget summary:', error);\n            throw error;\n        }\n    },\n\n    /**\n     * Fetches budget categories with caching\n     */\n    getCategories: async (professionalPath) => {\n        const cacheKey = professionalPath || 'default';\n\n        // Check if we have valid cached data\n        if (\n            categoriesCache.has(cacheKey) &&\n            cacheTimestamp.has(cacheKey) &&\n            Date.now() - cacheTimestamp.get(cacheKey) < CACHE_DURATION\n        ) {\n            return categoriesCache.get(cacheKey);\n        }\n\n        try {\n            const response = await apiClient.get('/config/categories', {\n                params: professionalPath ? { professionalPath } : {},\n            });\n\n            // Update cache\n            categoriesCache.set(cacheKey, response);\n            cacheTimestamp.set(cacheKey, Date.now());\n\n            return response;\n        } catch (error) {\n            console.error('Failed to fetch categories from API:', error);\n\n            // Return cached data if available, even if expired\n            if (categoriesCache.has(cacheKey)) {\n                return categoriesCache.get(cacheKey);\n            }\n\n            // Return default categories as fallback\n            const defaultCategories =\n                professionalPath === 'ENTREPRENEUR'\n                    ? {\n                        income: [\n                            'Product Sales',\n                            'Service Revenue',\n                            'Investor Funding',\n                            'Grants',\n                            'Other Income',\n                        ],\n                        expense: [\n                            'Salaries & Payroll',\n                            'Office Rent',\n                            'Legal & Accounting',\n                            'Marketing & Sales',\n                            'R&D',\n                            'Operations',\n                            'Other Expenses',\n                        ],\n                    }\n                    : {\n                        income: [\n                            'Project-Based Income',\n                            'Recurring Clients',\n                            'Passive Income',\n                            'Other Income',\n                        ],\n                        expense: [\n                            'Cuota de Autónomo',\n                            'Office/Coworking',\n                            'Software & Tools',\n                            'Professional Services',\n                            'Marketing',\n                            'Travel & Transport',\n                            'Other Expenses',\n                        ],\n                    };\n\n            return defaultCategories;\n        }\n    },\n\n    // Clear categories cache when user changes professional path\n    clearCategoriesCache: () => {\n        categoriesCache.clear();\n        cacheTimestamp.clear();\n        entriesCache = null;\n        entriesCacheTimestamp = null;\n    },\n\n    exportBudgetData: async (format = 'csv', dateRange) => {\n        try {\n            const response = await apiClient.get(API_ENDPOINTS.BUDGET.EXPORT, {\n                params: { format, ...dateRange },\n                responseType: 'blob',\n            });\n            return response;\n        } catch (error) {\n            console.error('Error exporting budget data:', error);\n            throw error;\n        }\n    },\n};\n\nexport default budgetService;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/services/chatService.js","messages":[{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":74,"column":94,"nodeType":"TemplateLiteral","messageId":"missing","endLine":75,"endColumn":1,"fix":{"range":[2978,3015],"text":"} invalid messages`,\n                )"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":130,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":130,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4736,4785],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { USE_MOCK, devLog } from '../config/development';\nimport { devWarn, devError } from '../utils/devLog';\n\nimport apiClient from './api/client';\nimport mockChatService from './mockChatService';\nimport socketService from './socketService';\n\nconst chatService = {\n    // Initialize chat connection\n    async initializeChat(userId) {\n        if (USE_MOCK) {\n            devLog('Chat', 'Using mock chat service');\n            return Promise.resolve();\n        }\n\n        try {\n            // Try to connect socket\n            await socketService.connect(userId);\n            return true;\n        } catch (error) {\n            console.error('Failed to initialize chat:', error);\n            // Continue without socket - API fallback will be used\n            return false;\n        }\n    },\n\n    // Get room messages with fallback\n    async getRoomMessages(roomId, options = {}) {\n        if (USE_MOCK) {\n            return mockChatService.getRoomMessages(roomId);\n        }\n\n        try {\n            const params = {\n                limit: options.limit || 50,\n                ...(options.before && { before: options.before }),\n            };\n\n            // Fixed: Use correct endpoint structure\n            const response = await apiClient.get(`/chat/rooms/${roomId}/messages`, { params });\n\n            // Handle different response structures from backend\n            let messages = [];\n\n            // If backend returns wrapped response: { data: { messages: [...] } }\n            if (response && response.data && Array.isArray(response.data.messages)) {\n                devLog('ChatService', `Retrieved ${response.data.messages.length} messages from response.data.messages`);\n                messages = response.data.messages;\n            }\n            // If backend returns: { messages: [...] }\n            else if (response && Array.isArray(response.messages)) {\n                devLog('ChatService', `Retrieved ${response.messages.length} messages from response.messages`);\n                messages = response.messages;\n            }\n            // If backend returns array directly\n            else if (Array.isArray(response)) {\n                devLog('ChatService', `Retrieved ${response.length} messages (array response)`);\n                messages = response;\n            }\n            // Fallback: check if response itself looks like a message array\n            else if (response && response.length !== undefined) {\n                devLog('ChatService', 'Converting array-like response to array');\n                messages = Array.from(response);\n            }\n\n            // Validate messages have required structure\n            const validMessages = messages.filter(\n                (msg) => msg && msg._id && msg.sender && msg.content !== undefined,\n            );\n\n            if (validMessages.length !== messages.length) {\n                devWarn(\n                    'ChatService',\n                    `Filtered out ${messages.length - validMessages.length} invalid messages`\n                );\n            }\n\n            return validMessages;\n        } catch (error) {\n            devError('ChatService', 'Error fetching messages', error);\n\n            // Fallback to mock data in development\n            if (__DEV__) {\n                devLog('ChatService', 'Using mock messages due to API error');\n                return mockChatService.getRoomMessages(roomId);\n            }\n\n            return [];\n        }\n    },\n\n    // Send message with fallback\n    async sendMessage(roomId, content, type = 'text', attachments = []) {\n        devLog('ChatService', '📤 Sending message', { roomId, content, type });\n        \n        // Always use API to ensure message is saved\n        // Socket will handle real-time delivery\n        try {\n            const response = await apiClient.post(`/chat/rooms/${roomId}/messages`, {\n                content,\n                type,\n                attachments,\n            });\n            \n            devLog('ChatService', '✅ Message sent via API', response);\n            \n            // The backend should emit the message via socket\n            // so we just return the response\n            return response;\n        } catch (error) {\n            devError('ChatService', 'Error sending message', error);\n            throw error;\n        }\n    },\n\n    // Get chat rooms\n    async getChatRooms() {\n        if (USE_MOCK) {\n            return mockChatService.getRooms();\n        }\n\n        try {\n            const response = await apiClient.get('/chat/rooms');\n            return response || [];\n        } catch (error) {\n            console.error('Error fetching chat rooms:', error);\n\n            // Fallback to mock data in development\n            if (__DEV__) {\n                console.log('Using mock rooms due to API error');\n                return mockChatService.getRooms();\n            }\n\n            return [];\n        }\n    },\n\n    // Join room with error handling\n    async joinRoom(roomId) {\n        if (socketService.isConnected()) {\n            socketService.joinRoom(roomId);\n        }\n\n        // Always return messages regardless of socket status\n        return this.getRoomMessages(roomId);\n    },\n\n    // Leave room\n    leaveRoom(roomId) {\n        if (socketService.isConnected()) {\n            socketService.leaveRoom(roomId);\n        }\n    },\n\n    // Check connection status\n    isConnected() {\n        return socketService.isConnected();\n    },\n\n    // Cleanup\n    disconnect() {\n        socketService.disconnect();\n    },\n};\n\nexport default chatService;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/services/checklistService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/services/contentService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/services/eventService.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'API_ENDPOINTS' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import apiClient from './api/client';\nimport { API_ENDPOINTS } from './api/endpoints';\n\nconst eventService = {\n    getEvents: async (params = {}) => {\n        try {\n            // Convert the response to handle both array and object responses\n            const response = await apiClient.get('/events', { params });\n\n            // If response has events property, return that, otherwise assume it's an array\n            if (response && response.events) {\n                return response.events;\n            } else if (Array.isArray(response)) {\n                return response;\n            } else {\n                console.error('Unexpected response format:', response);\n                return [];\n            }\n        } catch (error) {\n            console.error('Error fetching events:', error);\n            throw error;\n        }\n    },\n\n    getEvent: async (id) => {\n        try {\n            const response = await apiClient.get(`/events/${id}`);\n            return response;\n        } catch (error) {\n            console.error('Error fetching event:', error);\n            throw error;\n        }\n    },\n\n    createEvent: async (eventData) => {\n        try {\n            // Ensure required fields are properly formatted\n            const formattedData = {\n                ...eventData,\n                date: new Date(eventData.date).toISOString(),\n                location: {\n                    name: eventData.location.name,\n                    address: eventData.location.address || '',\n                    city: eventData.location.city || 'Alicante',\n                },\n                tags: eventData.tags || [],\n                maxAttendees: eventData.maxAttendees ? parseInt(eventData.maxAttendees) : null,\n            };\n\n            const response = await apiClient.post('/events', formattedData);\n            return response;\n        } catch (error) {\n            console.error('Error creating event:', error);\n            // Provide more specific error messages\n            if (error.response?.data?.message) {\n                throw new Error(error.response.data.message);\n            }\n            throw error;\n        }\n    },\n\n    updateEvent: async (id, eventData) => {\n        try {\n            const response = await apiClient.put(`/events/${id}`, eventData);\n            return response;\n        } catch (error) {\n            console.error('Error updating event:', error);\n            if (error.response?.data?.message) {\n                throw new Error(error.response.data.message);\n            }\n            throw error;\n        }\n    },\n\n    deleteEvent: async (id) => {\n        try {\n            const response = await apiClient.delete(`/events/${id}`);\n            return response;\n        } catch (error) {\n            console.error('Error deleting event:', error);\n            if (error.response?.data?.message) {\n                throw new Error(error.response.data.message);\n            }\n            throw error;\n        }\n    },\n\n    joinEvent: async (id) => {\n        try {\n            const response = await apiClient.post(`/events/${id}/join`);\n            return response;\n        } catch (error) {\n            console.error('Error joining event:', error);\n            if (error.response?.data?.message) {\n                throw new Error(error.response.data.message);\n            }\n            throw error;\n        }\n    },\n\n    leaveEvent: async (id) => {\n        try {\n            const response = await apiClient.post(`/events/${id}/leave`);\n            return response;\n        } catch (error) {\n            console.error('Error leaving event:', error);\n            if (error.response?.data?.message) {\n                throw new Error(error.response.data.message);\n            }\n            throw error;\n        }\n    },\n\n    cancelEvent: async (id) => {\n        try {\n            const response = await apiClient.post(`/events/${id}/cancel`);\n            return response;\n        } catch (error) {\n            console.error('Error cancelling event:', error);\n            if (error.response?.data?.message) {\n                throw new Error(error.response.data.message);\n            }\n            throw error;\n        }\n    },\n\n    getUpcomingEvents: async (limit = 5) => {\n        try {\n            const response = await apiClient.get('/events', {\n                params: {\n                    upcoming: 'true',\n                    limit,\n                },\n            });\n\n            if (response && response.events) {\n                return response.events;\n            } else if (Array.isArray(response)) {\n                return response;\n            } else {\n                return [];\n            }\n        } catch (error) {\n            console.error('Error fetching upcoming events:', error);\n            return [];\n        }\n    },\n};\n\nexport default eventService;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/services/forumService.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1224,1274],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import apiClient from './api/client';\nimport { API_ENDPOINTS } from './api/endpoints';\nimport mockChatService from './mockChatService';\n\n// Cache for groups to reduce API calls\nlet groupsCache = null;\nlet cacheTimestamp = null;\nconst CACHE_DURATION = 2 * 60 * 1000; // 2 minutes\n\nconst forumService = {\n    getForums: async (forceRefresh = false) => {\n        // Check cache first\n        if (\n            !forceRefresh &&\n            groupsCache &&\n            cacheTimestamp &&\n            Date.now() - cacheTimestamp < CACHE_DURATION\n        ) {\n            return groupsCache;\n        }\n\n        try {\n            const response = await apiClient.get(API_ENDPOINTS.FORUM.LIST);\n\n            // Update cache\n            groupsCache = response;\n            cacheTimestamp = Date.now();\n\n            return response;\n        } catch (error) {\n            console.error('Failed to fetch groups:', error);\n\n            // Return cached data if available, even if expired\n            if (groupsCache) {\n                console.warn('Returning stale cache due to error');\n                return groupsCache;\n            }\n\n            // In development, return mock data if API fails\n            if (__DEV__) {\n                console.log('Using mock groups due to API error');\n                return mockChatService.getRooms();\n            }\n\n            // Return empty array as fallback\n            return [];\n        }\n    },\n\n    createForum: async (title, description, tags = []) => {\n        try {\n            const response = await apiClient.post(API_ENDPOINTS.FORUM.CREATE, {\n                title: title.trim(),\n                description: description.trim(),\n                tags: tags.filter((tag) => tag.trim()), // Remove empty tags\n            });\n\n            // Clear cache after creating group\n            groupsCache = null;\n            cacheTimestamp = null;\n\n            return response;\n        } catch (error) {\n            console.error('Failed to create group:', error);\n\n            // Provide better error messages\n            if (error.response?.data?.message) {\n                throw new Error(error.response.data.message);\n            } else if (error.response?.status === 400) {\n                throw new Error('Invalid group data. Please check your input.');\n            } else if (error.response?.status === 401) {\n                throw new Error('You must be logged in to create a group.');\n            } else {\n                throw new Error('Failed to create group. Please try again.');\n            }\n        }\n    },\n\n    getForumDetail: async (forumId) => {\n        try {\n            const response = await apiClient.get(API_ENDPOINTS.FORUM.DETAIL(forumId));\n            return response;\n        } catch (error) {\n            console.error('Failed to fetch group details:', error);\n\n            if (error.response?.status === 404) {\n                throw new Error('Group not found');\n            }\n            throw new Error('Failed to load group details');\n        }\n    },\n\n    createThread: async (forumId, title, content) => {\n        try {\n            const response = await apiClient.post(API_ENDPOINTS.FORUM.CREATE_THREAD(forumId), {\n                title: title.trim(),\n                content: content.trim(),\n            });\n\n            return response;\n        } catch (error) {\n            console.error('Failed to create thread:', error);\n\n            if (error.response?.data?.message) {\n                throw new Error(error.response.data.message);\n            } else if (error.response?.status === 404) {\n                throw new Error('Group not found');\n            } else if (error.response?.status === 401) {\n                throw new Error('You must be logged in to create a thread.');\n            } else {\n                throw new Error('Failed to create thread. Please try again.');\n            }\n        }\n    },\n\n    createPost: async (threadId, content) => {\n        try {\n            const response = await apiClient.post(API_ENDPOINTS.FORUM.CREATE_POST(threadId), {\n                content: content.trim(),\n            });\n            return response;\n        } catch (error) {\n            console.error('Failed to create post:', error);\n\n            if (error.response?.data?.message) {\n                throw new Error(error.response.data.message);\n            } else if (error.response?.status === 404) {\n                throw new Error('Thread not found');\n            } else if (error.response?.status === 401) {\n                throw new Error('You must be logged in to post.');\n            } else {\n                throw new Error('Failed to create post. Please try again.');\n            }\n        }\n    },\n\n    likePost: async (postId) => {\n        try {\n            const response = await apiClient.post(API_ENDPOINTS.FORUM.LIKE_POST(postId));\n            return response;\n        } catch (error) {\n            console.error('Failed to like post:', error);\n            throw new Error('Failed to like post');\n        }\n    },\n\n    deleteForum: async (forumId) => {\n        try {\n            const response = await apiClient.delete(API_ENDPOINTS.FORUM.DELETE(forumId));\n\n            // Clear cache after deleting group\n            groupsCache = null;\n            cacheTimestamp = null;\n\n            return response;\n        } catch (error) {\n            console.error('Error deleting group:', error);\n\n            if (error.response?.status === 403) {\n                throw new Error('You can only delete groups you created.');\n            } else if (error.response?.status === 404) {\n                throw new Error('Group not found');\n            }\n            throw new Error('Failed to delete group');\n        }\n    },\n\n    deleteThread: async (threadId) => {\n        try {\n            const response = await apiClient.delete(API_ENDPOINTS.FORUM.DELETE_THREAD(threadId));\n            return response;\n        } catch (error) {\n            console.error('Error deleting thread:', error);\n\n            if (error.response?.status === 403) {\n                throw new Error('You can only delete threads you created.');\n            } else if (error.response?.status === 404) {\n                throw new Error('Thread not found');\n            }\n            throw new Error('Failed to delete thread');\n        }\n    },\n\n    // Clear groups cache when user logs out or changes\n    clearCache: () => {\n        groupsCache = null;\n        cacheTimestamp = null;\n    },\n};\n\nexport default forumService;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/services/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/services/mockChatService.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'roomId' is defined but never used. Allowed unused args must match /^_/u.","line":159,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":159,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'roomId' is defined but never used. Allowed unused args must match /^_/u.","line":165,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":165,"endColumn":29}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Mock chat service for development when backend is not available\nconst mockMessages = new Map();\nconst mockRooms = [\n    {\n        _id: '1',\n        title: 'General Discussion',\n        description: 'Talk about anything related to living in Alicante',\n        lastMessage: {\n            content: 'Welcome to the general discussion!',\n            sender: { name: 'System' },\n            createdAt: new Date().toISOString(),\n        },\n        onlineCount: 5,\n        unreadCount: 0,\n    },\n    {\n        _id: '2',\n        title: 'Freelancer Tips',\n        description: 'Share tips and experiences as a freelancer',\n        lastMessage: {\n            content: 'Great tips on getting your NIE!',\n            sender: { name: 'Alex' },\n            createdAt: new Date(Date.now() - 1800000).toISOString(),\n        },\n        onlineCount: 3,\n        unreadCount: 2,\n    },\n    {\n        _id: '3',\n        title: 'Entrepreneur Network',\n        description: 'Connect with other entrepreneurs in Alicante',\n        lastMessage: null,\n        onlineCount: 8,\n        unreadCount: 0,\n    },\n];\n\n// Initialize with some default messages\nmockMessages.set('1', [\n    {\n        _id: 'msg1',\n        content: 'Welcome to the general discussion group!',\n        sender: {\n            _id: 'system',\n            name: 'System',\n        },\n        roomId: '1',\n        createdAt: new Date(Date.now() - 3600000).toISOString(),\n        type: 'text',\n    },\n    {\n        _id: 'msg2',\n        content: 'Hey everyone! Just moved to Alicante from London. Any tips for a new freelancer?',\n        sender: {\n            _id: 'user1',\n            name: 'Sarah',\n        },\n        roomId: '1',\n        createdAt: new Date(Date.now() - 3000000).toISOString(),\n        type: 'text',\n    },\n    {\n        _id: 'msg3',\n        content: 'Welcome Sarah! First thing - get your NIE sorted. You\\'ll need it for everything.',\n        sender: {\n            _id: 'user2',\n            name: 'Miguel',\n        },\n        roomId: '1',\n        createdAt: new Date(Date.now() - 2400000).toISOString(),\n        type: 'text',\n    },\n    {\n        _id: 'msg4',\n        content: 'Also, join the local coworking spaces. Great way to network!',\n        sender: {\n            _id: 'user3',\n            name: 'Emma',\n        },\n        roomId: '1',\n        createdAt: new Date(Date.now() - 1800000).toISOString(),\n        type: 'text',\n    },\n]);\n\nmockMessages.set('2', [\n    {\n        _id: 'msg10',\n        content: 'Has anyone here gone through the autonomo registration process recently?',\n        sender: {\n            _id: 'user4',\n            name: 'John',\n        },\n        roomId: '2',\n        createdAt: new Date(Date.now() - 7200000).toISOString(),\n        type: 'text',\n    },\n    {\n        _id: 'msg11',\n        content: 'Yes! Just did it last month. Happy to share my experience.',\n        sender: {\n            _id: 'user5',\n            name: 'Ana',\n        },\n        roomId: '2',\n        createdAt: new Date(Date.now() - 5400000).toISOString(),\n        type: 'text',\n    },\n]);\n\nexport const mockChatService = {\n    // Get chat groups\n    getRooms: async () => {\n        await new Promise((resolve) => setTimeout(resolve, 500)); // Simulate network delay\n        return mockRooms;\n    },\n\n    // Get messages for a group\n    getRoomMessages: async (roomId) => {\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        return mockMessages.get(roomId) || [];\n    },\n\n    // Send a message (mock)\n    sendMessage: async (roomId, content, userId = 'current-user', userName = 'You') => {\n        await new Promise((resolve) => setTimeout(resolve, 200));\n\n        const newMessage = {\n            _id: `msg_${Date.now()}`,\n            content,\n            sender: {\n                _id: userId,\n                name: userName,\n            },\n            roomId,\n            createdAt: new Date().toISOString(),\n            type: 'text',\n        };\n\n        // Add to mock storage\n        const roomMessages = mockMessages.get(roomId) || [];\n        roomMessages.push(newMessage);\n        mockMessages.set(roomId, roomMessages);\n\n        // Update last message in group\n        const room = mockRooms.find((r) => r._id === roomId);\n        if (room) {\n            room.lastMessage = {\n                content,\n                sender: { name: userName },\n                createdAt: newMessage.createdAt,\n            };\n        }\n\n        return newMessage;\n    },\n\n    // Join a group (mock)\n    joinRoom: async (roomId) => {\n        await new Promise((resolve) => setTimeout(resolve, 100));\n        return { success: true };\n    },\n\n    // Leave a group (mock)\n    leaveRoom: async (roomId) => {\n        await new Promise((resolve) => setTimeout(resolve, 100));\n        return { success: true };\n    },\n};\n\nexport default mockChatService;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/services/personalChatService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/services/pollingService.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":38,"fix":{"range":[167,167],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`../utils` import should occur before import of `./api/client`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":45,"fix":{"range":[130,213],"text":"import { devLog, devError } from '../utils';\nimport apiClient from './api/client';\n"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":61,"column":77,"nodeType":"Property","messageId":"missing","endLine":62,"endColumn":1,"fix":{"range":[1853,1876],"text":"),\n                    }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":62,"column":22,"nodeType":"Property","messageId":"missing","endLine":63,"endColumn":1,"fix":{"range":[1875,1894],"text":"},\n                }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":147,"column":57,"nodeType":"Property","messageId":"missing","endLine":148,"endColumn":1,"fix":{"range":[4268,4279],"text":"),\n        }"}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"/**\n * Polling Service - Alternative to WebSocket for real-time updates\n * Uses HTTP polling when WebSocket connection fails\n */\n\nimport apiClient from './api/client';\nimport { devLog, devError } from '../utils';\n\nclass PollingService {\n    constructor() {\n        this.pollingIntervals = new Map();\n        this.isActive = false;\n        this.callbacks = new Map();\n    }\n\n    /**\n     * Start polling for updates\n     */\n    start() {\n        if (this.isActive) {\n            devLog('PollingService', 'Already active');\n            return;\n        }\n\n        this.isActive = true;\n        devLog('PollingService', 'Starting polling service as WebSocket fallback');\n\n        // Poll for different types of updates (endpoints without leading slash)\n        this.startPolling('messages', 'chat/updates', 5000); // Every 5 seconds\n        this.startPolling('forums', 'forums/updates', 10000); // Every 10 seconds\n        this.startPolling('notifications', 'users/notifications', 15000); // Every 15 seconds\n    }\n\n    /**\n     * Stop all polling\n     */\n    stop() {\n        this.isActive = false;\n        this.pollingIntervals.forEach((interval, key) => {\n            clearInterval(interval);\n            devLog('PollingService', `Stopped polling for ${key}`);\n        });\n        this.pollingIntervals.clear();\n    }\n\n    /**\n     * Start polling for a specific endpoint\n     */\n    startPolling(key, endpoint, interval) {\n        // Clear existing interval if any\n        if (this.pollingIntervals.has(key)) {\n            clearInterval(this.pollingIntervals.get(key));\n        }\n\n        const pollFunction = async () => {\n            if (!this.isActive) return;\n\n            try {\n                const response = await apiClient.get(endpoint, {\n                    params: {\n                        since: new Date(Date.now() - interval).toISOString()\n                    }\n                });\n\n                if (response.data && response.data.updates) {\n                    this.processUpdates(key, response.data.updates);\n                }\n            } catch (error) {\n                // Silently handle errors to avoid spamming logs\n                if (error.response?.status !== 404) {\n                    devError('PollingService', `Error polling ${key}:`, error.message);\n                }\n            }\n        };\n\n        // Initial poll\n        pollFunction();\n\n        // Set up interval\n        const intervalId = setInterval(pollFunction, interval);\n        this.pollingIntervals.set(key, intervalId);\n        \n        devLog('PollingService', `Started polling ${key} every ${interval}ms`);\n    }\n\n    /**\n     * Process updates received from polling\n     */\n    processUpdates(type, updates) {\n        if (!updates || updates.length === 0) return;\n\n        devLog('PollingService', `Processing ${updates.length} ${type} updates`);\n\n        // Emit updates to registered callbacks\n        updates.forEach(update => {\n            const callbacks = this.callbacks.get(update.event) || [];\n            callbacks.forEach(callback => {\n                try {\n                    callback(update.data);\n                } catch (error) {\n                    devError('PollingService', 'Error in update callback:', error);\n                }\n            });\n        });\n    }\n\n    /**\n     * Register a callback for specific events\n     */\n    on(event, callback) {\n        if (!this.callbacks.has(event)) {\n            this.callbacks.set(event, []);\n        }\n        this.callbacks.get(event).push(callback);\n\n        // Return unsubscribe function\n        return () => {\n            const callbacks = this.callbacks.get(event) || [];\n            const index = callbacks.indexOf(callback);\n            if (index > -1) {\n                callbacks.splice(index, 1);\n            }\n        };\n    }\n\n    /**\n     * Remove all callbacks for an event\n     */\n    off(event) {\n        this.callbacks.delete(event);\n    }\n\n    /**\n     * Check if polling is active\n     */\n    isPollingActive() {\n        return this.isActive;\n    }\n\n    /**\n     * Get polling status\n     */\n    getStatus() {\n        return {\n            active: this.isActive,\n            endpoints: Array.from(this.pollingIntervals.keys()),\n            callbacks: Array.from(this.callbacks.keys())\n        };\n    }\n}\n\n// Create singleton instance\nconst pollingService = new PollingService();\n\nexport default pollingService;","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/services/realtimeService.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":47,"fix":{"range":[243,243],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`./pollingService` import should occur before import of `./socketServiceFixed`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":47,"fix":{"range":[147,244],"text":"import pollingService from './pollingService';\nimport socketService from './socketServiceFixed';\n"}},{"ruleId":"import/order","severity":2,"message":"`../utils` import should occur before import of `./socketServiceFixed`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":45,"fix":{"range":[147,289],"text":"import { devLog, devError } from '../utils';\nimport socketService from './socketServiceFixed';\nimport pollingService from './pollingService';\n"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":216,"column":58,"nodeType":"Property","messageId":"missing","endLine":217,"endColumn":1,"fix":{"range":[6623,6642],"text":"),\n                }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":220,"column":62,"nodeType":"Property","messageId":"missing","endLine":221,"endColumn":1,"fix":{"range":[6792,6811],"text":"),\n                }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":221,"column":18,"nodeType":"Property","messageId":"missing","endLine":222,"endColumn":1,"fix":{"range":[6810,6821],"text":"},\n        }"}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"/**\n * Realtime Service - Manages real-time updates using WebSocket or HTTP polling\n * Automatically falls back to polling if WebSocket fails\n */\n\nimport socketService from './socketServiceFixed';\nimport pollingService from './pollingService';\nimport { devLog, devError } from '../utils';\n\nclass RealtimeService {\n    constructor() {\n        this.mode = 'none'; // 'websocket', 'polling', or 'none'\n        this.listeners = new Map();\n        this.connectionCheckInterval = null;\n        this.userId = null;\n    }\n\n    /**\n     * Initialize real-time connection\n     */\n    async initialize(userId) {\n        this.userId = userId;\n        devLog('RealtimeService', 'Initializing real-time connection', { userId });\n\n        // Try WebSocket first\n        const socketConnected = await this.tryWebSocket(userId);\n        \n        if (socketConnected) {\n            this.mode = 'websocket';\n            devLog('RealtimeService', '✅ Using WebSocket for real-time updates');\n        } else {\n            // Fall back to polling\n            this.mode = 'polling';\n            pollingService.start();\n            this.setupPollingListeners();\n            devLog('RealtimeService', '📊 Using HTTP polling for updates (WebSocket unavailable)');\n        }\n\n        // Monitor connection and switch modes if needed\n        this.startConnectionMonitoring();\n        \n        return this.mode;\n    }\n\n    /**\n     * Try to establish WebSocket connection\n     */\n    async tryWebSocket(userId) {\n        try {\n            // Give socket 5 seconds to connect\n            await socketService.connect(userId);\n            \n            // Wait a bit for connection to establish\n            await new Promise(resolve => setTimeout(resolve, 3000));\n            \n            return socketService.isConnected();\n        } catch (error) {\n            devError('RealtimeService', 'WebSocket connection failed:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Setup polling listeners that mimic socket events\n     */\n    setupPollingListeners() {\n        // Map polling events to socket-like events\n        pollingService.on('new_message', (data) => {\n            this.emitLocal('new_message', data);\n        });\n\n        pollingService.on('forum_update', (data) => {\n            this.emitLocal('forum_update', data);\n        });\n\n        pollingService.on('user_status_update', (data) => {\n            this.emitLocal('user_status_update', data);\n        });\n\n        pollingService.on('notification', (data) => {\n            this.emitLocal('notification', data);\n        });\n    }\n\n    /**\n     * Monitor connection and switch between modes as needed\n     */\n    startConnectionMonitoring() {\n        this.connectionCheckInterval = setInterval(async () => {\n            if (this.mode === 'polling' && this.userId) {\n                // Try to upgrade to WebSocket\n                const socketConnected = await this.tryWebSocket(this.userId);\n                if (socketConnected) {\n                    devLog('RealtimeService', '🔄 Upgrading from polling to WebSocket');\n                    pollingService.stop();\n                    this.mode = 'websocket';\n                }\n            } else if (this.mode === 'websocket' && !socketService.isConnected()) {\n                // Downgrade to polling if WebSocket lost\n                devLog('RealtimeService', '🔄 Downgrading from WebSocket to polling');\n                this.mode = 'polling';\n                pollingService.start();\n                this.setupPollingListeners();\n            }\n        }, 30000); // Check every 30 seconds\n    }\n\n    /**\n     * Stop connection monitoring\n     */\n    stopConnectionMonitoring() {\n        if (this.connectionCheckInterval) {\n            clearInterval(this.connectionCheckInterval);\n            this.connectionCheckInterval = null;\n        }\n    }\n\n    /**\n     * Register event listener (works for both WebSocket and polling)\n     */\n    on(event, callback) {\n        // Store listener\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, new Set());\n        }\n        this.listeners.get(event).add(callback);\n\n        // Register with appropriate service\n        if (this.mode === 'websocket') {\n            socketService.on(event, callback);\n        }\n        // Polling listeners are already set up in setupPollingListeners\n\n        // Return unsubscribe function\n        return () => {\n            const eventListeners = this.listeners.get(event);\n            if (eventListeners) {\n                eventListeners.delete(callback);\n            }\n            if (this.mode === 'websocket') {\n                socketService.off(event, callback);\n            }\n        };\n    }\n\n    /**\n     * Remove event listener\n     */\n    off(event, callback) {\n        const eventListeners = this.listeners.get(event);\n        if (eventListeners) {\n            eventListeners.delete(callback);\n        }\n        if (this.mode === 'websocket') {\n            socketService.off(event, callback);\n        }\n    }\n\n    /**\n     * Emit event to all local listeners\n     */\n    emitLocal(event, data) {\n        const eventListeners = this.listeners.get(event);\n        if (eventListeners) {\n            eventListeners.forEach(callback => {\n                try {\n                    callback(data);\n                } catch (error) {\n                    devError('RealtimeService', `Error in ${event} listener:`, error);\n                }\n            });\n        }\n    }\n\n    /**\n     * Send data to server (only works with WebSocket)\n     */\n    emit(event, data) {\n        if (this.mode === 'websocket') {\n            socketService.emit(event, data);\n        } else {\n            devLog('RealtimeService', 'Cannot emit in polling mode, using API instead');\n            // In polling mode, updates should go through normal API calls\n        }\n    }\n\n    /**\n     * Join a room (WebSocket only)\n     */\n    joinRoom(roomId) {\n        if (this.mode === 'websocket') {\n            socketService.joinRoom(roomId);\n        }\n        // In polling mode, room filtering happens server-side\n    }\n\n    /**\n     * Leave a room (WebSocket only)\n     */\n    leaveRoom(roomId) {\n        if (this.mode === 'websocket') {\n            socketService.leaveRoom(roomId);\n        }\n    }\n\n    /**\n     * Get current connection status\n     */\n    getStatus() {\n        return {\n            mode: this.mode,\n            connected: this.mode !== 'none',\n            details: this.mode === 'websocket' \n                ? {\n                    socketConnected: socketService.isConnected(),\n                    socketId: socketService.getSocketId()\n                }\n                : {\n                    pollingActive: pollingService.isPollingActive(),\n                    pollingStatus: pollingService.getStatus()\n                }\n        };\n    }\n\n    /**\n     * Disconnect and cleanup\n     */\n    disconnect() {\n        this.stopConnectionMonitoring();\n        \n        if (this.mode === 'websocket') {\n            socketService.disconnect();\n        } else if (this.mode === 'polling') {\n            pollingService.stop();\n        }\n        \n        this.mode = 'none';\n        this.listeners.clear();\n        this.userId = null;\n    }\n}\n\n// Create singleton instance\nconst realtimeService = new RealtimeService();\n\n// Export for debugging\nif (__DEV__) {\n    global.realtimeService = realtimeService;\n}\n\nexport default realtimeService;","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/services/socketService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/services/socketService.original.js","messages":[{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":66,"column":38,"nodeType":"Property","messageId":"missing","endLine":67,"endColumn":1,"fix":{"range":[2390,2406],"text":"OS,\n            }"}},{"ruleId":"no-unused-vars","severity":2,"message":"'reject' is defined but never used. Allowed unused args must match /^_/u.","line":104,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":48},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":145,"column":47,"nodeType":"Property","messageId":"missing","endLine":146,"endColumn":1,"fix":{"range":[5438,5469],"text":"stack,\n                        }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":146,"column":26,"nodeType":"ObjectExpression","messageId":"missing","endLine":147,"endColumn":1,"fix":{"range":[5468,5491],"text":"},\n                    )"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":249,"column":54,"nodeType":"Property","messageId":"missing","endLine":250,"endColumn":1,"fix":{"range":[9321,9348],"text":"connected,\n                }"}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"// frontend/src/services/socketService.js\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Platform } from 'react-native';\nimport io from 'socket.io-client';\n\nimport { USE_WEBSOCKET, devLog } from '../config/development';\nimport { API_BASE_URL } from '../config/network';\n\nclass SocketService {\n    constructor() {\n        this.socket = null;\n        this.listeners = new Map();\n        this.reconnectAttempts = 0;\n        this.maxReconnectAttempts = 5;\n        this.reconnectDelay = 1000;\n        this.messageQueue = [];\n        this.isConnecting = false;\n        this.isAuthenticated = false;\n        this.heartbeatInterval = null;\n        this.connectionTimeout = null;\n        this.userId = null;\n        this.userStatusListeners = new Map();\n        this.connectionState = 'disconnected'; // 'disconnected', 'connecting', 'connected'\n        this.statusUpdateCallbacks = new Map();\n    }\n\n    async connect(userId) {\n        // Always attempt connection in production, skip only in development if disabled\n        const shouldConnect = __DEV__ ? USE_WEBSOCKET : true;\n\n        if (!shouldConnect) {\n            devLog('Socket', 'WebSocket disabled in configuration');\n            return Promise.resolve();\n        }\n\n        if (this.socket?.connected || this.isConnecting) {\n            devLog('Socket', 'Already connected or connecting');\n            return Promise.resolve();\n        }\n\n        this.isConnecting = true;\n        this.connectionState = 'connecting';\n        this.userId = userId;\n\n        try {\n            const token = await AsyncStorage.getItem('userToken');\n            if (!token) {\n                devLog('Socket', 'No authentication token found, skipping socket connection');\n                this.isConnecting = false;\n                this.connectionState = 'disconnected';\n                return Promise.resolve();\n            }\n\n            // Clear any existing connection\n            this.disconnect();\n\n            // Determine socket URL\n            const socketUrl = this.getSocketUrl();\n            devLog('Socket', `Attempting connection to: ${socketUrl}`);\n            \n            // Log more details about the connection attempt\n            devLog('Socket', 'Connection details:', {\n                url: socketUrl,\n                hasToken: !!token,\n                userId: userId,\n                platform: Platform.OS\n            });\n\n            // Create socket connection with optimized settings\n            this.socket = io(socketUrl, {\n                auth: { token: token || '' },\n                transports: ['websocket', 'polling'], // Try websocket first\n                reconnection: true,\n                reconnectionAttempts: this.maxReconnectAttempts,\n                reconnectionDelay: this.reconnectDelay,\n                reconnectionDelayMax: 5000,\n                timeout: 30000,\n                autoConnect: false,\n                forceNew: true,\n                path: '/socket.io/',\n                upgrade: true,\n                rememberUpgrade: true,\n\n                // Platform-specific options\n                ...(Platform.OS === 'android' && {\n                    jsonp: false,\n                    forceBase64: true,\n                }),\n\n                // Query parameters\n                query: {\n                    platform: Platform.OS,\n                    version: '1.0.0',\n                    userId: userId,\n                    token: token, // Also send token in query for fallback\n                },\n            });\n\n            this.setupEventHandlers();\n\n            // Connect socket\n            this.socket.connect();\n\n            return new Promise((resolve, reject) => {\n                this.connectionTimeout = setTimeout(() => {\n                    this.isConnecting = false;\n                    this.connectionState = 'disconnected';\n                    if (this.socket && !this.socket.connected) {\n                        this.socket.disconnect();\n                    }\n                    devLog('Socket', 'Connection timeout - continuing without socket');\n                    resolve(); // Resolve instead of reject to allow app to continue\n                }, 15000);\n\n                this.socket.once('connect', () => {\n                    clearTimeout(this.connectionTimeout);\n                    devLog('Socket', 'Connected successfully');\n                    this.isConnecting = false;\n                    this.connectionState = 'connected';\n                    this.reconnectAttempts = 0;\n\n                    // Start heartbeat\n                    this.startHeartbeat();\n\n                    // Authenticate\n                    this.authenticate(userId);\n\n                    // Update user status to online\n                    this.updateUserStatus(true);\n\n                    resolve();\n                });\n\n                this.socket.once('connect_error', (error) => {\n                    clearTimeout(this.connectionTimeout);\n                    this.isConnecting = false;\n                    this.connectionState = 'disconnected';\n                    devLog(\n                        'Socket',\n                        `Connection error: ${error.message} - Details: ${error.type || 'Unknown'}`,\n                        {\n                            message: error.message,\n                            type: error.type,\n                            data: error.data,\n                            stack: error.stack\n                        }\n                    );\n                    resolve(); // Resolve instead of reject to allow app to continue\n                });\n            });\n        } catch (error) {\n            this.isConnecting = false;\n            this.connectionState = 'disconnected';\n            devLog('Socket', `Connection failed: ${error.message} - continuing without socket`);\n            return Promise.resolve(); // Allow app to continue without socket\n        }\n    }\n\n    getSocketUrl() {\n        // Get base URL without /api\n        let baseUrl = API_BASE_URL.replace('/api', '');\n        \n        // In development, ensure we use the correct IP\n        if (__DEV__ && Platform.OS !== 'web') {\n            // For React Native, we need to use the actual IP, not localhost\n            if (baseUrl.includes('localhost')) {\n                // Replace localhost with 127.0.0.1 for better compatibility\n                baseUrl = baseUrl.replace('localhost', '127.0.0.1');\n            }\n        }\n        \n        devLog('Socket', 'Socket URL:', baseUrl);\n        return baseUrl;\n    }\n\n    setupEventHandlers() {\n        if (!this.socket) return;\n\n        // Connection events\n        this.socket.on('connect', () => {\n            this.connectionState = 'connected';\n            devLog('Socket', `Connected with ID: ${this.socket.id}`);\n\n            // Re-authenticate on reconnection\n            if (this.userId) {\n                this.authenticate(this.userId);\n            }\n\n            this.updateUserStatus(true);\n            this.flushMessageQueue();\n            this.notifyConnectionStateChange('connected');\n        });\n\n        this.socket.on('disconnect', (reason) => {\n            this.connectionState = 'disconnected';\n            devLog('Socket', `Disconnected: ${reason}`);\n            this.stopHeartbeat();\n            this.isAuthenticated = false;\n            this.updateUserStatus(false);\n            this.notifyConnectionStateChange('disconnected');\n\n            // Auto-reconnect for certain disconnect reasons\n            if (reason === 'io server disconnect' || reason === 'transport close') {\n                setTimeout(() => {\n                    if (this.userId && this.connectionState === 'disconnected') {\n                        this.connect(this.userId);\n                    }\n                }, 2000);\n            }\n        });\n\n        this.socket.on('reconnect', (attemptNumber) => {\n            devLog('Socket', `Reconnected after ${attemptNumber} attempts`);\n            this.authenticate(this.userId);\n            this.updateUserStatus(true);\n            this.flushMessageQueue();\n        });\n\n        this.socket.on('reconnect_attempt', (attemptNumber) => {\n            devLog('Socket', `Reconnection attempt ${attemptNumber}`);\n            this.reconnectAttempts = attemptNumber;\n        });\n\n        this.socket.on('error', (error) => {\n            devLog('Socket', `Error: ${error.message || error}`);\n        });\n\n        // Custom events\n        this.socket.on('authenticated', (data) => {\n            devLog('Socket', 'Authenticated successfully');\n            this.isAuthenticated = true;\n            this.emit('authenticated', data);\n\n            // Update online status after authentication\n            this.updateUserStatus(true);\n        });\n\n        // Debug: Log all incoming events\n        this.socket.onAny((eventName, ...args) => {\n            devLog('Socket', `📨 Received event: ${eventName}`, args);\n            \n            // Special logging for new_message events\n            if (eventName === 'new_message') {\n                devLog('Socket', '🔴 NEW_MESSAGE EVENT RECEIVED IN SOCKET SERVICE', {\n                    eventName,\n                    args,\n                    timestamp: new Date().toISOString(),\n                    isAuthenticated: this.isAuthenticated,\n                    connected: this.socket?.connected\n                });\n            }\n        });\n\n        this.socket.on('auth_error', (data) => {\n            devLog('Socket', `Authentication error: ${data.message || 'Unknown error'}`);\n            this.isAuthenticated = false;\n        });\n\n        this.socket.on('heartbeat_ack', () => {\n            // Heartbeat acknowledged\n        });\n\n        // User status events\n        this.socket.on('user_status_update', (data) => {\n            devLog('Socket', `User ${data.userId} is ${data.isOnline ? 'online' : 'offline'}`);\n            this.handleUserStatusUpdate(data);\n            this.notifyStatusUpdate(data);\n        });\n\n        this.socket.on('user_status_response', (data) => {\n            this.notifyStatusUpdate(data);\n        });\n\n        this.socket.on('users_online', (data) => {\n            devLog('Socket', `Online users: ${data.users.length}`);\n            this.handleOnlineUsersList(data.users);\n            this.notifyOnlineUsers(data.users);\n        });\n\n        this.socket.on('online_users', (data) => {\n            this.notifyOnlineUsers(data.users);\n        });\n    }\n\n    authenticate(userId) {\n        if (this.socket?.connected) {\n            devLog('Socket', `Authenticating for user: ${userId}`);\n            this.socket.emit('authenticate', { userId });\n        }\n    }\n\n    startHeartbeat() {\n        this.stopHeartbeat();\n        this.heartbeatInterval = setInterval(() => {\n            if (this.socket?.connected) {\n                this.socket.emit('heartbeat');\n            }\n        }, 25000); // 25 seconds\n    }\n\n    stopHeartbeat() {\n        if (this.heartbeatInterval) {\n            clearInterval(this.heartbeatInterval);\n            this.heartbeatInterval = null;\n        }\n    }\n\n    updateUserStatus(isOnline) {\n        if (this.socket?.connected && this.isAuthenticated) {\n            devLog('Socket', `Updating user status to ${isOnline ? 'online' : 'offline'}`);\n            this.socket.emit('update_status', { isOnline });\n        }\n    }\n\n    handleUserStatusUpdate(data) {\n        // Notify all listeners about user status change\n        this.userStatusListeners.forEach((callback) => {\n            callback(data);\n        });\n    }\n\n    handleOnlineUsersList(users) {\n        // Notify all listeners about online users list\n        this.emit('online_users', users);\n    }\n\n    // Enhanced subscribe to user status updates\n    subscribeToUserStatus(userId, callback) {\n        const id = `${userId}_${Date.now()}`;\n        this.statusUpdateCallbacks.set(id, { userId, callback });\n\n        // Also add to legacy listeners for backward compatibility\n        const listenerId = `${userId}_${Date.now()}_legacy`;\n        this.userStatusListeners.set(listenerId, callback);\n\n        // Request current status\n        if (this.isConnected()) {\n            this.socket.emit('get_user_status', { userId });\n        }\n\n        // Return unsubscribe function\n        return () => {\n            this.statusUpdateCallbacks.delete(id);\n            this.userStatusListeners.delete(listenerId);\n        };\n    }\n\n    unsubscribeFromUserStatus(listenerId) {\n        this.userStatusListeners.delete(listenerId);\n    }\n\n    // Notify all status update subscribers\n    notifyStatusUpdate(data) {\n        this.statusUpdateCallbacks.forEach(({ userId, callback }) => {\n            if (userId === data.userId) {\n                callback(data);\n            }\n        });\n    }\n\n    // Connection state change notifications\n    notifyConnectionStateChange(state) {\n        this.emit('connection_state_change', state);\n    }\n\n    // Notify online users\n    notifyOnlineUsers(users) {\n        this.emit('online_users_update', users);\n    }\n\n    // Get current connection state\n    getConnectionState() {\n        return this.connectionState;\n    }\n\n    // Force reconnect\n    forceReconnect() {\n        this.disconnect();\n        if (this.userId) {\n            setTimeout(() => this.connect(this.userId), 1000);\n        }\n    }\n\n    flushMessageQueue() {\n        while (this.messageQueue.length > 0 && this.socket?.connected) {\n            const { event, data } = this.messageQueue.shift();\n            this.socket.emit(event, data);\n        }\n    }\n\n    emit(event, data) {\n        if (this.socket?.connected && this.isAuthenticated) {\n            this.socket.emit(event, data);\n        } else {\n            // Queue messages when not connected\n            this.messageQueue.push({ event, data });\n            devLog('Socket', `Message queued: ${event}`);\n        }\n    }\n\n    on(event, callback) {\n        if (!this.socket) {\n            devLog('Socket', 'Not initialized - event listener not added');\n            return;\n        }\n\n        // Remove existing listener if it exists\n        this.off(event, callback);\n\n        // Wrap callback with logging for debugging\n        const wrappedCallback = (...args) => {\n            devLog('Socket', `🎯 Event '${event}' triggered`, args);\n            callback(...args);\n        };\n\n        this.socket.on(event, wrappedCallback);\n\n        // Track listeners for cleanup\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, new Set());\n        }\n        this.listeners.get(event).add(wrappedCallback);\n        \n        devLog('Socket', `✅ Listener added for event: ${event}`);\n    }\n\n    off(event, callback) {\n        if (!this.socket) return;\n\n        this.socket.off(event, callback);\n\n        // Remove from tracked listeners\n        if (this.listeners.has(event)) {\n            this.listeners.get(event).delete(callback);\n            if (this.listeners.get(event).size === 0) {\n                this.listeners.delete(event);\n            }\n        }\n    }\n\n    // Chat-specific methods\n    joinRoom(roomId) {\n        if (this.isConnected()) {\n            this.emit('joinRoom', roomId);\n        }\n    }\n\n    leaveRoom(roomId) {\n        if (this.isConnected()) {\n            this.emit('leaveRoom', roomId);\n        }\n    }\n\n    sendMessage(data) {\n        this.emit('sendMessage', data);\n    }\n\n    typing(roomId, isTyping) {\n        if (this.isConnected()) {\n            this.emit('typing', { roomId, isTyping });\n        }\n    }\n\n    markMessagesAsRead(roomId, messageIds) {\n        if (this.isConnected()) {\n            this.emit('markAsRead', { roomId, messageIds });\n        }\n    }\n\n    // Personal messaging methods\n    sendPersonalMessage(data) {\n        this.emit('private_message', data);\n    }\n\n    markPersonalMessageAsRead(messageIds, conversationId) {\n        if (this.isConnected()) {\n            this.emit('mark_personal_messages_read', { messageIds, conversationId });\n        }\n    }\n\n    // Update typing to support both room and personal messages\n    typingPersonal(recipientId, isTyping) {\n        if (this.isConnected()) {\n            this.emit('personal_typing', { recipientId, isTyping });\n        }\n    }\n\n    // Join personal conversation\n    joinPersonalConversation(conversationId) {\n        if (this.isConnected()) {\n            this.emit('join_personal_conversation', conversationId);\n        }\n    }\n\n    // Leave personal conversation\n    leavePersonalConversation(conversationId) {\n        if (this.isConnected()) {\n            this.emit('leave_personal_conversation', conversationId);\n        }\n    }\n\n    // Get online status for a user\n    getUserOnlineStatus(userId) {\n        if (this.isConnected()) {\n            this.emit('get_user_status', { userId });\n        }\n    }\n\n    // Block/unblock user\n    blockUser(userId, block = true) {\n        if (this.isConnected()) {\n            this.emit(block ? 'block_user' : 'unblock_user', userId);\n        }\n    }\n\n    disconnect() {\n        this.stopHeartbeat();\n\n        if (this.connectionTimeout) {\n            clearTimeout(this.connectionTimeout);\n            this.connectionTimeout = null;\n        }\n\n        if (this.socket) {\n            // Update status to offline before disconnecting\n            this.updateUserStatus(false);\n\n            // Remove all socket event listeners\n            this.socket.removeAllListeners();\n            \n            // Remove all custom listeners\n            this.listeners.forEach((callbacks, event) => {\n                callbacks.forEach((callback) => {\n                    this.socket.off(event, callback);\n                });\n            });\n            this.listeners.clear();\n            this.userStatusListeners.clear();\n            this.statusUpdateCallbacks.clear();\n\n            // Clear message queue\n            this.messageQueue = [];\n\n            // Disconnect socket\n            this.socket.disconnect();\n            this.socket = null;\n        }\n\n        // Clear all references\n        this.isAuthenticated = false;\n        this.isConnecting = false;\n        this.connectionState = 'disconnected';\n        this.userId = null;\n        this.currentRoom = null;\n        this.typingTimeout = null;\n    }\n\n    isConnected() {\n        return this.socket?.connected && this.isAuthenticated;\n    }\n\n    getSocketId() {\n        return this.socket?.id || null;\n    }\n\n    // Retry connection with exponential backoff\n    async retryConnection() {\n        if (this.isConnecting || this.socket?.connected) {\n            return;\n        }\n\n        const backoffDelay = Math.min(\n            this.reconnectDelay * Math.pow(2, this.reconnectAttempts),\n            30000, // Max 30 seconds\n        );\n\n        devLog('Socket', `Retrying connection in ${backoffDelay}ms`);\n\n        setTimeout(async () => {\n            if (this.userId) {\n                try {\n                    await this.connect(this.userId);\n                } catch (error) {\n                    devLog('Socket', `Retry failed: ${error.message}`);\n                    this.reconnectAttempts++;\n                    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n                        this.retryConnection();\n                    }\n                }\n            }\n        }, backoffDelay);\n    }\n}\n\n// Create singleton instance\nconst socketService = new SocketService();\n\n// Export for debugging in development\nif (__DEV__) {\n    global.socketService = socketService;\n}\n\nexport default socketService;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/services/socketServiceFixed.js","messages":[{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":57,"column":39,"nodeType":"Property","messageId":"missing","endLine":58,"endColumn":1,"fix":{"range":[1894,1914],"text":"'',\n                }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":61,"column":42,"nodeType":"Property","messageId":"missing","endLine":62,"endColumn":1,"fix":{"range":[2016,2036],"text":"OS,\n                }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":62,"column":18,"nodeType":"Property","messageId":"missing","endLine":63,"endColumn":1,"fix":{"range":[2035,2050],"text":"},\n            }"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"/**\n * Fixed Socket Service\n * Handles WebSocket connections with proper error handling and fallback\n */\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Platform } from 'react-native';\nimport io from 'socket.io-client';\n\nimport { API_BASE_URL } from '../config/network';\nimport { devLog, devError } from '../utils';\n\nclass SocketServiceFixed {\n    constructor() {\n        this.socket = null;\n        this.isAuthenticated = false;\n        this.userId = null;\n        this.connectionState = 'disconnected';\n        this.listeners = new Map();\n    }\n\n    async connect(userId) {\n        if (this.socket?.connected) {\n            devLog('Socket', 'Already connected');\n            return Promise.resolve();\n        }\n\n        this.userId = userId;\n        \n        try {\n            const token = await AsyncStorage.getItem('userToken');\n            \n            // Get socket URL\n            let socketUrl = API_BASE_URL.replace('/api', '');\n            \n            // Fix localhost issues\n            if (socketUrl.includes('localhost')) {\n                if (Platform.OS === 'android') {\n                    socketUrl = socketUrl.replace('localhost', '10.0.2.2');\n                } else if (Platform.OS === 'ios' && !__DEV__) {\n                    // In production iOS, use actual IP\n                    socketUrl = socketUrl.replace('localhost', '127.0.0.1');\n                }\n            }\n            \n            devLog('Socket', `Connecting to: ${socketUrl}`);\n\n            // Create socket with simplified options\n            this.socket = io(socketUrl, {\n                transports: ['websocket', 'polling'],\n                autoConnect: true,\n                reconnection: true,\n                reconnectionAttempts: 5,\n                reconnectionDelay: 1000,\n                timeout: 20000,\n                auth: {\n                    token: token || ''\n                },\n                query: {\n                    userId: userId,\n                    platform: Platform.OS\n                }\n            });\n\n            this.setupEventHandlers();\n\n            return new Promise((resolve) => {\n                const timeout = setTimeout(() => {\n                    devLog('Socket', 'Connection timeout, resolving anyway');\n                    resolve();\n                }, 10000);\n\n                this.socket.once('connect', () => {\n                    clearTimeout(timeout);\n                    devLog('Socket', 'Connected successfully');\n                    this.connectionState = 'connected';\n                    \n                    // Authenticate\n                    if (userId) {\n                        this.socket.emit('authenticate', { userId });\n                    }\n                    \n                    resolve();\n                });\n\n                this.socket.once('connect_error', (error) => {\n                    clearTimeout(timeout);\n                    devError('Socket', 'Connection error:', error.message);\n                    this.connectionState = 'disconnected';\n                    resolve(); // Resolve anyway to not block the app\n                });\n            });\n        } catch (error) {\n            devError('Socket', 'Connection setup failed:', error);\n            return Promise.resolve();\n        }\n    }\n\n    setupEventHandlers() {\n        if (!this.socket) return;\n\n        this.socket.on('connect', () => {\n            devLog('Socket', 'Connected event');\n            this.connectionState = 'connected';\n            this.emit('connection_state_change', 'connected');\n        });\n\n        this.socket.on('disconnect', (reason) => {\n            devLog('Socket', `Disconnected: ${reason}`);\n            this.connectionState = 'disconnected';\n            this.isAuthenticated = false;\n            this.emit('connection_state_change', 'disconnected');\n        });\n\n        this.socket.on('authenticated', (data) => {\n            devLog('Socket', 'Authenticated successfully');\n            this.isAuthenticated = true;\n            this.emit('authenticated', data);\n        });\n\n        this.socket.on('auth_error', (data) => {\n            devError('Socket', 'Authentication error:', data);\n            this.isAuthenticated = false;\n        });\n\n        // Debug: Log all events\n        this.socket.onAny((eventName, ...args) => {\n            devLog('Socket', `Event: ${eventName}`, args);\n        });\n    }\n\n    emit(event, data) {\n        if (this.socket?.connected) {\n            this.socket.emit(event, data);\n        } else {\n            devLog('Socket', `Cannot emit ${event}, not connected`);\n        }\n    }\n\n    on(event, callback) {\n        if (!this.socket) {\n            devLog('Socket', 'Socket not initialized');\n            return;\n        }\n\n        this.socket.on(event, callback);\n        \n        // Track listeners\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, new Set());\n        }\n        this.listeners.get(event).add(callback);\n    }\n\n    off(event, callback) {\n        if (!this.socket) return;\n        \n        this.socket.off(event, callback);\n        \n        if (this.listeners.has(event)) {\n            this.listeners.get(event).delete(callback);\n        }\n    }\n\n    joinRoom(roomId) {\n        this.emit('joinRoom', roomId);\n    }\n\n    leaveRoom(roomId) {\n        this.emit('leaveRoom', roomId);\n    }\n\n    typing(roomId, isTyping) {\n        this.emit('typing', { roomId, isTyping });\n    }\n\n    disconnect() {\n        if (this.socket) {\n            this.socket.removeAllListeners();\n            this.socket.disconnect();\n            this.socket = null;\n        }\n        \n        this.listeners.clear();\n        this.isAuthenticated = false;\n        this.connectionState = 'disconnected';\n        this.userId = null;\n    }\n\n    isConnected() {\n        return this.socket?.connected === true;\n    }\n\n    getSocketId() {\n        return this.socket?.id || null;\n    }\n\n    getConnectionState() {\n        return this.connectionState;\n    }\n}\n\n// Create singleton\nconst socketServiceFixed = new SocketServiceFixed();\n\nexport default socketServiceFixed;","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/store/contexts/AppContext.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import AsyncStorage from '@react-native-async-storage/async-storage';\nimport NetInfo from '@react-native-community/netinfo';\nimport React, { createContext, useState, useContext, useEffect, useMemo, useCallback } from 'react';\n\nconst AppContext = createContext({});\n\nexport const useApp = () => useContext(AppContext);\n\nexport const AppProvider = ({ children }) => {\n    const [isOnline, setIsOnline] = useState(true);\n    const [loading, setLoading] = useState(true);\n    const [appState, setAppState] = useState({\n        isFirstLaunch: false,\n        language: 'en',\n        notifications: true,\n    });\n\n    // This effect runs once to initialize the app state and network listener.\n    useEffect(() => {\n        const initializeApp = async () => {\n            try {\n                const hasLaunched = await AsyncStorage.getItem('hasLaunched');\n                if (hasLaunched === null) {\n                    setAppState((prev) => ({ ...prev, isFirstLaunch: true }));\n                    await AsyncStorage.setItem('hasLaunched', 'true');\n                } else {\n                    setAppState((prev) => ({ ...prev, isFirstLaunch: false }));\n                }\n            } catch (error) {\n                console.error('Error initializing app:', error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        initializeApp();\n\n        const unsubscribeNetInfo = NetInfo.addEventListener((state) => {\n            setIsOnline(state.isConnected);\n        });\n\n        return () => unsubscribeNetInfo();\n    }, []);\n\n    const updateLanguage = useCallback(async (language) => {\n        try {\n            await AsyncStorage.setItem('language', language);\n            setAppState((prev) => ({ ...prev, language }));\n        } catch (error) {\n            console.error('Error updating language:', error);\n        }\n    }, []);\n\n    const toggleNotifications = useCallback(async () => {\n        try {\n            const newValue = !appState.notifications;\n            await AsyncStorage.setItem('notifications', newValue.toString());\n            setAppState((prev) => ({ ...prev, notifications: newValue }));\n        } catch (error) {\n            console.error('Error toggling notifications:', error);\n        }\n    }, [appState.notifications]);\n\n    // useMemo prevents this value object from being recreated on every render.\n    const value = useMemo(\n        () => ({\n            isOnline,\n            loading,\n            appState,\n            updateLanguage,\n            toggleNotifications,\n        }),\n        [isOnline, loading, appState, updateLanguage, toggleNotifications],\n    );\n\n    return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\n};\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/store/contexts/AuthContext.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":13},{"ruleId":"import/order","severity":2,"message":"`../../utils/socketConnectionManager` import should occur before import of `../../utils/socketEventManager`","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":75,"fix":{"range":[503,643],"text":"import socketConnectionManager from '../../utils/socketConnectionManager';\nimport socketEventManager from '../../utils/socketEventManager';\n"}},{"ruleId":"import/order","severity":2,"message":"`../../utils` import should occur before import of `../../utils/socketEventManager`","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":57,"fix":{"range":[503,700],"text":"import { devLog, devError, devWarn } from '../../utils';\nimport socketEventManager from '../../utils/socketEventManager';\nimport socketConnectionManager from '../../utils/socketConnectionManager';\n"}},{"ruleId":"no-unused-vars","severity":2,"message":"'err' is defined but never used. Allowed unused args must match /^_/u.","line":96,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":96,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'err' is defined but never used. Allowed unused args must match /^_/u.","line":184,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":184,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'err' is defined but never used. Allowed unused args must match /^_/u.","line":266,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":266,"endColumn":32}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"// frontend/src/store/contexts/AuthContext.js\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { createContext, useState, useEffect, useContext, useCallback, useMemo } from 'react';\n\nimport apiClient from '../../services/api/client';\nimport authService from '../../services/authService';\nimport budgetService from '../../services/budgetService';\nimport checklistService from '../../services/checklistService';\nimport socketService from '../../services/socketService';\nimport socketEventManager from '../../utils/socketEventManager';\nimport socketConnectionManager from '../../utils/socketConnectionManager';\nimport { devLog, devError, devWarn } from '../../utils';\n\nconst AuthContext = createContext(null);\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [token, setToken] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [isRefreshing, setIsRefreshing] = useState(false);\n\n    // Initialize pending checklist items\n    const initializePendingChecklist = useCallback(async () => {\n        try {\n            const pendingItems = await AsyncStorage.getItem('pendingChecklistItems');\n            if (pendingItems && user) {\n                const items = JSON.parse(pendingItems);\n                if (items.length > 0) {\n                    try {\n                        // Initialize checklist items in backend\n                        await checklistService.initializeChecklist(items);\n                        // Clear pending items after successful initialization\n                        await AsyncStorage.removeItem('pendingChecklistItems');\n                        devLog('AuthContext', 'Checklist initialized with items', items);\n                    } catch (error) {\n                        // Don't throw - just log the error\n                        devWarn('AuthContext', 'Checklist initialization deferred', error.message);\n                        // Keep the pending items for later retry\n                    }\n                }\n            }\n        } catch (error) {\n            devWarn('AuthContext', 'Failed to process pending checklist', error);\n            // Don't throw - this is not critical for app functionality\n        }\n    }, [user]);\n\n    // Load user from storage on mount\n    useEffect(() => {\n        const loadUserFromStorage = async () => {\n            try {\n                const [storedToken, storedUserStr] = await AsyncStorage.multiGet([\n                    'userToken',\n                    'user',\n                ]);\n                const tokenValue = storedToken[1];\n                const userValue = storedUserStr[1];\n\n                if (tokenValue && userValue) {\n                    // Set the token in the API client first\n                    authService.setAuthToken(tokenValue);\n                    if (apiClient.defaults && apiClient.defaults.headers) {\n                        apiClient.defaults.headers.common['Authorization'] = `Bearer ${tokenValue}`;\n                    }\n\n                    // Verify token is still valid by fetching current user\n                    try {\n                        const currentUser = await authService.getCurrentUser();\n                        if (currentUser) {\n                            setToken(tokenValue);\n                            setUser(currentUser);\n                            // Update stored user data with fresh data\n                            await AsyncStorage.setItem('user', JSON.stringify(currentUser));\n\n                            // Connect socket service if user is authenticated\n                            if (currentUser._id) {\n                                // Start monitoring socket connection\n                                socketConnectionManager.startMonitoring(currentUser._id);\n                                \n                                // Initialize socket event manager\n                                socketEventManager.initialize();\n                                \n                                // Initial connection attempt\n                                socketService.connect(currentUser._id)\n                                    .then(() => {\n                                        devLog('AuthContext', 'Initial socket connection established');\n                                    })\n                                    .catch((err) => {\n                                        devLog('AuthContext', 'Initial socket connection failed, will retry automatically');\n                                    });\n                            }\n                        } else {\n                            throw new Error('Invalid user data');\n                        }\n                    } catch (verifyError) {\n                        devLog('AuthContext', 'Token verification failed, clearing auth data');\n                        await clearAuthData();\n                    }\n                } else {\n                    devLog('AuthContext', 'No stored auth data found');\n                }\n            } catch (error) {\n                devError('AuthContext', 'Failed to load user data from storage', error);\n                await clearAuthData();\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        loadUserFromStorage();\n    }, []);\n\n    // Initialize pending checklist when user is set\n    useEffect(() => {\n        if (user && user._id) {\n            // Initialize any pending checklist items\n            initializePendingChecklist();\n        }\n    }, [user, initializePendingChecklist]);\n\n    const clearAuthData = async () => {\n        try {\n            setUser(null);\n            setToken(null);\n            await AsyncStorage.multiRemove(['userToken', 'user']);\n            authService.setAuthToken(null);\n            if (apiClient.defaults && apiClient.defaults.headers) {\n                delete apiClient.defaults.headers.common['Authorization'];\n            }\n            budgetService.clearCategoriesCache();\n            socketEventManager.cleanup();\n            socketConnectionManager.stopMonitoring();\n            socketService.disconnect();\n            apiClient.clearAllCache();\n        } catch (error) {\n            devError('AuthContext', 'Error clearing auth data', error);\n        }\n    };\n\n    const login = useCallback(async (email, password) => {\n        try {\n            setIsRefreshing(true);\n            const data = await authService.login(email, password);\n\n            if (!data.token || !data.user) {\n                throw new Error('Invalid response from server');\n            }\n\n            // Set token in API client immediately\n            authService.setAuthToken(data.token);\n            if (apiClient.defaults && apiClient.defaults.headers) {\n                apiClient.defaults.headers.common['Authorization'] = `Bearer ${data.token}`;\n            }\n\n            setUser(data.user);\n            setToken(data.token);\n\n            await AsyncStorage.multiSet([\n                ['userToken', data.token],\n                ['user', JSON.stringify(data.user)],\n            ]);\n\n            // Connect socket service\n            if (data.user._id) {\n                // Start monitoring socket connection\n                socketConnectionManager.startMonitoring(data.user._id);\n                \n                // Initialize socket event manager\n                socketEventManager.initialize();\n                \n                // Initial connection attempt\n                socketService.connect(data.user._id)\n                    .then(() => {\n                        devLog('AuthContext', 'Initial socket connection established');\n                    })\n                    .catch((err) => {\n                        devLog('AuthContext', 'Initial socket connection failed, will retry automatically');\n                    });\n            }\n\n            // Initialize pending checklist items after successful login\n            const pendingItems = await AsyncStorage.getItem('pendingChecklistItems');\n            if (pendingItems) {\n                const items = JSON.parse(pendingItems);\n                if (items.length > 0) {\n                    try {\n                        await checklistService.initializeChecklist(items);\n                        await AsyncStorage.removeItem('pendingChecklistItems');\n                        devLog('AuthContext', 'Checklist initialized after login with items', items);\n                    } catch (error) {\n                        devError('AuthContext', 'Failed to initialize checklist after login', error);\n                    }\n                }\n            }\n\n            return data;\n        } catch (error) {\n            devError('AuthContext', 'Login failed', error);\n            // Clear any partial auth data on login failure\n            await clearAuthData();\n            throw error;\n        } finally {\n            setIsRefreshing(false);\n        }\n    }, []);\n\n    const register = useCallback(async (name, email, password, professionalPath = null) => {\n        try {\n            setIsRefreshing(true);\n            const data = await authService.register(name, email, password, professionalPath);\n\n            // Check if registration requires login (no token returned)\n            if (data.requiresLogin) {\n                devLog('AuthContext', 'Registration successful, but login required');\n                // Clear any existing auth data\n                await clearAuthData();\n\n                // Return success with a flag indicating login is needed\n                return {\n                    success: true,\n                    requiresLogin: true,\n                    user: data.user,\n                    message: 'Registration successful. Please login to continue.',\n                };\n            }\n\n            if (!data.token || !data.user) {\n                throw new Error('Invalid response from server');\n            }\n\n            // Set token in API client immediately\n            authService.setAuthToken(data.token);\n            if (apiClient.defaults && apiClient.defaults.headers) {\n                apiClient.defaults.headers.common['Authorization'] = `Bearer ${data.token}`;\n            }\n\n            // Update user with onboarding status\n            const updatedUser = {\n                ...data.user,\n                onboardingStep: professionalPath ? 'CHECKLIST_SELECTION' : 'PATH_SELECTION',\n            };\n\n            setUser(updatedUser);\n            setToken(data.token);\n\n            await AsyncStorage.multiSet([\n                ['userToken', data.token],\n                ['user', JSON.stringify(updatedUser)],\n            ]);\n\n            // Connect socket service\n            if (data.user._id) {\n                socketService.connect(data.user._id)\n                    .then(() => {\n                        // Initialize socket event manager after connection\n                        socketEventManager.initialize();\n                    })\n                    .catch((err) => {\n                        devLog('AuthContext', 'Socket connection failed, continuing without realtime features');\n                    });\n            }\n\n            // If we have a token, try to initialize checklist immediately\n            const pendingItems = await AsyncStorage.getItem('pendingChecklistItems');\n            if (pendingItems && data.token) {\n                const items = JSON.parse(pendingItems);\n                if (items.length > 0) {\n                    try {\n                        await checklistService.initializeChecklist(items);\n                        await AsyncStorage.removeItem('pendingChecklistItems');\n                        devLog('AuthContext', 'Checklist initialized immediately after registration');\n                    } catch (error) {\n                        devError('AuthContext', 'Failed to initialize checklist after registration', error);\n                        // Don't throw - allow registration to complete\n                    }\n                }\n            }\n\n            return data;\n        } catch (error) {\n            devError('AuthContext', 'Registration failed', error);\n            // Clear any partial auth data on registration failure\n            await clearAuthData();\n            throw error;\n        } finally {\n            setIsRefreshing(false);\n        }\n    }, []);\n\n    const logout = useCallback(async () => {\n        try {\n            setIsRefreshing(true);\n            // Call logout API if available\n            if (token) {\n                try {\n                    await authService.logout();\n                } catch (error) {\n                    devWarn('AuthContext', 'Logout API call failed', error);\n                }\n            }\n\n            await clearAuthData();\n        } catch (error) {\n            devError('AuthContext', 'Logout failed', error);\n            // Still clear local state even if API call fails\n            await clearAuthData();\n        } finally {\n            setIsRefreshing(false);\n        }\n    }, [token]);\n\n    const refreshToken = useCallback(async () => {\n        if (!token || isRefreshing) return;\n\n        try {\n            setIsRefreshing(true);\n            // Verify current token is still valid\n            const currentUser = await authService.getCurrentUser();\n            if (currentUser) {\n                setUser(currentUser);\n                await AsyncStorage.setItem('user', JSON.stringify(currentUser));\n                return true;\n            }\n        } catch (error) {\n            devError('AuthContext', 'Token refresh failed', error);\n            // If refresh fails, clear auth and redirect to login\n            await clearAuthData();\n            return false;\n        } finally {\n            setIsRefreshing(false);\n        }\n    }, [token, isRefreshing]);\n\n    const updateOnboardingPath = useCallback(\n        async (professionalPath) => {\n            try {\n                if (!user) {\n                    throw new Error('No user found');\n                }\n\n                const response = await authService.updateOnboardingPath(professionalPath);\n                const updatedUser = {\n                    ...user,\n                    professionalPath,\n                    onboardingStep: response.onboardingStep || 'CHECKLIST_SELECTION',\n                };\n\n                setUser(updatedUser);\n                await AsyncStorage.setItem('user', JSON.stringify(updatedUser));\n\n                // Clear categories cache when professional path changes\n                budgetService.clearCategoriesCache();\n            } catch (error) {\n                devError('AuthContext', 'Failed to update onboarding path', error);\n                throw error;\n            }\n        },\n        [user],\n    );\n\n    const completeOnboarding = useCallback(\n        async (checklistItems = []) => {\n            try {\n                setIsRefreshing(true);\n\n                // Complete onboarding with selected checklist items\n                const response = await authService.completeOnboarding(checklistItems);\n\n                const updatedUser = {\n                    ...user,\n                    ...response,\n                    onboardingStep: 'COMPLETED',\n                    hasCompletedOnboarding: true,\n                };\n\n                setUser(updatedUser);\n                await AsyncStorage.setItem('user', JSON.stringify(updatedUser));\n\n                return updatedUser;\n            } catch (error) {\n                devError('AuthContext', 'Failed to complete onboarding', error);\n                throw error;\n            } finally {\n                setIsRefreshing(false);\n            }\n        },\n        [user],\n    );\n\n    const updateUser = useCallback(\n        async (userData) => {\n            try {\n                const updatedUser = { ...user, ...userData };\n                setUser(updatedUser);\n                await AsyncStorage.setItem('user', JSON.stringify(updatedUser));\n\n                // Clear categories cache if professional path changed\n                if (\n                    userData.professionalPath &&\n                    userData.professionalPath !== user?.professionalPath\n                ) {\n                    budgetService.clearCategoriesCache();\n                }\n            } catch (error) {\n                devError('AuthContext', 'Failed to update user', error);\n                throw error;\n            }\n        },\n        [user],\n    );\n\n    // Update user online status\n    const updateOnlineStatus = useCallback(\n        async (isOnline) => {\n            try {\n                if (user && socketService.isConnected()) {\n                    socketService.emit('update_status', { isOnline });\n                }\n            } catch (error) {\n                devError('AuthContext', 'Failed to update online status', error);\n            }\n        },\n        [user],\n    );\n\n    // Memoize the context value to prevent unnecessary re-renders\n    const value = useMemo(\n        () => ({\n            user,\n            token,\n            loading,\n            isRefreshing,\n            login,\n            register,\n            logout,\n            updateOnboardingPath,\n            completeOnboarding,\n            updateUser,\n            updateOnlineStatus,\n            refreshToken,\n            isAuthenticated: !!user && !!token,\n            isOnboardingCompleted:\n                user?.onboardingStep === 'COMPLETED' || user?.hasCompletedOnboarding || false,\n        }),\n        [\n            user,\n            token,\n            loading,\n            isRefreshing,\n            login,\n            register,\n            logout,\n            updateOnboardingPath,\n            completeOnboarding,\n            updateUser,\n            updateOnlineStatus,\n            refreshToken,\n        ],\n    );\n\n    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/store/contexts/ThemeContext.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/store/contexts/ThemeContext.js\nimport React, { createContext, useState, useContext } from 'react';\nimport { Provider as PaperProvider, DefaultTheme } from 'react-native-paper';\n\nimport { theme as customTheme, colors, fonts, spacing } from '../../constants/theme';\n\nconst ThemeContext = createContext(null);\n\n// Merge custom theme with Paper theme structure\nconst createTheme = (isDark = false) => {\n    return {\n        ...DefaultTheme,\n        ...customTheme,\n        colors: {\n            ...DefaultTheme.colors,\n            ...customTheme.colors,\n            ...colors,\n        },\n        fonts: {\n            ...DefaultTheme.fonts,\n            ...customTheme.fonts,\n            ...fonts,\n        },\n        spacing: {\n            ...spacing,\n            // Add Paper-specific spacing\n            xs: spacing.xs,\n            s: spacing.sm,\n            m: spacing.md,\n            l: spacing.lg,\n            xl: spacing.xl,\n        },\n        roundness: customTheme.roundness || 8,\n        dark: isDark,\n        // Add any missing properties\n        borderRadius: customTheme.borderRadius,\n        shadows: customTheme.shadows,\n    };\n};\n\nexport const ThemeProvider = ({ children }) => {\n    const [isDarkTheme, setIsDarkTheme] = useState(false);\n    const currentTheme = createTheme(isDarkTheme);\n\n    const toggleTheme = () => {\n        setIsDarkTheme((prev) => !prev);\n    };\n\n    const themeValue = {\n        isDarkTheme,\n        toggleTheme,\n        theme: currentTheme,\n        colors: currentTheme.colors,\n        fonts: currentTheme.fonts,\n        spacing: currentTheme.spacing,\n    };\n\n    return (\n        <ThemeContext.Provider value={themeValue}>\n            <PaperProvider theme={currentTheme}>{children}</PaperProvider>\n        </ThemeContext.Provider>\n    );\n};\n\nexport const useTheme = () => {\n    const context = useContext(ThemeContext);\n\n    if (!context) {\n        // Return a default theme structure if context is not available\n        const defaultTheme = createTheme(false);\n        return {\n            ...defaultTheme,\n            isDark: false,\n            toggleTheme: () => {},\n        };\n    }\n\n    // Return the complete theme object\n    return {\n        ...context.theme,\n        isDark: context.isDarkTheme,\n        toggleTheme: context.toggleTheme,\n        // Ensure all properties are available\n        colors: context.colors || colors,\n        fonts: context.fonts || fonts,\n        spacing: context.spacing || spacing,\n    };\n};\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/store/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/components/common/EmptyStateStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/components/common/ErrorBoundaryStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/components/common/LoadingSpinnerStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/components/ui/BadgeStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/components/ui/ButtonStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/components/ui/CardStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/components/ui/HeaderStyles.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'fonts' is defined but never used.","line":4,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'spacing' is defined but never used.","line":4,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":32}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/styles/components/ui/HeaderStyles.js\nimport { StyleSheet, Platform } from 'react-native';\n\nimport { colors, fonts, spacing } from '../../../constants/theme';\n\nexport const headerStyles = StyleSheet.create({\n    container: {\n        backgroundColor: colors.primary,\n        paddingTop: Platform.OS === 'ios' ? 44 : 24, // SafeArea padding\n        paddingBottom: 16,\n    },\n    default: {\n        backgroundColor: colors.primary,\n    },\n    content: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingHorizontal: 16,\n        minHeight: 56,\n    },\n    backButton: {\n        padding: 8,\n        marginRight: 8,\n    },\n    titleContainer: {\n        flex: 1,\n    },\n    title: {\n        fontSize: 20,\n        fontWeight: '600',\n        color: '#fff',\n    },\n    defaultTitle: {\n        color: '#fff',\n    },\n    subtitle: {\n        fontSize: 14,\n        color: '#fff',\n        opacity: 0.8,\n        marginTop: 2,\n    },\n    defaultSubtitle: {\n        color: '#fff',\n    },\n    rightAction: {\n        marginLeft: 8,\n    },\n});\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/components/ui/InputStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/components/ui/ListStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/components/ui/ModalStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/components/ui/TabBarStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/components/ui/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/navigation/MainNavigatorStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/screens/auth/LoginScreenStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/screens/auth/RegisterScreenStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/screens/auth/WelcomeScreenStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/screens/budget/BudgetScreenStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/screens/chat/ChatRoomStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/screens/checklist/ChecklistScreenStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/screens/content/GuideDetailScreenStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/screens/content/ResourcesScreenStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/screens/events/CreateEventScreenStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/screens/events/EventDetailScreenStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/screens/events/EventsScreenStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/screens/forums/ForumDetailScreenStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/screens/forums/ForumScreenStyles.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'shadows' is defined but never used.","line":3,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":55}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StyleSheet } from 'react-native';\n\nimport { colors, fonts, spacing, borderRadius, shadows } from '../../../constants/theme';\n\nexport const forumsStyles = (theme) =>\n    StyleSheet.create({\n        safeArea: {\n            flex: 1,\n            backgroundColor: theme?.colors?.background || colors.background,\n        },\n        container: {\n            flex: 1,\n            backgroundColor: theme?.colors?.background || colors.background,\n        },\n        header: {\n            padding: spacing.lg,\n            backgroundColor: theme?.colors?.surface || colors.surface,\n            borderBottomWidth: 1,\n            borderBottomColor: theme?.colors?.border || colors.border,\n        },\n        headerTitle: {\n            fontSize: fonts.sizes.xxl,\n            fontWeight: 'bold',\n            color: theme?.colors?.text || colors.text,\n            marginBottom: spacing.xs,\n        },\n        headerSubtitle: {\n            fontSize: fonts.sizes.md,\n            color: theme?.colors?.textSecondary || colors.textSecondary,\n        },\n        listContent: {\n            padding: spacing.md,\n        },\n        forumCard: {\n            marginBottom: spacing.md,\n            backgroundColor: theme?.colors?.surface || colors.surface,\n            borderRadius: borderRadius.lg,\n            elevation: 2,\n            shadowColor: colors.shadow,\n            shadowOffset: { width: 0, height: 2 },\n            shadowOpacity: 0.1,\n            shadowRadius: 4,\n        },\n        forumCardContent: {\n            // Remove overflow from Card content\n        },\n        forumHeader: {\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n        },\n        forumInfo: {\n            flex: 1,\n            marginRight: spacing.sm,\n        },\n        titleRow: {\n            flexDirection: 'row',\n            alignItems: 'center',\n            marginBottom: spacing.xs,\n        },\n        forumTitle: {\n            fontSize: fonts.sizes.lg,\n            fontWeight: '600',\n            color: theme?.colors?.text || colors.text,\n            flex: 1,\n        },\n        unreadBadge: {\n            backgroundColor: theme?.colors?.primary || colors.primary,\n            marginLeft: spacing.sm,\n            minWidth: 24,\n            height: 24,\n            borderRadius: 12,\n            justifyContent: 'center',\n            alignItems: 'center',\n            paddingHorizontal: spacing.xs,\n        },\n        unreadBadgeText: {\n            color: colors.textInverse,\n            fontSize: fonts.sizes.xs,\n            fontWeight: 'bold',\n        },\n        lastMessage: {\n            fontSize: fonts.sizes.sm,\n            color: theme?.colors?.textSecondary || colors.textSecondary,\n            marginBottom: spacing.xs,\n        },\n        lastMessageSender: {\n            fontWeight: '600',\n            color: theme?.colors?.text || colors.text,\n        },\n        forumDescription: {\n            fontSize: fonts.sizes.sm,\n            color: theme?.colors?.textSecondary || colors.textSecondary,\n            marginBottom: spacing.xs,\n        },\n        forumMeta: {\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n        },\n        lastMessageTime: {\n            fontSize: fonts.sizes.xs,\n            color: theme?.colors?.textSecondary || colors.textSecondary,\n        },\n        metaItem: {\n            flexDirection: 'row',\n            alignItems: 'center',\n        },\n        metaText: {\n            fontSize: fonts.sizes.xs,\n            color: theme?.colors?.textSecondary || colors.textSecondary,\n            marginLeft: spacing.xs,\n        },\n        fab: {\n            position: 'absolute',\n            margin: 16,\n            right: 0,\n            bottom: 0,\n            backgroundColor: theme?.colors?.primary || colors.primary,\n        },\n        modal: {\n            backgroundColor: theme?.colors?.surface || colors.surface,\n            padding: spacing.lg,\n            margin: spacing.lg,\n            borderRadius: borderRadius.lg,\n            maxHeight: '80%',\n        },\n        modalTitle: {\n            fontSize: fonts.sizes.xl,\n            fontWeight: 'bold',\n            color: theme?.colors?.text || colors.text,\n            marginBottom: spacing.lg,\n        },\n        input: {\n            marginBottom: spacing.md,\n            backgroundColor: theme?.colors?.background || colors.background,\n        },\n        modalButtons: {\n            flexDirection: 'row',\n            justifyContent: 'flex-end',\n            marginTop: spacing.lg,\n        },\n        modalButton: {\n            marginLeft: spacing.md,\n        },\n        errorText: {\n            color: theme?.colors?.error || colors.error,\n            fontSize: fonts.sizes.sm,\n            marginTop: -spacing.sm,\n            marginBottom: spacing.md,\n        },\n    });\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/screens/main/DashboardScreenStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/screens/main/ProfileScreenStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/screens/onboarding/PathSelectionScreenStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/styles/screens/onboarding/PrioritySelectionScreenStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/alerts.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/appStability.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":78,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":78,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2509,2541],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2676,2704],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":273,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":273,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8167,8208],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"max-len","severity":1,"message":"This line has a length of 119. Maximum allowed is 100.","line":329,"column":1,"nodeType":"Program","messageId":"max","endLine":329,"endColumn":120}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/utils/appStability.js\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport NetInfo from '@react-native-community/netinfo';\nimport React from 'react';\nimport { AppState, Platform } from 'react-native';\n\nimport socketService from '../services/socketService';\n\nimport { cache } from './cacheManager';\n\n\nclass AppStabilityEnhancer {\n    constructor() {\n        this.appState = AppState.currentState;\n        this.networkState = null;\n        this.memoryWarningListeners = [];\n        this.crashRecoveryData = {};\n        this.performanceMetrics = {\n            renderCounts: {},\n            apiCallDurations: [],\n            memoryWarnings: 0,\n        };\n\n        // Store subscriptions for cleanup\n        this.appStateSubscription = null;\n        this.networkSubscription = null;\n\n        this.initialize();\n    }\n\n    async initialize() {\n        // Setup app state listener\n        this.appStateSubscription = AppState.addEventListener('change', this.handleAppStateChange);\n\n        // Setup network monitoring\n        this.networkSubscription = NetInfo.addEventListener(this.handleNetworkChange);\n\n        // Setup memory warning listener (iOS)\n        if (Platform.OS === 'ios') {\n            const { NativeEventEmitter, NativeModules } = require('react-native');\n            const { MemoryWarning } = NativeModules;\n\n            if (MemoryWarning) {\n                const memoryWarningEmitter = new NativeEventEmitter(MemoryWarning);\n                memoryWarningEmitter.addListener('memoryWarning', this.handleMemoryWarning);\n            }\n        }\n\n        // Restore crash recovery data\n        await this.restoreCrashRecoveryData();\n\n        // Setup periodic health checks\n        this.startHealthChecks();\n    }\n\n    handleAppStateChange = async (nextAppState) => {\n        // App is going to background\n        if (this.appState === 'active' && nextAppState.match(/inactive|background/)) {\n            await this.onAppBackground();\n        }\n\n        // App is coming to foreground\n        if (this.appState.match(/inactive|background/) && nextAppState === 'active') {\n            await this.onAppForeground();\n        }\n\n        this.appState = nextAppState;\n    };\n\n    handleNetworkChange = async (state) => {\n        const wasOffline = this.networkState && !this.networkState.isConnected;\n        const isNowOnline = state.isConnected;\n\n        this.networkState = state;\n\n        // Network restored\n        if (wasOffline && isNowOnline) {\n            console.log('Network restored');\n            await this.onNetworkRestored();\n        }\n\n        // Network lost\n        if (!wasOffline && !isNowOnline) {\n            console.log('Network lost');\n            await this.onNetworkLost();\n        }\n    };\n\n    handleMemoryWarning = () => {\n        console.warn('Memory warning received');\n        this.performanceMetrics.memoryWarnings++;\n\n        // Clear caches\n        cache.clear();\n\n        // Notify listeners\n        this.memoryWarningListeners.forEach((listener) => {\n            try {\n                listener();\n            } catch (error) {\n                console.error('Error in memory warning listener:', error);\n            }\n        });\n\n        // Force garbage collection if available\n        if (global.gc) {\n            global.gc();\n        }\n    };\n\n    async onAppBackground() {\n        // Save app state\n        await this.saveCrashRecoveryData();\n\n        // Clear unnecessary caches\n        const cacheStats = cache.getStats();\n        if (cacheStats.estimatedSize > 5 * 1024 * 1024) {\n            // 5MB\n            await cache.clear();\n        }\n\n        // Disconnect socket to save battery\n        socketService.disconnect();\n\n        // Save performance metrics\n        await this.savePerformanceMetrics();\n    }\n\n    async onAppForeground() {\n        // Reconnect socket if user is authenticated\n        const token = await AsyncStorage.getItem('userToken');\n        const user = await AsyncStorage.getItem('user');\n\n        if (token && user) {\n            try {\n                const userData = JSON.parse(user);\n                await socketService.connect(userData._id);\n            } catch (error) {\n                console.error('Failed to reconnect socket:', error);\n            }\n        }\n\n        // Refresh critical data\n        await this.refreshCriticalData();\n\n        // Check for app updates\n        await this.checkForUpdates();\n    }\n\n    async onNetworkRestored() {\n        // Process queued requests\n        if (global.requestQueue) {\n            global.requestQueue.process();\n        }\n\n        // Reconnect socket\n        const user = await AsyncStorage.getItem('user');\n        if (user) {\n            try {\n                const userData = JSON.parse(user);\n                await socketService.connect(userData._id);\n            } catch (error) {\n                console.error('Failed to reconnect socket:', error);\n            }\n        }\n\n        // Refresh stale data\n        await this.refreshStaleData();\n    }\n\n    async onNetworkLost() {\n        // Notify user\n        if (global.showNetworkAlert) {\n            global.showNetworkAlert('You are offline', 'Some features may be limited');\n        }\n    }\n\n    async saveCrashRecoveryData() {\n        try {\n            const recoveryData = {\n                timestamp: Date.now(),\n                currentRoute: global.currentRoute,\n                userToken: await AsyncStorage.getItem('userToken'),\n                ...this.crashRecoveryData,\n            };\n\n            await AsyncStorage.setItem('crash_recovery', JSON.stringify(recoveryData));\n        } catch (error) {\n            console.error('Failed to save crash recovery data:', error);\n        }\n    }\n\n    async restoreCrashRecoveryData() {\n        try {\n            const stored = await AsyncStorage.getItem('crash_recovery');\n            if (stored) {\n                const data = JSON.parse(stored);\n\n                // Check if app crashed recently (within last 5 minutes)\n                if (Date.now() - data.timestamp < 5 * 60 * 1000) {\n                    this.crashRecoveryData = data;\n\n                    // Notify about crash recovery\n                    if (global.onCrashRecovery) {\n                        global.onCrashRecovery(data);\n                    }\n                }\n\n                // Clear old data\n                await AsyncStorage.removeItem('crash_recovery');\n            }\n        } catch (error) {\n            console.error('Failed to restore crash recovery data:', error);\n        }\n    }\n\n    async refreshCriticalData() {\n        // Refresh user data\n        if (global.refreshUserData) {\n            try {\n                await global.refreshUserData();\n            } catch (error) {\n                console.error('Failed to refresh user data:', error);\n            }\n        }\n\n        // Clear expired cache entries\n        cache.cleanup();\n    }\n\n    async refreshStaleData() {\n        // Invalidate old API cache\n        const cacheStats = cache.getStats();\n        if (cacheStats.expiredEntries > 10) {\n            await cache.invalidatePattern('^api_');\n        }\n    }\n\n    async checkForUpdates() {\n        // TODO: Implement app update check\n        // This could check your backend for the latest app version\n    }\n\n    async savePerformanceMetrics() {\n        try {\n            await AsyncStorage.setItem(\n                'performance_metrics',\n                JSON.stringify(this.performanceMetrics),\n            );\n        } catch (error) {\n            console.error('Failed to save performance metrics:', error);\n        }\n    }\n\n    startHealthChecks() {\n        // Periodic health check every 5 minutes\n        setInterval(() => {\n            this.performHealthCheck();\n        }, 5 * 60 * 1000);\n    }\n\n    async performHealthCheck() {\n        const health = {\n            memoryWarnings: this.performanceMetrics.memoryWarnings,\n            networkState: this.networkState,\n            cacheStats: cache.getStats(),\n            socketConnected: socketService.isConnected(),\n            timestamp: Date.now(),\n        };\n\n        // Log health status\n        if (__DEV__) {\n            console.log('App Health Check:', health);\n        }\n\n        // Take action if needed\n        if (health.memoryWarnings > 5) {\n            // Too many memory warnings, clear everything\n            await this.emergencyCleanup();\n        }\n\n        if (health.cacheStats.estimatedSize > 10 * 1024 * 1024) {\n            // 10MB\n            // Cache too large\n            await cache.clear();\n        }\n    }\n\n    async emergencyCleanup() {\n        console.warn('Performing emergency cleanup');\n\n        // Clear all caches\n        await cache.clear();\n\n        // Clear image cache if using FastImage\n        try {\n            const FastImage = require('react-native-fast-image');\n            if (FastImage) {\n                await FastImage.clearMemoryCache();\n                await FastImage.clearDiskCache();\n            }\n        } catch (error) {\n            // FastImage not available\n        }\n\n        // Reset performance metrics\n        this.performanceMetrics = {\n            renderCounts: {},\n            apiCallDurations: [],\n            memoryWarnings: 0,\n        };\n\n        // Force garbage collection\n        if (global.gc) {\n            global.gc();\n        }\n    }\n\n    // Track component renders\n    trackRender(componentName) {\n        if (!this.performanceMetrics.renderCounts[componentName]) {\n            this.performanceMetrics.renderCounts[componentName] = 0;\n        }\n        this.performanceMetrics.renderCounts[componentName]++;\n\n        // Warn about excessive renders\n        if (this.performanceMetrics.renderCounts[componentName] > 100) {\n            console.warn(\n                `Component ${componentName} has rendered ${this.performanceMetrics.renderCounts[componentName]} times`,\n            );\n        }\n    }\n\n    // Track API call duration\n    trackApiCall(url, duration) {\n        this.performanceMetrics.apiCallDurations.push({\n            url,\n            duration,\n            timestamp: Date.now(),\n        });\n\n        // Keep only last 100 calls\n        if (this.performanceMetrics.apiCallDurations.length > 100) {\n            this.performanceMetrics.apiCallDurations.shift();\n        }\n\n        // Warn about slow API calls\n        if (duration > 5000) {\n            console.warn(`Slow API call to ${url}: ${duration}ms`);\n        }\n    }\n\n    // Add memory warning listener\n    addMemoryWarningListener(listener) {\n        this.memoryWarningListeners.push(listener);\n\n        // Return unsubscribe function\n        return () => {\n            const index = this.memoryWarningListeners.indexOf(listener);\n            if (index > -1) {\n                this.memoryWarningListeners.splice(index, 1);\n            }\n        };\n    }\n\n    // Set crash recovery data\n    setCrashRecoveryData(key, value) {\n        this.crashRecoveryData[key] = value;\n    }\n\n    // Get performance report\n    getPerformanceReport() {\n        const avgApiDuration =\n            this.performanceMetrics.apiCallDurations.length > 0\n                ? this.performanceMetrics.apiCallDurations.reduce(\n                    (sum, call) => sum + call.duration,\n                    0,\n                ) / this.performanceMetrics.apiCallDurations.length\n                : 0;\n\n        const slowApiCalls = this.performanceMetrics.apiCallDurations.filter(\n            (call) => call.duration > 3000,\n        );\n\n        return {\n            renderCounts: this.performanceMetrics.renderCounts,\n            avgApiDuration,\n            slowApiCalls: slowApiCalls.length,\n            memoryWarnings: this.performanceMetrics.memoryWarnings,\n            cacheStats: cache.getStats(),\n            networkState: this.networkState,\n            socketConnected: socketService.isConnected(),\n        };\n    }\n\n    // Cleanup\n    cleanup() {\n        // Remove event listeners using the stored subscriptions\n        if (this.appStateSubscription && typeof this.appStateSubscription.remove === 'function') {\n            this.appStateSubscription.remove();\n        }\n        if (this.networkSubscription && typeof this.networkSubscription === 'function') {\n            this.networkSubscription();\n        }\n        // Clear intervals and listeners\n        if (this.memoryWarningListeners) {\n            this.memoryWarningListeners = [];\n        }\n    }\n}\n\n// Create singleton instance\nconst appStability = new AppStabilityEnhancer();\n\n// Export convenience functions\nexport const trackRender = (componentName) => appStability.trackRender(componentName);\nexport const trackApiCall = (url, duration) => appStability.trackApiCall(url, duration);\nexport const addMemoryWarningListener = (listener) =>\n    appStability.addMemoryWarningListener(listener);\nexport const setCrashRecoveryData = (key, value) => appStability.setCrashRecoveryData(key, value);\nexport const getPerformanceReport = () => appStability.getPerformanceReport();\n\n// React Hook for tracking component renders\nexport const useRenderTracking = (componentName) => {\n    React.useEffect(() => {\n        trackRender(componentName);\n    });\n};\n\n// React Hook for memory warning handling\nexport const useMemoryWarning = (callback) => {\n    React.useEffect(() => {\n        const unsubscribe = addMemoryWarningListener(callback);\n        return unsubscribe;\n    }, [callback]);\n};\n\nexport default appStability;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/appStabilityEnhancements.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":55,"fix":{"range":[160,160],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`../services/realtimeService` import should occur before import of `../services/socketService`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":59,"fix":{"range":[161,275],"text":"import realtimeService from '../services/realtimeService';\nimport socketService from '../services/socketService';\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":48,"fix":{"range":[322,322],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`../services/api/client` import should occur before import of `../services/socketService`","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":48,"fix":{"range":[161,323],"text":"import apiClient from '../services/api/client';\nimport socketService from '../services/socketService';\nimport realtimeService from '../services/realtimeService';\n"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":56,"column":39,"nodeType":"Property","messageId":"missing","endLine":57,"endColumn":1,"fix":{"range":[1742,1763],"text":"details,\n            }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":192,"column":30,"nodeType":"Property","messageId":"missing","endLine":193,"endColumn":1,"fix":{"range":[6142,6160],"text":"5000,\n            }"}},{"ruleId":"max-len","severity":1,"message":"This line has a length of 109. Maximum allowed is 100.","line":215,"column":1,"nodeType":"Program","messageId":"max","endLine":215,"endColumn":110},{"ruleId":"max-len","severity":1,"message":"This line has a length of 103. Maximum allowed is 100.","line":222,"column":1,"nodeType":"Program","messageId":"max","endLine":222,"endColumn":104},{"ruleId":"max-len","severity":1,"message":"This line has a length of 116. Maximum allowed is 100.","line":297,"column":1,"nodeType":"Program","messageId":"max","endLine":297,"endColumn":117},{"ruleId":"max-len","severity":1,"message":"This line has a length of 108. Maximum allowed is 100.","line":298,"column":1,"nodeType":"Program","messageId":"max","endLine":298,"endColumn":109},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":306,"column":79,"nodeType":"Property","messageId":"missing","endLine":307,"endColumn":1,"fix":{"range":[10117,10138],"text":"failure,\n            }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":309,"column":59,"nodeType":"Property","messageId":"missing","endLine":310,"endColumn":1,"fix":{"range":[10280,10294],"text":"mode,\n        }"}}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":8,"fixableWarningCount":0,"source":"/**\n * App Stability Enhancements\n * Comprehensive improvements for API connection and app stability\n */\n\nimport NetInfo from '@react-native-community/netinfo';\nimport socketService from '../services/socketService';\nimport realtimeService from '../services/realtimeService';\nimport apiClient from '../services/api/client';\nimport { devLog, devError } from './devLog';\n\nclass AppStabilityManager {\n    constructor() {\n        this.isOnline = true;\n        this.connectionQuality = 'good';\n        this.apiHealth = { success: 0, failure: 0, latency: [] };\n        this.socketReconnectAttempts = 0;\n        this.maxSocketReconnectAttempts = 10;\n        this.healthCheckInterval = null;\n        this.networkListener = null;\n    }\n\n    /**\n     * Initialize stability monitoring\n     */\n    initialize() {\n        devLog('AppStability', 'Initializing stability monitoring');\n        \n        // Monitor network connectivity\n        this.setupNetworkMonitoring();\n        \n        // Monitor API health\n        this.startHealthChecks();\n        \n        // Setup error boundaries\n        this.setupGlobalErrorHandling();\n        \n        // Monitor socket stability\n        this.monitorSocketConnection();\n        \n        // Setup performance monitoring\n        this.setupPerformanceMonitoring();\n    }\n\n    /**\n     * Network monitoring\n     */\n    setupNetworkMonitoring() {\n        this.networkListener = NetInfo.addEventListener(state => {\n            const wasOnline = this.isOnline;\n            this.isOnline = state.isConnected && state.isInternetReachable;\n            \n            devLog('AppStability', 'Network state changed:', {\n                isOnline: this.isOnline,\n                type: state.type,\n                details: state.details\n            });\n            \n            // Handle connection changes\n            if (!wasOnline && this.isOnline) {\n                devLog('AppStability', 'Connection restored, syncing data...');\n                this.onConnectionRestored();\n            } else if (wasOnline && !this.isOnline) {\n                devLog('AppStability', 'Connection lost');\n                this.onConnectionLost();\n            }\n            \n            // Update connection quality\n            this.updateConnectionQuality(state);\n        });\n    }\n\n    /**\n     * Update connection quality based on network state\n     */\n    updateConnectionQuality(state) {\n        if (!state.isConnected) {\n            this.connectionQuality = 'offline';\n        } else if (state.type === 'wifi') {\n            this.connectionQuality = 'good';\n        } else if (state.type === 'cellular') {\n            const effectiveType = state.details?.cellularGeneration;\n            if (effectiveType === '4g' || effectiveType === '5g') {\n                this.connectionQuality = 'good';\n            } else if (effectiveType === '3g') {\n                this.connectionQuality = 'fair';\n            } else {\n                this.connectionQuality = 'poor';\n            }\n        } else {\n            this.connectionQuality = 'unknown';\n        }\n        \n        devLog('AppStability', `Connection quality: ${this.connectionQuality}`);\n    }\n\n    /**\n     * Handle connection restored\n     */\n    async onConnectionRestored() {\n        // Clear all API cache to get fresh data\n        apiClient.clearAllCache();\n        \n        // Reconnect socket if needed\n        if (!socketService.isConnected()) {\n            this.socketReconnectAttempts = 0;\n            await this.reconnectSocket();\n        }\n        \n        // Trigger data refresh in screens\n        this.emit('connection_restored');\n    }\n\n    /**\n     * Handle connection lost\n     */\n    onConnectionLost() {\n        // Notify screens about offline state\n        this.emit('connection_lost');\n    }\n\n    /**\n     * Reconnect socket with exponential backoff\n     */\n    async reconnectSocket() {\n        if (this.socketReconnectAttempts >= this.maxSocketReconnectAttempts) {\n            devError('AppStability', 'Max socket reconnection attempts reached');\n            return;\n        }\n        \n        this.socketReconnectAttempts++;\n        const delay = Math.min(1000 * Math.pow(2, this.socketReconnectAttempts - 1), 30000);\n        \n        devLog('AppStability', `Attempting socket reconnection (${this.socketReconnectAttempts}/${this.maxSocketReconnectAttempts}) in ${delay}ms`);\n        \n        setTimeout(async () => {\n            if (this.isOnline && !socketService.isConnected()) {\n                try {\n                    await socketService.forceReconnect();\n                    this.socketReconnectAttempts = 0;\n                    devLog('AppStability', 'Socket reconnected successfully');\n                } catch (error) {\n                    devError('AppStability', 'Socket reconnection failed:', error);\n                    this.reconnectSocket(); // Retry\n                }\n            }\n        }, delay);\n    }\n\n    /**\n     * Monitor socket connection stability\n     */\n    monitorSocketConnection() {\n        // Check socket health every 30 seconds\n        setInterval(() => {\n            const realtimeStatus = realtimeService.getStatus();\n            \n            if (realtimeStatus.mode === 'none' && this.isOnline) {\n                devLog('AppStability', 'Real-time connection lost, attempting recovery...');\n                this.reconnectSocket();\n            }\n            \n            // Log connection mode for debugging\n            if (__DEV__) {\n                devLog('AppStability', 'Real-time status:', realtimeStatus);\n            }\n        }, 30000);\n    }\n\n    /**\n     * Start API health checks\n     */\n    startHealthChecks() {\n        // Initial health check\n        this.checkAPIHealth();\n        \n        // Regular health checks every minute\n        this.healthCheckInterval = setInterval(() => {\n            this.checkAPIHealth();\n        }, 60000);\n    }\n\n    /**\n     * Check API health\n     */\n    async checkAPIHealth() {\n        const start = Date.now();\n        \n        try {\n            const response = await fetch(`${apiClient.defaults.baseURL}/health`, {\n                method: 'GET',\n                timeout: 5000\n            });\n            \n            const latency = Date.now() - start;\n            this.apiHealth.latency.push(latency);\n            \n            if (this.apiHealth.latency.length > 10) {\n                this.apiHealth.latency.shift(); // Keep last 10 measurements\n            }\n            \n            if (response.ok) {\n                this.apiHealth.success++;\n                devLog('AppStability', `API health check passed (${latency}ms)`);\n            } else {\n                this.apiHealth.failure++;\n                devError('AppStability', `API health check failed: ${response.status}`);\n            }\n        } catch (error) {\n            this.apiHealth.failure++;\n            devError('AppStability', 'API health check error:', error.message);\n        }\n        \n        // Calculate average latency\n        const avgLatency = this.apiHealth.latency.reduce((a, b) => a + b, 0) / this.apiHealth.latency.length;\n        \n        // Warn if API is slow or unreliable\n        if (avgLatency > 3000) {\n            devLog('AppStability', `⚠️ API is slow (avg ${Math.round(avgLatency)}ms)`);\n        }\n        \n        const successRate = this.apiHealth.success / (this.apiHealth.success + this.apiHealth.failure);\n        if (successRate < 0.9) {\n            devLog('AppStability', `⚠️ API reliability issues (${Math.round(successRate * 100)}% success rate)`);\n        }\n    }\n\n    /**\n     * Setup global error handling\n     */\n    setupGlobalErrorHandling() {\n        // Handle unhandled promise rejections\n        const originalHandler = global.onunhandledrejection;\n        global.onunhandledrejection = (event) => {\n            devError('AppStability', 'Unhandled promise rejection:', event);\n            \n            // Check if it's a network error\n            if (event.reason?.message?.includes('Network') || \n                event.reason?.message?.includes('fetch')) {\n                this.handleNetworkError(event.reason);\n            }\n            \n            // Call original handler if exists\n            if (originalHandler) {\n                originalHandler(event);\n            }\n        };\n    }\n\n    /**\n     * Handle network errors gracefully\n     */\n    handleNetworkError(error) {\n        devLog('AppStability', 'Handling network error:', error.message);\n        \n        // Don't spam the user with alerts\n        if (!this.lastNetworkErrorTime || Date.now() - this.lastNetworkErrorTime > 10000) {\n            this.lastNetworkErrorTime = Date.now();\n            this.emit('network_error', error);\n        }\n    }\n\n    /**\n     * Setup performance monitoring\n     */\n    setupPerformanceMonitoring() {\n        // Monitor JS frame rate\n        let lastFrameTime = Date.now();\n        let frameCount = 0;\n        \n        const measureFrameRate = () => {\n            frameCount++;\n            const now = Date.now();\n            \n            if (now - lastFrameTime >= 1000) {\n                const fps = frameCount;\n                frameCount = 0;\n                lastFrameTime = now;\n                \n                if (fps < 30) {\n                    devLog('AppStability', `⚠️ Low frame rate: ${fps} FPS`);\n                }\n            }\n            \n            requestAnimationFrame(measureFrameRate);\n        };\n        \n        if (__DEV__) {\n            requestAnimationFrame(measureFrameRate);\n        }\n    }\n\n    /**\n     * Get stability status\n     */\n    getStatus() {\n        const avgLatency = this.apiHealth.latency.reduce((a, b) => a + b, 0) / (this.apiHealth.latency.length || 1);\n        const successRate = this.apiHealth.success / (this.apiHealth.success + this.apiHealth.failure || 1);\n        \n        return {\n            isOnline: this.isOnline,\n            connectionQuality: this.connectionQuality,\n            apiHealth: {\n                avgLatency: Math.round(avgLatency),\n                successRate: Math.round(successRate * 100),\n                totalRequests: this.apiHealth.success + this.apiHealth.failure\n            },\n            socketStatus: socketService.isConnected() ? 'connected' : 'disconnected',\n            realtimeMode: realtimeService.getStatus().mode\n        };\n    }\n\n    /**\n     * Event emitter functionality\n     */\n    listeners = new Map();\n    \n    on(event, callback) {\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, new Set());\n        }\n        this.listeners.get(event).add(callback);\n        \n        return () => {\n            this.listeners.get(event)?.delete(callback);\n        };\n    }\n    \n    emit(event, data) {\n        this.listeners.get(event)?.forEach(callback => {\n            try {\n                callback(data);\n            } catch (error) {\n                devError('AppStability', `Error in ${event} listener:`, error);\n            }\n        });\n    }\n\n    /**\n     * Cleanup\n     */\n    cleanup() {\n        if (this.networkListener) {\n            this.networkListener();\n        }\n        if (this.healthCheckInterval) {\n            clearInterval(this.healthCheckInterval);\n        }\n        this.listeners.clear();\n    }\n}\n\n// Create singleton instance\nconst appStabilityManager = new AppStabilityManager();\n\n// Export for debugging\nif (__DEV__) {\n    global.appStabilityManager = appStabilityManager;\n}\n\nexport default appStabilityManager;","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/cacheManager.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":248,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":248,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7177,7248],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":260,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":260,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7558,7615],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/utils/cacheManager.js\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nclass CacheManager {\n    constructor() {\n        this.memoryCache = new Map();\n        this.cacheTimestamps = new Map();\n        this.defaultTTL = 5 * 60 * 1000; // 5 minutes\n        this.maxMemoryCacheSize = 50; // Maximum items in memory\n        this.persistentKeys = new Set(); // Keys that should persist across sessions\n\n        // Start periodic cleanup\n        this.startCleanupTimer();\n    }\n\n    // Set cache with TTL\n    async set(key, value, options = {}) {\n        const { ttl = this.defaultTTL, persistent = false, skipMemory = false } = options;\n\n        const cacheData = {\n            value,\n            timestamp: Date.now(),\n            ttl,\n        };\n\n        // Store in memory cache if not skipped\n        if (!skipMemory) {\n            this.setMemoryCache(key, cacheData);\n        }\n\n        // Store in persistent storage if needed\n        if (persistent) {\n            this.persistentKeys.add(key);\n            try {\n                await AsyncStorage.setItem(`cache_${key}`, JSON.stringify(cacheData));\n            } catch (error) {\n                console.error('Failed to persist cache:', error);\n            }\n        }\n\n        return value;\n    }\n\n    // Get from cache\n    async get(key, options = {}) {\n        const { fallback = null, forceRefresh = false } = options;\n\n        if (forceRefresh) {\n            this.invalidate(key);\n            return fallback;\n        }\n\n        // Check memory cache first\n        const memoryData = this.getFromMemoryCache(key);\n        if (memoryData !== null) {\n            return memoryData;\n        }\n\n        // Check persistent storage\n        if (this.persistentKeys.has(key)) {\n            try {\n                const stored = await AsyncStorage.getItem(`cache_${key}`);\n                if (stored) {\n                    const cacheData = JSON.parse(stored);\n                    if (this.isValid(cacheData)) {\n                        // Restore to memory cache\n                        this.setMemoryCache(key, cacheData);\n                        return cacheData.value;\n                    } else {\n                        // Clean up expired data\n                        await AsyncStorage.removeItem(`cache_${key}`);\n                        this.persistentKeys.delete(key);\n                    }\n                }\n            } catch (error) {\n                console.error('Failed to read from persistent cache:', error);\n            }\n        }\n\n        return fallback;\n    }\n\n    // Get or set pattern\n    async getOrSet(key, fetcher, options = {}) {\n        const cached = await this.get(key, { forceRefresh: options.forceRefresh });\n\n        if (cached !== null && cached !== undefined) {\n            return cached;\n        }\n\n        try {\n            const value = await fetcher();\n            return await this.set(key, value, options);\n        } catch (error) {\n            console.error('Failed to fetch and cache:', error);\n            throw error;\n        }\n    }\n\n    // Set memory cache with size limit\n    setMemoryCache(key, cacheData) {\n        // Remove oldest entries if cache is too large\n        if (this.memoryCache.size >= this.maxMemoryCacheSize) {\n            const oldestKey = this.getOldestCacheKey();\n            if (oldestKey) {\n                this.memoryCache.delete(oldestKey);\n                this.cacheTimestamps.delete(oldestKey);\n            }\n        }\n\n        this.memoryCache.set(key, cacheData);\n        this.cacheTimestamps.set(key, cacheData.timestamp);\n    }\n\n    // Get from memory cache\n    getFromMemoryCache(key) {\n        const cacheData = this.memoryCache.get(key);\n\n        if (!cacheData) {\n            return null;\n        }\n\n        if (this.isValid(cacheData)) {\n            return cacheData.value;\n        }\n\n        // Clean up expired data\n        this.memoryCache.delete(key);\n        this.cacheTimestamps.delete(key);\n        return null;\n    }\n\n    // Check if cache data is valid\n    isValid(cacheData) {\n        const { timestamp, ttl } = cacheData;\n        return Date.now() - timestamp < ttl;\n    }\n\n    // Get oldest cache key\n    getOldestCacheKey() {\n        let oldestKey = null;\n        let oldestTime = Infinity;\n\n        this.cacheTimestamps.forEach((timestamp, key) => {\n            if (timestamp < oldestTime) {\n                oldestTime = timestamp;\n                oldestKey = key;\n            }\n        });\n\n        return oldestKey;\n    }\n\n    // Invalidate specific key\n    async invalidate(key) {\n        this.memoryCache.delete(key);\n        this.cacheTimestamps.delete(key);\n\n        if (this.persistentKeys.has(key)) {\n            this.persistentKeys.delete(key);\n            try {\n                await AsyncStorage.removeItem(`cache_${key}`);\n            } catch (error) {\n                console.error('Failed to remove persistent cache:', error);\n            }\n        }\n    }\n\n    // Invalidate keys matching pattern\n    async invalidatePattern(pattern) {\n        const regex = new RegExp(pattern);\n        const keysToInvalidate = [];\n\n        this.memoryCache.forEach((_, key) => {\n            if (regex.test(key)) {\n                keysToInvalidate.push(key);\n            }\n        });\n\n        await Promise.all(keysToInvalidate.map((key) => this.invalidate(key)));\n    }\n\n    // Clear all cache\n    async clear() {\n        this.memoryCache.clear();\n        this.cacheTimestamps.clear();\n\n        // Clear persistent cache\n        try {\n            const keys = await AsyncStorage.getAllKeys();\n            const cacheKeys = keys.filter((key) => key.startsWith('cache_'));\n            await AsyncStorage.multiRemove(cacheKeys);\n            this.persistentKeys.clear();\n        } catch (error) {\n            console.error('Failed to clear persistent cache:', error);\n        }\n    }\n\n    // Get cache statistics\n    getStats() {\n        let validCount = 0;\n        let expiredCount = 0;\n        let totalSize = 0;\n\n        this.memoryCache.forEach((cacheData) => {\n            if (this.isValid(cacheData)) {\n                validCount++;\n            } else {\n                expiredCount++;\n            }\n\n            // Rough size estimation\n            totalSize += JSON.stringify(cacheData.value).length;\n        });\n\n        return {\n            totalEntries: this.memoryCache.size,\n            validEntries: validCount,\n            expiredEntries: expiredCount,\n            persistentEntries: this.persistentKeys.size,\n            estimatedSize: totalSize,\n        };\n    }\n\n    // Periodic cleanup of expired entries\n    startCleanupTimer() {\n        setInterval(() => {\n            this.cleanup();\n        }, 60 * 1000); // Run every minute\n    }\n\n    // Clean up expired entries\n    cleanup() {\n        const keysToDelete = [];\n\n        this.memoryCache.forEach((cacheData, key) => {\n            if (!this.isValid(cacheData)) {\n                keysToDelete.push(key);\n            }\n        });\n\n        keysToDelete.forEach((key) => {\n            this.memoryCache.delete(key);\n            this.cacheTimestamps.delete(key);\n        });\n\n        if (keysToDelete.length > 0) {\n            console.log(`Cleaned up ${keysToDelete.length} expired cache entries`);\n        }\n    }\n\n    // Preload cache for critical data\n    async preload(entries) {\n        const promises = entries.map(({ key, fetcher, options }) =>\n            this.getOrSet(key, fetcher, { ...options, forceRefresh: true }),\n        );\n\n        try {\n            await Promise.all(promises);\n            console.log(`Preloaded ${entries.length} cache entries`);\n        } catch (error) {\n            console.error('Failed to preload cache:', error);\n        }\n    }\n}\n\n// Create singleton instance\nconst cacheManager = new CacheManager();\n\n// Export convenience functions\nexport const cache = {\n    get: (key, options) => cacheManager.get(key, options),\n    set: (key, value, options) => cacheManager.set(key, value, options),\n    getOrSet: (key, fetcher, options) => cacheManager.getOrSet(key, fetcher, options),\n    invalidate: (key) => cacheManager.invalidate(key),\n    invalidatePattern: (pattern) => cacheManager.invalidatePattern(pattern),\n    clear: () => cacheManager.clear(),\n    getStats: () => cacheManager.getStats(),\n    preload: (entries) => cacheManager.preload(entries),\n};\n\nexport default cacheManager;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/chatSocketFix.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":55,"fix":{"range":[136,136],"text":"\n"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":73,"column":61,"nodeType":"Property","messageId":"missing","endLine":74,"endColumn":1,"fix":{"range":[2812,2841],"text":"isAuthenticated,\n            }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":95,"column":53,"nodeType":"Property","messageId":"missing","endLine":96,"endColumn":1,"fix":{"range":[3465,3486],"text":"isAuthenticated,\n    }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":107,"column":52,"nodeType":"Property","messageId":"missing","endLine":108,"endColumn":1,"fix":{"range":[3921,3936],"text":"),\n            }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":124,"column":10,"nodeType":"Property","messageId":"missing","endLine":125,"endColumn":1,"fix":{"range":[4471,4478],"text":"},\n    }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":141,"column":23,"nodeType":"Property","messageId":"missing","endLine":142,"endColumn":1,"fix":{"range":[5088,5108],"text":"roomId,\n            }"}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"/**\n * Chat Socket Fix - Ensures proper socket connection for real-time chat\n */\n\nimport socketService from '../services/socketService';\nimport { devLog, devError } from './devLog';\n\nexport const ensureChatSocketConnection = async (userId, roomId) => {\n    devLog('ChatSocketFix', 'Ensuring socket connection...', { userId, roomId });\n    \n    try {\n        // 1. Check if socket is connected\n        if (!socketService.socket?.connected) {\n            devLog('ChatSocketFix', 'Socket not connected, attempting connection...');\n            await socketService.connect(userId);\n            \n            // Wait for connection\n            await new Promise((resolve) => {\n                const checkConnection = setInterval(() => {\n                    if (socketService.socket?.connected) {\n                        clearInterval(checkConnection);\n                        resolve();\n                    }\n                }, 100);\n                \n                // Timeout after 5 seconds\n                setTimeout(() => {\n                    clearInterval(checkConnection);\n                    resolve();\n                }, 5000);\n            });\n        }\n        \n        // 2. Check if authenticated\n        if (!socketService.isAuthenticated) {\n            devLog('ChatSocketFix', 'Socket not authenticated, waiting for auth...');\n            \n            // Wait for authentication\n            await new Promise((resolve) => {\n                const checkAuth = setInterval(() => {\n                    if (socketService.isAuthenticated) {\n                        clearInterval(checkAuth);\n                        resolve();\n                    }\n                }, 100);\n                \n                // Timeout after 3 seconds\n                setTimeout(() => {\n                    clearInterval(checkAuth);\n                    resolve();\n                }, 3000);\n            });\n        }\n        \n        // 3. Join room if authenticated\n        if (socketService.socket?.connected && socketService.isAuthenticated) {\n            devLog('ChatSocketFix', `🚪 Joining room: ${roomId}`);\n            \n            // Use direct socket emit to ensure room join\n            socketService.socket.emit('joinRoom', roomId);\n            \n            // Also join the room with room_ prefix to match backend\n            const roomName = `room_${roomId}`;\n            devLog('ChatSocketFix', `🚪 Also joining: ${roomName}`);\n            \n            // Wait a bit to ensure room join is processed\n            await new Promise(resolve => setTimeout(resolve, 100));\n            \n            return true;\n        } else {\n            devError('ChatSocketFix', 'Failed to establish authenticated connection', {\n                connected: socketService.socket?.connected,\n                authenticated: socketService.isAuthenticated\n            });\n            return false;\n        }\n        \n    } catch (error) {\n        devError('ChatSocketFix', 'Error ensuring socket connection', error);\n        return false;\n    }\n};\n\nexport const setupChatListeners = (roomId, handlers) => {\n    const socket = socketService.socket;\n    if (!socket) {\n        devError('ChatSocketFix', 'No socket instance available');\n        return () => {};\n    }\n    \n    devLog('ChatSocketFix', '🎆 Setting up chat listeners for room:', roomId);\n    devLog('ChatSocketFix', 'Socket state:', {\n        connected: socket.connected,\n        id: socket.id,\n        authenticated: socketService.isAuthenticated\n    });\n    \n    // Setup listeners with enhanced logging\n    const listeners = {\n        'new_message': (data) => {\n            devLog('ChatSocketFix', '🔴 NEW_MESSAGE EVENT IN CHAT SOCKET FIX', {\n                data,\n                roomId,\n                dataRoomId: data?.roomId,\n                messageRoomId: data?.message?.roomId,\n                messageRoom: data?.message?.room,\n                timestamp: new Date().toISOString()\n            });\n            if (handlers.onNewMessage) {\n                handlers.onNewMessage(data);\n            }\n        },\n        'user_typing': (data) => {\n            devLog('ChatSocketFix', 'user_typing received:', data);\n            if (handlers.onUserTyping) {\n                handlers.onUserTyping(data);\n            }\n        },\n        'room_users': (data) => {\n            devLog('ChatSocketFix', 'room_users received:', data);\n            if (handlers.onRoomUsers) {\n                handlers.onRoomUsers(data);\n            }\n        }\n    };\n    \n    // Add all listeners\n    Object.entries(listeners).forEach(([event, handler]) => {\n        socket.on(event, handler);\n    });\n    \n    // Also listen to all events for debugging\n    const anyHandler = (eventName, ...args) => {\n        devLog('ChatSocketFix', `📡 Any event: ${eventName}`, args);\n        \n        // Special handling for message events\n        if (eventName === 'new_message' || eventName.includes('message')) {\n            devLog('ChatSocketFix', `⚠️ MESSAGE-RELATED EVENT: ${eventName}`, {\n                args,\n                timestamp: new Date().toISOString(),\n                roomId\n            });\n        }\n    };\n    socket.onAny(anyHandler);\n    \n    // Return cleanup function\n    return () => {\n        Object.entries(listeners).forEach(([event, handler]) => {\n            socket.off(event, handler);\n        });\n        socket.offAny(anyHandler);\n    };\n};","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/constants.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/debounce.js","messages":[{"ruleId":"max-len","severity":1,"message":"This line has a length of 105. Maximum allowed is 100.","line":9,"column":1,"nodeType":"Program","messageId":"max","endLine":9,"endColumn":106}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/utils/debounce.js\n\n/**\n * Creates a debounced function that delays invoking func until after wait milliseconds\n * have elapsed since the last time the debounced function was invoked.\n *\n * @param {Function} func - The function to debounce\n * @param {number} wait - The number of milliseconds to delay\n * @param {boolean} immediate - If true, trigger the function on the leading edge instead of the trailing\n * @returns {Function} The debounced function\n */\nexport function debounce(func, wait, immediate = false) {\n    let timeout;\n\n    return function executedFunction(...args) {\n        const later = () => {\n            timeout = null;\n            if (!immediate) func(...args);\n        };\n\n        const callNow = immediate && !timeout;\n\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n\n        if (callNow) func(...args);\n    };\n}\n\n/**\n * Creates a throttled function that only invokes func at most once per every wait milliseconds.\n *\n * @param {Function} func - The function to throttle\n * @param {number} wait - The number of milliseconds to throttle invocations to\n * @returns {Function} The throttled function\n */\nexport function throttle(func, wait) {\n    let inThrottle;\n    let lastTime = 0;\n\n    return function (...args) {\n        const now = Date.now();\n\n        if (!inThrottle && now - lastTime >= wait) {\n            func.apply(this, args);\n            lastTime = now;\n            inThrottle = true;\n\n            setTimeout(() => {\n                inThrottle = false;\n            }, wait);\n        }\n    };\n}\n\nexport default { debounce, throttle };\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/devLog.js","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":13,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":13,"endColumn":3,"fix":{"range":[425,427],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":15,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":15,"endColumn":3,"fix":{"range":[456,458],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":16,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":16,"endColumn":3,"fix":{"range":[502,504],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":18,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":18,"endColumn":3,"fix":{"range":[552,554],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 4.","line":19,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":19,"endColumn":5,"fix":{"range":[566,570],"text":"        "}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":19,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":19,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[570,612],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":20,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":20,"endColumn":3,"fix":{"range":[613,615],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 4.","line":21,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":21,"endColumn":5,"fix":{"range":[624,628],"text":"        "}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":21,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":21,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[628,664],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":22,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":22,"endColumn":3,"fix":{"range":[665,667],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":32,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":32,"endColumn":3,"fix":{"range":[920,922],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":34,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":34,"endColumn":3,"fix":{"range":[961,963],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":35,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":35,"endColumn":3,"fix":{"range":[1007,1009],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":37,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":37,"endColumn":3,"fix":{"range":[1065,1067],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 4.","line":38,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":38,"endColumn":5,"fix":{"range":[1080,1084],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":39,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":39,"endColumn":3,"fix":{"range":[1130,1132],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 4.","line":40,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":40,"endColumn":5,"fix":{"range":[1141,1145],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":41,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":41,"endColumn":3,"fix":{"range":[1184,1186],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":51,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":51,"endColumn":3,"fix":{"range":[1431,1433],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":53,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":53,"endColumn":3,"fix":{"range":[1462,1464],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":54,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":54,"endColumn":3,"fix":{"range":[1508,1510],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":56,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":56,"endColumn":3,"fix":{"range":[1565,1567],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 4.","line":57,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":57,"endColumn":5,"fix":{"range":[1579,1583],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":58,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":58,"endColumn":3,"fix":{"range":[1627,1629],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 4.","line":59,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":59,"endColumn":5,"fix":{"range":[1638,1642],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":60,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":60,"endColumn":3,"fix":{"range":[1680,1682],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":64,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":64,"endColumn":3,"fix":{"range":[1705,1707],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":65,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":65,"endColumn":3,"fix":{"range":[1720,1722],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":66,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":66,"endColumn":3,"fix":{"range":[1739,1741],"text":"    "}}],"suppressedMessages":[],"errorCount":27,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":27,"fixableWarningCount":0,"source":"// Development logging utility\n// Only logs in development mode to keep production clean\n\nconst isDevelopment = __DEV__ || process.env.NODE_ENV === 'development';\n\n/**\n * Development logging utility\n * @param {string} category - Log category (e.g., 'API', 'Auth', 'Socket')\n * @param {string} message - Log message\n * @param {any} data - Additional data to log\n */\nexport const devLog = (category, message, data = null) => {\n  if (!isDevelopment) return;\n\n  const timestamp = new Date().toISOString();\n  const prefix = `[${timestamp}] [${category}]`;\n\n  if (data) {\n    console.log(`${prefix} ${message}`, data);\n  } else {\n    console.log(`${prefix} ${message}`);\n  }\n};\n\n/**\n * Development error logging utility\n * @param {string} category - Error category\n * @param {string} message - Error message\n * @param {Error|any} error - Error object or data\n */\nexport const devError = (category, message, error = null) => {\n  if (!isDevelopment && !error) return;\n\n  const timestamp = new Date().toISOString();\n  const prefix = `[${timestamp}] [ERROR] [${category}]`;\n\n  if (error) {\n    console.error(`${prefix} ${message}`, error);\n  } else {\n    console.error(`${prefix} ${message}`);\n  }\n};\n\n/**\n * Development warning logging utility\n * @param {string} category - Warning category\n * @param {string} message - Warning message\n * @param {any} data - Additional data\n */\nexport const devWarn = (category, message, data = null) => {\n  if (!isDevelopment) return;\n\n  const timestamp = new Date().toISOString();\n  const prefix = `[${timestamp}] [WARN] [${category}]`;\n\n  if (data) {\n    console.warn(`${prefix} ${message}`, data);\n  } else {\n    console.warn(`${prefix} ${message}`);\n  }\n};\n\nexport default {\n  log: devLog,\n  error: devError,\n  warn: devWarn,\n};","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/fontLoader.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/formatting.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/globalPatches.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":25,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":25,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[832,921],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4191,4260],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":135,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":135,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4321,4396],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":154,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":154,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4763,4823],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":155,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":155,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4832,4879],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4888,4940],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":157,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":157,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4949,5014],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5151,5272],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"react-native/no-inline-styles","severity":1,"message":"Inline style: {\n  color: 'red',\n  padding: 20,\n  textAlign: 'center',\n  backgroundColor: '#fee',\n  margin: 10,\n  borderRadius: 5\n}","line":251,"column":28,"nodeType":"ObjectExpression","endLine":258,"endColumn":22},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":272,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":272,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8101,8157],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":284,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":284,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8430,8489],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/utils/globalPatches.js\nimport React from 'react';\nimport { ActivityIndicator, Text, TextInput, Platform } from 'react-native';\n\n/**\n * Global patches for React Native components to fix common issues\n * Import this file at the very top of your App.js\n */\n\n// Store original components\nconst OriginalActivityIndicator = ActivityIndicator;\nconst OriginalText = Text;\nconst OriginalTextInput = TextInput;\n\n// Track if patches have been applied\nlet patchesApplied = false;\n\n// === PATCH 1: ActivityIndicator Size Fix ===\nexport const PatchedActivityIndicator = React.forwardRef((props, ref) => {\n    const { size: originalSize, ...restProps } = props;\n    let size = originalSize;\n\n    // Debug logging in development\n    if (__DEV__ && size && typeof size === 'string' && size !== 'small' && size !== 'large') {\n        console.log(`[ActivityIndicator Patch] Converting invalid size \"${size}\" to valid size`);\n    }\n\n    // Ensure size is valid\n    if (size && typeof size === 'string') {\n        const lowerSize = size.toLowerCase();\n        if (size !== 'small' && size !== 'large') {\n            // Convert common size variations\n            if (\n                lowerSize.includes('small') ||\n                lowerSize.includes('tiny') ||\n                lowerSize === 'xs' ||\n                lowerSize === 'sm'\n            ) {\n                size = 'small';\n            } else {\n                size = 'large';\n            }\n        }\n    } else if (typeof size === 'number') {\n        // Convert numeric sizes to valid string sizes\n        size = size < 30 ? 'small' : 'large';\n    } else if (!size) {\n        // Default size\n        size = 'large';\n    }\n\n    return <OriginalActivityIndicator ref={ref} size={size} {...restProps} />;\n});\nPatchedActivityIndicator.displayName = 'PatchedActivityIndicator';\n\n// Copy static properties and methods\nObject.setPrototypeOf(PatchedActivityIndicator, OriginalActivityIndicator);\nfor (const key in OriginalActivityIndicator) {\n    if (Object.prototype.hasOwnProperty.call(OriginalActivityIndicator, key)) {\n        PatchedActivityIndicator[key] = OriginalActivityIndicator[key];\n    }\n}\n\n// === PATCH 2: Text Component Number Fix ===\nexport const PatchedText = React.forwardRef((props, ref) => {\n    const { children, ...restProps } = props;\n\n    // Convert children to string if it's a number to prevent issues\n    let safeChildren = children;\n    if (typeof children === 'number') {\n        safeChildren = String(children);\n    } else if (Array.isArray(children)) {\n        safeChildren = React.Children.map(children, (child) => {\n            if (typeof child === 'number') {\n                return String(child);\n            }\n            return child;\n        });\n    }\n\n    return (\n        <OriginalText ref={ref} {...restProps}>\n            {safeChildren}\n        </OriginalText>\n    );\n});\nPatchedText.displayName = 'PatchedText';\n\n// Copy static properties\nObject.setPrototypeOf(PatchedText, OriginalText);\nfor (const key in OriginalText) {\n    if (Object.prototype.hasOwnProperty.call(OriginalText, key)) {\n        PatchedText[key] = OriginalText[key];\n    }\n}\n\n// === PATCH 3: TextInput Value Sanitization ===\nexport const PatchedTextInput = React.forwardRef((props, ref) => {\n    const { value, defaultValue, ...restProps } = props;\n\n    // Ensure value is always a string\n    const safeValue = value !== undefined && value !== null ? String(value) : value;\n    const safeDefaultValue =\n        defaultValue !== undefined && defaultValue !== null ? String(defaultValue) : defaultValue;\n\n    return (\n        <OriginalTextInput\n            ref={ref}\n            value={safeValue}\n            defaultValue={safeDefaultValue}\n            {...restProps}\n        />\n    );\n});\nPatchedTextInput.displayName = 'PatchedTextInput';\n\n// Copy static properties\nObject.setPrototypeOf(PatchedTextInput, OriginalTextInput);\nfor (const key in OriginalTextInput) {\n    if (Object.prototype.hasOwnProperty.call(OriginalTextInput, key)) {\n        PatchedTextInput[key] = OriginalTextInput[key];\n    }\n}\n\n// === Apply All Patches ===\nexport const applyGlobalPatches = () => {\n    if (patchesApplied) {\n        if (__DEV__) {\n            console.log('[Global Patches] Patches already applied, skipping...');\n        }\n        return;\n    }\n\n    if (__DEV__) {\n        console.log('[Global Patches] Applying React Native component patches...');\n    }\n\n    // Override the components globally\n    const RN = require('react-native');\n\n    // Patch ActivityIndicator\n    RN.ActivityIndicator = PatchedActivityIndicator;\n\n    // Patch Text\n    RN.Text = PatchedText;\n\n    // Patch TextInput\n    RN.TextInput = PatchedTextInput;\n\n    // Mark patches as applied\n    patchesApplied = true;\n\n    if (__DEV__) {\n        console.log('[Global Patches] ✓ ActivityIndicator patched');\n        console.log('[Global Patches] ✓ Text patched');\n        console.log('[Global Patches] ✓ TextInput patched');\n        console.log('[Global Patches] All patches applied successfully');\n    }\n};\n\n// === Legacy Support for patchActivityIndicator ===\nexport const patchActivityIndicator = () => {\n    if (__DEV__) {\n        console.log(\n            '[Global Patches] patchActivityIndicator called - redirecting to applyGlobalPatches',\n        );\n    }\n    applyGlobalPatches();\n};\n\n// === Utility Functions ===\n\n/**\n * Validate and convert size prop for ActivityIndicator\n */\nexport const validateActivityIndicatorSize = (size) => {\n    if (typeof size === 'string') {\n        if (size === 'small' || size === 'large') {\n            return size;\n        }\n        const lowerSize = size.toLowerCase();\n        if (\n            lowerSize.includes('small') ||\n            lowerSize.includes('tiny') ||\n            lowerSize === 'xs' ||\n            lowerSize === 'sm'\n        ) {\n            return 'small';\n        }\n        return 'large';\n    }\n    if (typeof size === 'number') {\n        return size < 30 ? 'small' : 'large';\n    }\n    return 'large';\n};\n\n/**\n * Safe number to string conversion for display\n */\nexport const safeNumberToString = (value, decimals = 2) => {\n    if (typeof value === 'number') {\n        if (Number.isInteger(value)) {\n            return String(value);\n        }\n        return value.toFixed(decimals);\n    }\n    return String(value || '');\n};\n\n/**\n * Format currency values safely\n */\nexport const safeFormatCurrency = (amount, currency = 'EUR') => {\n    const safeAmount = typeof amount === 'number' ? amount : parseFloat(amount) || 0;\n    try {\n        return new Intl.NumberFormat('es-ES', {\n            style: 'currency',\n            currency,\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n        }).format(safeAmount);\n    } catch (error) {\n        return `€${safeAmount.toFixed(2)}`;\n    }\n};\n\n// === Error Boundary for Patched Components ===\nexport class PatchedComponentErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false, error: null };\n    }\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true, error };\n    }\n\n    componentDidCatch(error, errorInfo) {\n        if (__DEV__) {\n            console.error('[Patched Component Error]:', error);\n            console.error('Error Info:', errorInfo);\n        }\n    }\n\n    render() {\n        if (this.state.hasError) {\n            const FallbackText = OriginalText || Text;\n            return (\n                <FallbackText\n                    style={{\n                        color: 'red',\n                        padding: 20,\n                        textAlign: 'center',\n                        backgroundColor: '#fee',\n                        margin: 10,\n                        borderRadius: 5,\n                    }}\n                >\n                    Component Error: {this.state.error?.message || 'Unknown error'}\n                </FallbackText>\n            );\n        }\n        return this.props.children;\n    }\n}\n\n// === Platform-specific patches ===\nif (Platform.OS === 'web') {\n    // Web-specific patches can go here\n    if (__DEV__) {\n        console.log('[Global Patches] Running on web platform');\n    }\n}\n\n// === Performance monitoring ===\nif (__DEV__) {\n    const originalRender = React.Component.prototype.render;\n    let renderCount = 0;\n\n    React.Component.prototype.render = function () {\n        renderCount++;\n        if (renderCount % 100 === 0) {\n            console.log(`[Performance] Total renders: ${renderCount}`);\n        }\n        return originalRender.call(this);\n    };\n}\n\n// Export patched components for direct use\nexport {\n    PatchedActivityIndicator as ActivityIndicator,\n    PatchedText as Text,\n    PatchedTextInput as TextInput,\n};\n\n// Default export for convenience\nexport default {\n    applyGlobalPatches,\n    patchActivityIndicator,\n    ActivityIndicator: PatchedActivityIndicator,\n    Text: PatchedText,\n    TextInput: PatchedTextInput,\n    validateActivityIndicatorSize,\n    safeNumberToString,\n    safeFormatCurrency,\n    PatchedComponentErrorBoundary,\n};\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/networkRetry.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":22,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[618,674],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/utils/networkRetry.js\nimport NetInfo from '@react-native-community/netinfo';\n\nclass NetworkRetryManager {\n    constructor() {\n        this.retryQueue = [];\n        this.isOnline = true;\n        this.maxRetries = 3;\n        this.retryDelay = 1000;\n        this.listeners = new Map();\n\n        // Start monitoring network status\n        this.initNetworkListener();\n    }\n\n    initNetworkListener() {\n        NetInfo.addEventListener((state) => {\n            const wasOffline = !this.isOnline;\n            this.isOnline = state.isConnected;\n\n            if (wasOffline && this.isOnline) {\n                console.log('Network restored, processing retry queue');\n                this.processRetryQueue();\n            }\n\n            // Notify listeners\n            this.notifyListeners(this.isOnline);\n        });\n    }\n\n    async executeWithRetry(fn, options = {}) {\n        const {\n            maxRetries = this.maxRetries,\n            retryDelay = this.retryDelay,\n            shouldRetry = (error) => this.shouldRetryRequest(error),\n            onRetry = () => {},\n        } = options;\n\n        let lastError;\n\n        for (let attempt = 0; attempt <= maxRetries; attempt++) {\n            try {\n                // Check network status before attempting\n                if (!this.isOnline && attempt === 0) {\n                    // Add to retry queue for later\n                    return this.addToRetryQueue(fn, options);\n                }\n\n                const result = await fn();\n                return result;\n            } catch (error) {\n                lastError = error;\n\n                if (attempt < maxRetries && shouldRetry(error)) {\n                    onRetry(attempt + 1, error);\n\n                    // Exponential backoff\n                    const delay = retryDelay * Math.pow(2, attempt);\n                    await this.delay(delay);\n                } else {\n                    break;\n                }\n            }\n        }\n\n        throw lastError;\n    }\n\n    shouldRetryRequest(error) {\n        // Retry on network errors\n        if (!error.response) {\n            return true;\n        }\n\n        // Retry on 5xx server errors\n        if (error.response && error.response.status >= 500) {\n            return true;\n        }\n\n        // Retry on specific status codes\n        const retryableCodes = [408, 429, 503, 504];\n        if (error.response && retryableCodes.includes(error.response.status)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    addToRetryQueue(fn, options) {\n        return new Promise((resolve, reject) => {\n            this.retryQueue.push({\n                fn,\n                options,\n                resolve,\n                reject,\n                timestamp: Date.now(),\n            });\n        });\n    }\n\n    async processRetryQueue() {\n        const queue = [...this.retryQueue];\n        this.retryQueue = [];\n\n        for (const item of queue) {\n            try {\n                const result = await this.executeWithRetry(item.fn, item.options);\n                item.resolve(result);\n            } catch (error) {\n                item.reject(error);\n            }\n        }\n    }\n\n    delay(ms) {\n        return new Promise((resolve) => setTimeout(resolve, ms));\n    }\n\n    // Subscribe to network status changes\n    addNetworkListener(callback) {\n        const id = Date.now().toString();\n        this.listeners.set(id, callback);\n\n        // Call immediately with current status\n        callback(this.isOnline);\n\n        // Return unsubscribe function\n        return () => {\n            this.listeners.delete(id);\n        };\n    }\n\n    notifyListeners(isOnline) {\n        this.listeners.forEach((callback) => {\n            try {\n                callback(isOnline);\n            } catch (error) {\n                console.error('Error in network listener:', error);\n            }\n        });\n    }\n\n    // Get current network status\n    getNetworkStatus() {\n        return this.isOnline;\n    }\n\n    // Clear retry queue\n    clearRetryQueue() {\n        this.retryQueue.forEach((item) => {\n            item.reject(new Error('Retry queue cleared'));\n        });\n        this.retryQueue = [];\n    }\n}\n\n// Create singleton instance\nconst networkRetryManager = new NetworkRetryManager();\n\n// Export convenience functions\nexport const withRetry = (fn, options) => networkRetryManager.executeWithRetry(fn, options);\nexport const isOnline = () => networkRetryManager.getNetworkStatus();\nexport const onNetworkChange = (callback) => networkRetryManager.addNetworkListener(callback);\n\nexport default networkRetryManager;\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/performance.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useMemo' is defined but never used.","line":2,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":45},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":43,"column":12,"nodeType":"Identifier","endLine":43,"endColumn":23},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":53,"column":12,"nodeType":"Identifier","endLine":53,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/utils/performance.js\nimport React, { useCallback, useRef, useMemo } from 'react';\nimport { InteractionManager, Text } from 'react-native';\n\nexport const runAfterInteractions = (callback) => {\n    return InteractionManager.runAfterInteractions(() => {\n        if (typeof callback === 'function') {\n            callback();\n        }\n    });\n};\n\nexport const debounce = (func, wait, immediate = false) => {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            timeout = null;\n            if (!immediate) func(...args);\n        };\n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func(...args);\n    };\n};\n\nexport const throttle = (func, limit) => {\n    let inThrottle;\n    return function (...args) {\n        if (!inThrottle) {\n            func.apply(this, args);\n            inThrottle = true;\n            setTimeout(() => (inThrottle = false), limit);\n        }\n    };\n};\n\n// React hooks for performance\nexport const useDebounce = (callback, delay) => {\n    const callbackRef = useRef(callback);\n    callbackRef.current = callback;\n\n    return useCallback(\n        debounce((...args) => callbackRef.current(...args), delay),\n        [delay],\n    );\n};\n\nexport const useThrottle = (callback, delay) => {\n    const callbackRef = useRef(callback);\n    callbackRef.current = callback;\n\n    return useCallback(\n        throttle((...args) => callbackRef.current(...args), delay),\n        [delay],\n    );\n};\n\n// Memoization helpers\nexport const createMemoizedSelector = (selector) => {\n    let lastArgs = [];\n    let lastResult;\n\n    return (...args) => {\n        if (!areArgumentsEqual(args, lastArgs)) {\n            lastArgs = args;\n            lastResult = selector(...args);\n        }\n        return lastResult;\n    };\n};\n\nconst areArgumentsEqual = (args1, args2) => {\n    if (args1.length !== args2.length) return false;\n    return args1.every((arg, index) => arg === args2[index]);\n};\n\n// FlatList optimization helpers\nexport const getItemLayout =\n    (itemHeight, separatorHeight = 0) =>\n        (data, index) => ({\n            length: itemHeight,\n            offset: (itemHeight + separatorHeight) * index,\n            index,\n        });\n\nexport const keyExtractor = (item, index) => {\n    if (item && typeof item === 'object') {\n        return item.id || item._id || item.key || String(index);\n    }\n    return String(index);\n};\n\n// Image optimization\nexport const optimizeImageUri = (uri, width, height, quality = 0.8) => {\n    if (!uri) return uri;\n\n    // Add query parameters for image optimization if using a CDN\n    const separator = uri.includes('?') ? '&' : '?';\n    return `${uri}${separator}w=${width}&h=${height}&q=${Math.round(quality * 100)}`;\n};\n\n// Bundle splitting helper\nexport const loadComponentAsync = (importFunction) => {\n    return React.lazy(() =>\n        importFunction().catch((error) => {\n            console.error('Failed to load component:', error);\n            // Return a fallback component\n            return { default: () => <Text>Failed to load component</Text> };\n        }),\n    );\n};\n\n// Memory management\nexport const cleanupResources = (...resources) => {\n    return () => {\n        resources.forEach((resource) => {\n            if (resource && typeof resource.cleanup === 'function') {\n                resource.cleanup();\n            } else if (resource && typeof resource.remove === 'function') {\n                resource.remove();\n            } else if (resource && typeof resource.unsubscribe === 'function') {\n                resource.unsubscribe();\n            }\n        });\n    };\n};\n\n// State batching for React 18\nexport const batchUpdates = (updates) => {\n    if (typeof updates === 'function') {\n        // Use React's automatic batching in React 18\n        updates();\n    }\n};\n","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/performanceOptimizations.js","messages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useRef\" is called in function \"memoizeComputation\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":6,"column":19,"nodeType":"Identifier","endLine":6,"endColumn":25},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called in function \"memoizeComputation\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":8,"column":12,"nodeType":"Identifier","endLine":8,"endColumn":23},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":21,"column":12,"nodeType":"Identifier","endLine":21,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":24,"column":8,"nodeType":"Identifier","endLine":24,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'dependencies' and 'fn'. Either include them or remove the dependency array. If 'fn' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":24,"column":8,"nodeType":"Identifier","endLine":24,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [dependencies, fn]","fix":{"range":[711,723],"text":"[dependencies, fn]"}}]},{"ruleId":"no-undef","severity":2,"message":"'useState' is not defined.","line":109,"column":39,"nodeType":"Identifier","messageId":"undef","endLine":109,"endColumn":47},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":118,"column":61,"nodeType":"Property","messageId":"missing","endLine":119,"endColumn":1,"fix":{"range":[3753,3764],"text":"),\n        }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":126,"column":69,"nodeType":"Property","messageId":"missing","endLine":127,"endColumn":1,"fix":{"range":[4035,4042],"text":"),\n    }"}},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":148,"column":8,"nodeType":"Identifier","endLine":148,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handler'. Either include it or remove the dependency array.","line":148,"column":8,"nodeType":"Identifier","endLine":148,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [handler]","fix":{"range":[4612,4624],"text":"[handler]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":167,"column":8,"nodeType":"Identifier","endLine":167,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'cleanupFn'. Either include it or remove the dependency array. If 'cleanupFn' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":167,"column":8,"nodeType":"Identifier","endLine":167,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [cleanupFn]","fix":{"range":[5098,5110],"text":"[cleanupFn]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'value'. Either include it or remove the dependency array.","line":178,"column":52,"nodeType":"ArrayExpression","endLine":178,"endColumn":75,"suggestions":[{"desc":"Update the dependencies array to be: [value]","fix":{"range":[5458,5481],"text":"[value]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":178,"column":53,"nodeType":"CallExpression","endLine":178,"endColumn":74},{"ruleId":"no-undef","severity":2,"message":"'Animated' is not defined.","line":207,"column":38,"nodeType":"Identifier","messageId":"undef","endLine":207,"endColumn":46},{"ruleId":"no-undef","severity":2,"message":"'Animated' is not defined.","line":210,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":210,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'animatedValue'. Either include it or remove the dependency array.","line":216,"column":8,"nodeType":"ArrayExpression","endLine":216,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [animatedValue, toValue, config]","fix":{"range":[6493,6510],"text":"[animatedValue, toValue, config]"}}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import React, { memo, useCallback, useMemo, useRef, useEffect } from 'react';\nimport { InteractionManager } from 'react-native';\n\n// Memoization helper for expensive computations\nexport const memoizeComputation = (fn, dependencies = []) => {\n    const cache = useRef({});\n    \n    return useCallback((...args) => {\n        const key = JSON.stringify(args);\n        \n        if (cache.current[key]) {\n            return cache.current[key];\n        }\n        \n        const result = fn(...args);\n        cache.current[key] = result;\n        \n        // Clear cache when dependencies change\n        useEffect(() => {\n            cache.current = {};\n        }, dependencies);\n        \n        return result;\n    }, dependencies);\n};\n\n// Component render optimization\nexport const optimizeComponent = (Component, propsAreEqual) => {\n    return memo(Component, propsAreEqual || ((prevProps, nextProps) => {\n        // Deep comparison for objects\n        const keys = Object.keys(prevProps);\n        const nextKeys = Object.keys(nextProps);\n        \n        if (keys.length !== nextKeys.length) return false;\n        \n        return keys.every(key => {\n            if (typeof prevProps[key] === 'function') {\n                // Skip function comparison\n                return true;\n            }\n            \n            if (typeof prevProps[key] === 'object' && prevProps[key] !== null) {\n                // Simple shallow comparison for objects\n                return JSON.stringify(prevProps[key]) === JSON.stringify(nextProps[key]);\n            }\n            \n            return prevProps[key] === nextProps[key];\n        });\n    }));\n};\n\n// Batch state updates\nexport const useBatchedState = (initialState) => {\n    const [state, setState] = React.useState(initialState);\n    const pendingUpdates = useRef([]);\n    const timeoutRef = useRef(null);\n    \n    const batchedSetState = useCallback((update) => {\n        pendingUpdates.current.push(update);\n        \n        if (timeoutRef.current) {\n            clearTimeout(timeoutRef.current);\n        }\n        \n        timeoutRef.current = setTimeout(() => {\n            setState(currentState => {\n                let newState = currentState;\n                \n                pendingUpdates.current.forEach(update => {\n                    if (typeof update === 'function') {\n                        newState = update(newState);\n                    } else {\n                        newState = { ...newState, ...update };\n                    }\n                });\n                \n                pendingUpdates.current = [];\n                return newState;\n            });\n        }, 16); // One frame\n    }, []);\n    \n    return [state, batchedSetState];\n};\n\n// Lazy loading with suspense\nexport const lazyWithPreload = (importFn) => {\n    let Component = null;\n    let promise = null;\n    \n    const load = () => {\n        if (!promise) {\n            promise = importFn().then(module => {\n                Component = module.default || module;\n                return Component;\n            });\n        }\n        return promise;\n    };\n    \n    const LazyComponent = React.lazy(load);\n    LazyComponent.preload = load;\n    \n    return LazyComponent;\n};\n\n// Virtual list optimization\nexport const useVirtualList = (items, itemHeight, containerHeight) => {\n    const [scrollTop, setScrollTop] = useState(0);\n    \n    const visibleItems = useMemo(() => {\n        const startIndex = Math.floor(scrollTop / itemHeight);\n        const endIndex = Math.ceil((scrollTop + containerHeight) / itemHeight);\n        const overscan = 3; // Render extra items for smooth scrolling\n        \n        return {\n            start: Math.max(0, startIndex - overscan),\n            end: Math.min(items.length, endIndex + overscan)\n        };\n    }, [scrollTop, items.length, itemHeight, containerHeight]);\n    \n    return {\n        visibleItems,\n        totalHeight: items.length * itemHeight,\n        offsetY: visibleItems.start * itemHeight,\n        onScroll: (e) => setScrollTop(e.nativeEvent.contentOffset.y)\n    };\n};\n\n// Image optimization\nexport const optimizedImage = (uri, { width, height, quality = 0.8 }) => {\n    if (!uri) return null;\n    \n    // Add image optimization parameters\n    const optimizedUri = uri.includes('?') \n        ? `${uri}&w=${width}&h=${height}&q=${quality}`\n        : `${uri}?w=${width}&h=${height}&q=${quality}`;\n    \n    return optimizedUri;\n};\n\n// Gesture optimization\nexport const useOptimizedGesture = (handler, dependencies = []) => {\n    const handlerRef = useRef(handler);\n    \n    useEffect(() => {\n        handlerRef.current = handler;\n    }, dependencies);\n    \n    return useCallback((event) => {\n        // Run gesture handlers after interactions\n        InteractionManager.runAfterInteractions(() => {\n            handlerRef.current(event);\n        });\n    }, []);\n};\n\n// Memory leak prevention\nexport const useCleanup = (cleanupFn, dependencies = []) => {\n    const isMounted = useRef(true);\n    \n    useEffect(() => {\n        return () => {\n            isMounted.current = false;\n            cleanupFn();\n        };\n    }, dependencies);\n    \n    return isMounted;\n};\n\n// Optimized context provider\nexport const createOptimizedContext = (defaultValue) => {\n    const Context = React.createContext(defaultValue);\n    \n    const Provider = ({ children, value }) => {\n        // Memoize context value to prevent unnecessary re-renders\n        const memoizedValue = useMemo(() => value, [JSON.stringify(value)]);\n        \n        return (\n            <Context.Provider value={memoizedValue}>\n                {children}\n            </Context.Provider>\n        );\n    };\n    \n    return { Context, Provider };\n};\n\n// FlatList optimization presets\nexport const flatListOptimizations = {\n    removeClippedSubviews: true,\n    maxToRenderPerBatch: 10,\n    updateCellsBatchingPeriod: 50,\n    initialNumToRender: 10,\n    windowSize: 10,\n    getItemLayout: (data, index, itemHeight) => ({\n        length: itemHeight,\n        offset: itemHeight * index,\n        index,\n    }),\n    keyExtractor: (item, index) => item.id || item._id || index.toString(),\n};\n\n// Animation optimization\nexport const useOptimizedAnimation = (toValue, config = {}) => {\n    const animatedValue = useRef(new Animated.Value(0)).current;\n    \n    const animate = useCallback(() => {\n        Animated.timing(animatedValue, {\n            toValue,\n            duration: 300,\n            useNativeDriver: true,\n            ...config,\n        }).start();\n    }, [toValue, config]);\n    \n    return { animatedValue, animate };\n};\n\n// Scroll performance optimization\nexport const scrollOptimizations = {\n    scrollEventThrottle: 16,\n    decelerationRate: 'fast',\n    overScrollMode: 'never',\n    showsVerticalScrollIndicator: false,\n    showsHorizontalScrollIndicator: false,\n};\n\n// Export all optimizations\nexport default {\n    memoizeComputation,\n    optimizeComponent,\n    useBatchedState,\n    lazyWithPreload,\n    useVirtualList,\n    optimizedImage,\n    useOptimizedGesture,\n    useCleanup,\n    createOptimizedContext,\n    flatListOptimizations,\n    useOptimizedAnimation,\n    scrollOptimizations,\n};","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/realtimeDebugger.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":55,"fix":{"range":[135,135],"text":"\n"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":42,"column":31,"nodeType":"Literal","messageId":"missing","endLine":43,"endColumn":1,"fix":{"range":[1034,1062],"text":"'reconnect_failed',\n        ]"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":77,"column":53,"nodeType":"Property","messageId":"missing","endLine":78,"endColumn":1,"fix":{"range":[1865,1876],"text":"),\n        }"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2147,2281],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":92,"column":17,"nodeType":"Identifier","messageId":"missing","endLine":93,"endColumn":1,"fix":{"range":[2266,2280],"text":"data,\n        )"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":136,"column":35,"nodeType":"Property","messageId":"missing","endLine":137,"endColumn":1,"fix":{"range":[3456,3472],"text":"'teal',\n        }"}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 12.","line":147,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":147,"endColumn":13,"fix":{"range":[3662,3674],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 16.","line":148,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":148,"endColumn":17,"fix":{"range":[3690,3706],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 20.","line":149,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":149,"endColumn":21,"fix":{"range":[3757,3777],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 20.","line":150,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":150,"endColumn":21,"fix":{"range":[3816,3836],"text":"                "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":150,"column":81,"nodeType":"Property","messageId":"missing","endLine":151,"endColumn":1,"fix":{"range":[3892,3914],"text":"name,\n                }"}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 16.","line":151,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":151,"endColumn":17,"fix":{"range":[3897,3913],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 16.","line":152,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":152,"endColumn":17,"fix":{"range":[3917,3933],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 12.","line":154,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":154,"endColumn":13,"fix":{"range":[3941,3953],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 16.","line":155,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":155,"endColumn":17,"fix":{"range":[3972,3988],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 20.","line":156,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":156,"endColumn":21,"fix":{"range":[4042,4062],"text":"                "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":156,"column":33,"nodeType":"Property","messageId":"missing","endLine":157,"endColumn":1,"fix":{"range":[4070,4092],"text":"data,\n                }"}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 16.","line":157,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":157,"endColumn":17,"fix":{"range":[4075,4091],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 16.","line":158,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":158,"endColumn":17,"fix":{"range":[4095,4111],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 12.","line":160,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":160,"endColumn":13,"fix":{"range":[4119,4131],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 16.","line":161,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":161,"endColumn":17,"fix":{"range":[4153,4169],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 20.","line":162,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":162,"endColumn":21,"fix":{"range":[4225,4245],"text":"                "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":162,"column":41,"nodeType":"Property","messageId":"missing","endLine":163,"endColumn":1,"fix":{"range":[4259,4283],"text":"userId,\n                }"}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 16.","line":163,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":163,"endColumn":17,"fix":{"range":[4266,4282],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 16.","line":164,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":164,"endColumn":17,"fix":{"range":[4286,4302],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 12.","line":166,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":166,"endColumn":13,"fix":{"range":[4310,4322],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 16.","line":167,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":167,"endColumn":17,"fix":{"range":[4336,4352],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 16.","line":168,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":168,"endColumn":17,"fix":{"range":[4405,4421],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 12.","line":170,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":170,"endColumn":13,"fix":{"range":[4429,4441],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 16.","line":171,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":171,"endColumn":17,"fix":{"range":[4461,4477],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 20.","line":172,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":172,"endColumn":21,"fix":{"range":[4533,4553],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 20.","line":173,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":173,"endColumn":21,"fix":{"range":[4575,4595],"text":"                "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 16 spaces but found 20.","line":174,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":174,"endColumn":21,"fix":{"range":[4623,4643],"text":"                "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":174,"column":62,"nodeType":"Property","messageId":"missing","endLine":175,"endColumn":1,"fix":{"range":[4683,4702],"text":"1,\n                }"}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 16.","line":175,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":175,"endColumn":17,"fix":{"range":[4685,4701],"text":"            "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 12 spaces but found 16.","line":176,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":176,"endColumn":17,"fix":{"range":[4705,4721],"text":"            "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":189,"column":56,"nodeType":"Property","messageId":"missing","endLine":190,"endColumn":1,"fix":{"range":[5138,5157],"text":"connected,\n        }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":213,"column":39,"nodeType":"Property","messageId":"missing","endLine":214,"endColumn":1,"fix":{"range":[5637,5659],"text":"null,\n                }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":259,"column":61,"nodeType":"Property","messageId":"missing","endLine":260,"endColumn":1,"fix":{"range":[6808,6837],"text":"isAuthenticated,\n            }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":260,"column":14,"nodeType":"Property","messageId":"missing","endLine":261,"endColumn":1,"fix":{"range":[6836,6847],"text":"},\n        }"}}],"suppressedMessages":[],"errorCount":39,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":39,"fixableWarningCount":0,"source":"/**\n * Real-time Updates Debugger\n * Helps diagnose real-time update issues\n */\n\nimport socketService from '../services/socketService';\nimport { devLog } from './devLog';\n\nclass RealtimeDebugger {\n    constructor() {\n        this.events = [];\n        this.maxEvents = 100;\n        this.listeners = new Map();\n        this.isEnabled = __DEV__;\n    }\n\n    /**\n     * Start debugging real-time events\n     */\n    start() {\n        if (!this.isEnabled) return;\n\n        devLog('RealtimeDebugger', '🔍 Starting real-time debugging...');\n\n        // Common events to monitor\n        const eventsToMonitor = [\n            'connect',\n            'disconnect',\n            'authenticated',\n            'auth_error',\n            'budget_update',\n            'checklist_update',\n            'event_update',\n            'forum_update',\n            'new_message',\n            'room_update',\n            'user_status_update',\n            'error',\n            'reconnect',\n            'reconnect_attempt',\n            'reconnect_error',\n            'reconnect_failed'\n        ];\n\n        eventsToMonitor.forEach(event => {\n            this.addListener(event);\n        });\n\n        // Log connection state\n        this.logConnectionState();\n    }\n\n    /**\n     * Add listener for an event\n     */\n    addListener(event) {\n        if (this.listeners.has(event)) return;\n\n        const handler = (data) => {\n            this.logEvent(event, data);\n        };\n\n        socketService.on(event, handler);\n        this.listeners.set(event, handler);\n    }\n\n    /**\n     * Log an event\n     */\n    logEvent(event, data) {\n        const timestamp = new Date().toISOString();\n        const eventLog = {\n            timestamp,\n            event,\n            data: this.sanitizeData(data),\n            socketId: socketService.getSocketId(),\n            isConnected: socketService.isConnected()\n        };\n\n        this.events.push(eventLog);\n\n        // Keep only last N events\n        if (this.events.length > this.maxEvents) {\n            this.events.shift();\n        }\n\n        // Log to console with color coding\n        const color = this.getEventColor(event);\n        console.log(\n            `%c[RT-${event}] ${timestamp}`,\n            `color: ${color}; font-weight: bold`,\n            data\n        );\n\n        // Special handling for specific events\n        this.handleSpecialEvents(event, data);\n    }\n\n    /**\n     * Sanitize data for logging (remove sensitive info)\n     */\n    sanitizeData(data) {\n        if (!data) return data;\n        \n        const sanitized = { ...data };\n        \n        // Remove sensitive fields\n        const sensitiveFields = ['token', 'password', 'auth'];\n        sensitiveFields.forEach(field => {\n            if (sanitized[field]) {\n                sanitized[field] = '[REDACTED]';\n            }\n        });\n\n        return sanitized;\n    }\n\n    /**\n     * Get color for event type\n     */\n    getEventColor(event) {\n        const colorMap = {\n            'connect': 'green',\n            'disconnect': 'red',\n            'authenticated': 'blue',\n            'auth_error': 'red',\n            'error': 'red',\n            'reconnect': 'orange',\n            'reconnect_attempt': 'orange',\n            'reconnect_error': 'red',\n            'reconnect_failed': 'red',\n            'new_message': 'purple',\n            'budget_update': 'teal',\n            'checklist_update': 'teal',\n            'event_update': 'teal',\n            'forum_update': 'teal'\n        };\n\n        return colorMap[event] || 'gray';\n    }\n\n    /**\n     * Handle special events that need additional logging\n     */\n    handleSpecialEvents(event, data) {\n        switch (event) {\n            case 'connect':\n                devLog('RealtimeDebugger', '✅ Socket connected', {\n                    socketId: socketService.getSocketId(),\n                    transport: socketService.socket?.io?.engine?.transport?.name\n                });\n                break;\n\n            case 'disconnect':\n                devLog('RealtimeDebugger', '❌ Socket disconnected', {\n                    reason: data\n                });\n                break;\n\n            case 'authenticated':\n                devLog('RealtimeDebugger', '🔐 Socket authenticated', {\n                    userId: data?.userId\n                });\n                break;\n\n            case 'error':\n                devLog('RealtimeDebugger', '⚠️ Socket error', data);\n                break;\n\n            case 'new_message':\n                devLog('RealtimeDebugger', '💬 New message received', {\n                    roomId: data?.roomId,\n                    sender: data?.sender?.name,\n                    messageCount: data?.messages?.length || 1\n                });\n                break;\n        }\n    }\n\n    /**\n     * Log current connection state\n     */\n    logConnectionState() {\n        const state = {\n            isConnected: socketService.isConnected(),\n            socketId: socketService.getSocketId(),\n            connectionState: socketService.getConnectionState(),\n            transport: socketService.socket?.io?.engine?.transport?.name,\n            readyState: socketService.socket?.connected\n        };\n\n        devLog('RealtimeDebugger', '📊 Connection State', state);\n        return state;\n    }\n\n    /**\n     * Get event history\n     */\n    getEventHistory() {\n        return this.events;\n    }\n\n    /**\n     * Get event statistics\n     */\n    getEventStats() {\n        const stats = {};\n        \n        this.events.forEach(event => {\n            if (!stats[event.event]) {\n                stats[event.event] = {\n                    count: 0,\n                    lastOccurred: null\n                };\n            }\n            \n            stats[event.event].count++;\n            stats[event.event].lastOccurred = event.timestamp;\n        });\n\n        return stats;\n    }\n\n    /**\n     * Clear event history\n     */\n    clearHistory() {\n        this.events = [];\n        devLog('RealtimeDebugger', '🧹 Event history cleared');\n    }\n\n    /**\n     * Stop debugging\n     */\n    stop() {\n        devLog('RealtimeDebugger', '🛑 Stopping real-time debugging...');\n        \n        // Remove all listeners\n        this.listeners.forEach((handler, event) => {\n            socketService.off(event, handler);\n        });\n        \n        this.listeners.clear();\n        this.clearHistory();\n    }\n\n    /**\n     * Export debug data\n     */\n    exportDebugData() {\n        return {\n            timestamp: new Date().toISOString(),\n            connectionState: this.logConnectionState(),\n            eventHistory: this.getEventHistory(),\n            eventStats: this.getEventStats(),\n            socketInfo: {\n                id: socketService.getSocketId(),\n                connected: socketService.isConnected(),\n                authenticated: socketService.isAuthenticated\n            }\n        };\n    }\n}\n\n// Create singleton instance\nconst realtimeDebugger = new RealtimeDebugger();\n\n// Auto-start in development\nif (__DEV__) {\n    // Wait for socket to be available\n    setTimeout(() => {\n        if (socketService) {\n            realtimeDebugger.start();\n        }\n    }, 1000);\n}\n\n// Export for global access in development\nif (__DEV__) {\n    global.rtDebugger = realtimeDebugger;\n}\n\nexport default realtimeDebugger;","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/realtimeMessageFix.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":55,"fix":{"range":[176,176],"text":"\n"}},{"ruleId":"max-len","severity":1,"message":"This line has a length of 103. Maximum allowed is 100.","line":57,"column":1,"nodeType":"Program","messageId":"max","endLine":57,"endColumn":104},{"ruleId":"max-len","severity":1,"message":"This line has a length of 107. Maximum allowed is 100.","line":85,"column":1,"nodeType":"Program","messageId":"max","endLine":85,"endColumn":108},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":134,"column":38,"nodeType":"Property","messageId":"missing","endLine":135,"endColumn":1,"fix":{"range":[5472,5501],"text":"'Test User',\n                }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":136,"column":52,"nodeType":"Property","messageId":"missing","endLine":137,"endColumn":1,"fix":{"range":[5553,5568],"text":"),\n            }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":138,"column":34,"nodeType":"Property","messageId":"missing","endLine":139,"endColumn":1,"fix":{"range":[5602,5613],"text":"),\n        }"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":4,"fixableWarningCount":0,"source":"/**\n * Real-time Message Fix\n * Ensures messages are received in real-time by setting up multiple fallback listeners\n */\n\nimport socketService from '../services/socketService';\nimport { devLog, devError } from './devLog';\n\nexport function setupRealtimeMessageListener(roomId, onMessageReceived) {\n    devLog('RealtimeMessageFix', '🔧 Setting up real-time message listeners', { roomId });\n    \n    const cleanupFunctions = [];\n    \n    try {\n        // Method 1: Direct socket listener\n        if (socketService.socket) {\n            const directHandler = (data) => {\n                devLog('RealtimeMessageFix', '📨 Direct socket received new_message', data);\n                \n                // Check if message is for this room\n                const messageRoomId = data?.roomId || data?.message?.roomId || data?.message?.room;\n                if (messageRoomId === roomId) {\n                    onMessageReceived(data);\n                }\n            };\n            \n            socketService.socket.on('new_message', directHandler);\n            cleanupFunctions.push(() => socketService.socket.off('new_message', directHandler));\n            \n            devLog('RealtimeMessageFix', '✅ Direct socket listener added');\n        }\n        \n        // Method 2: Socket service listener\n        const serviceHandler = (data) => {\n            devLog('RealtimeMessageFix', '📨 Service listener received new_message', data);\n            \n            // Check if message is for this room\n            const messageRoomId = data?.roomId || data?.message?.roomId || data?.message?.room;\n            if (messageRoomId === roomId) {\n                onMessageReceived(data);\n            }\n        };\n        \n        socketService.on('new_message', serviceHandler);\n        cleanupFunctions.push(() => socketService.off('new_message', serviceHandler));\n        \n        devLog('RealtimeMessageFix', '✅ Service listener added');\n        \n        // Method 3: Catch-all listener for debugging\n        if (socketService.socket) {\n            const catchAllHandler = (eventName, ...args) => {\n                if (eventName === 'new_message' || eventName.includes('message')) {\n                    devLog('RealtimeMessageFix', `🎯 Catch-all received ${eventName}`, args);\n                    \n                    // Try to extract and process message\n                    const data = args[0];\n                    const messageRoomId = data?.roomId || data?.message?.roomId || data?.message?.room;\n                    if (messageRoomId === roomId && eventName === 'new_message') {\n                        onMessageReceived(data);\n                    }\n                }\n            };\n            \n            socketService.socket.onAny(catchAllHandler);\n            cleanupFunctions.push(() => socketService.socket.offAny(catchAllHandler));\n            \n            devLog('RealtimeMessageFix', '✅ Catch-all listener added');\n        }\n        \n        // Method 4: Poll for socket readiness and re-attach if needed\n        let pollCount = 0;\n        const pollInterval = setInterval(() => {\n            pollCount++;\n            \n            if (socketService.socket && socketService.isAuthenticated) {\n                // Check if listeners are still attached\n                const hasListeners = socketService.socket.listeners('new_message').length > 0;\n                \n                if (!hasListeners && pollCount < 10) {\n                    devLog('RealtimeMessageFix', '⚠️ No listeners found, re-attaching...');\n                    \n                    // Re-attach direct listener\n                    const reattachHandler = (data) => {\n                        devLog('RealtimeMessageFix', '📨 Re-attached listener received', data);\n                        const messageRoomId = data?.roomId || data?.message?.roomId || data?.message?.room;\n                        if (messageRoomId === roomId) {\n                            onMessageReceived(data);\n                        }\n                    };\n                    \n                    socketService.socket.on('new_message', reattachHandler);\n                    cleanupFunctions.push(() => socketService.socket.off('new_message', reattachHandler));\n                }\n                \n                if (pollCount >= 10) {\n                    clearInterval(pollInterval);\n                }\n            }\n        }, 1000);\n        \n        cleanupFunctions.push(() => clearInterval(pollInterval));\n        \n    } catch (error) {\n        devError('RealtimeMessageFix', 'Error setting up listeners', error);\n    }\n    \n    // Return cleanup function\n    return () => {\n        devLog('RealtimeMessageFix', '🧹 Cleaning up real-time message listeners');\n        cleanupFunctions.forEach(cleanup => {\n            try {\n                cleanup();\n            } catch (error) {\n                devError('RealtimeMessageFix', 'Error during cleanup', error);\n            }\n        });\n    };\n}\n\n// Helper to manually trigger a test message event\nexport function testMessageReception(roomId, testMessage) {\n    devLog('RealtimeMessageFix', '🧪 Testing message reception');\n    \n    if (socketService.socket) {\n        // Simulate receiving a message\n        const testData = {\n            roomId,\n            message: {\n                _id: `test_${Date.now()}`,\n                roomId,\n                content: testMessage || 'Test message',\n                sender: {\n                    _id: 'test_sender',\n                    name: 'Test User'\n                },\n                createdAt: new Date().toISOString()\n            },\n            timestamp: new Date()\n        };\n        \n        // Emit on the socket to test reception\n        socketService.socket.emit('new_message', testData);\n        devLog('RealtimeMessageFix', '✅ Test message emitted');\n    } else {\n        devLog('RealtimeMessageFix', '❌ No socket available for test');\n    }\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/realtimeUpdates.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":48,"fix":{"range":[47,47],"text":"\n"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":63,"column":6,"nodeType":"Property","messageId":"missing","endLine":64,"endColumn":1,"fix":{"range":[1993,1996],"text":"},\n}"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":95,"column":10,"nodeType":"Property","messageId":"missing","endLine":96,"endColumn":1,"fix":{"range":[3084,3091],"text":"},\n    }"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import apiClient from '../services/api/client';\nimport { devLog } from './devLog';\n\n/**\n * Centralized real-time update handler for cache invalidation\n */\nexport const realtimeUpdateHandlers = {\n    // Budget updates\n    handleBudgetUpdate: (data) => {\n        devLog('RealtimeUpdates', 'Budget update received', data);\n        // Clear all budget-related caches\n        apiClient.clearCache('/budget');\n        apiClient.clearCache('/budget/summary');\n        return data;\n    },\n\n    // Checklist updates\n    handleChecklistUpdate: (data) => {\n        devLog('RealtimeUpdates', 'Checklist update received', data);\n        // Clear checklist cache\n        apiClient.clearCache('/checklist');\n        return data;\n    },\n\n    // Event updates\n    handleEventUpdate: (data) => {\n        devLog('RealtimeUpdates', 'Event update received', data);\n        // Clear event-related caches\n        apiClient.clearCache('/events');\n        if (data.event?._id) {\n            apiClient.clearCache(`/events/${data.event._id}`);\n        }\n        return data;\n    },\n\n    // Forum updates\n    handleForumUpdate: (data) => {\n        devLog('RealtimeUpdates', 'Forum update received', data);\n        // Clear forum caches\n        apiClient.clearCache('/forums');\n        if (data.forum?._id) {\n            apiClient.clearCache(`/forums/${data.forum._id}`);\n        }\n        return data;\n    },\n\n    // Message updates\n    handleMessageUpdate: (data) => {\n        devLog('RealtimeUpdates', 'Message update received', data);\n        // Clear message-related caches\n        apiClient.clearCache('/messages');\n        apiClient.clearCache('/messages/conversations');\n        if (data.roomId) {\n            apiClient.clearCache(`/chat/rooms/${data.roomId}/messages`);\n        }\n        return data;\n    },\n\n    // Clear all caches when connection is re-established\n    handleReconnect: () => {\n        devLog('RealtimeUpdates', 'Socket reconnected, clearing all caches');\n        apiClient.clearAllCache();\n    }\n};\n\n/**\n * Hook to setup real-time updates with cache invalidation\n */\nexport const useRealtimeUpdates = (handlers = {}) => {\n    // Combine default handlers with custom ones\n    const allHandlers = {\n        budget_update: (data) => {\n            realtimeUpdateHandlers.handleBudgetUpdate(data);\n            handlers.budget_update?.(data);\n        },\n        checklist_update: (data) => {\n            realtimeUpdateHandlers.handleChecklistUpdate(data);\n            handlers.checklist_update?.(data);\n        },\n        event_update: (data) => {\n            realtimeUpdateHandlers.handleEventUpdate(data);\n            handlers.event_update?.(data);\n        },\n        forum_update: (data) => {\n            realtimeUpdateHandlers.handleForumUpdate(data);\n            handlers.forum_update?.(data);\n        },\n        new_message: (data) => {\n            realtimeUpdateHandlers.handleMessageUpdate(data);\n            handlers.new_message?.(data);\n        },\n        authenticated: () => {\n            realtimeUpdateHandlers.handleReconnect();\n            handlers.authenticated?.();\n        }\n    };\n\n    return allHandlers;\n};","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/security.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/socketConnectionManager.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":59,"fix":{"range":[215,215],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`../services/realtimeService` import should occur before import of `../services/socketServiceFixed`","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":59,"fix":{"range":[97,216],"text":"import realtimeService from '../services/realtimeService';\nimport socketService from '../services/socketServiceFixed';\n"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":104,"column":67,"nodeType":"Property","messageId":"missing","endLine":105,"endColumn":1,"fix":{"range":[4017,4048],"text":"connected,\n                    }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":141,"column":52,"nodeType":"Property","messageId":"missing","endLine":142,"endColumn":1,"fix":{"range":[5131,5148],"text":"details,\n        }"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"/**\n * Socket Connection Manager\n * Ensures socket connection is established and maintained\n */\n\nimport socketService from '../services/socketServiceFixed';\nimport realtimeService from '../services/realtimeService';\nimport { devLog, devError } from './devLog';\n\nclass SocketConnectionManager {\n    constructor() {\n        this.connectionCheckInterval = null;\n        this.connectionAttempts = 0;\n        this.maxAttempts = 5;\n        this.isMonitoring = false;\n    }\n\n    /**\n     * Start monitoring socket connection\n     */\n    async startMonitoring(userId) {\n        if (this.isMonitoring) {\n            devLog('SocketConnectionManager', 'Already monitoring connection');\n            return;\n        }\n\n        this.isMonitoring = true;\n        this.userId = userId;\n        this.connectionAttempts = 0; // Reset on start\n        \n        // Use hybrid realtime service\n        const mode = await realtimeService.initialize(userId);\n        devLog('SocketConnectionManager', `Initialized with mode: ${mode}`);\n        \n        // Only monitor WebSocket if that's the mode\n        if (mode === 'websocket') {\n            // Check connection every 10 seconds\n            this.connectionCheckInterval = setInterval(() => {\n                // Reset attempts counter every minute (6 intervals)\n                if (this.connectionAttempts >= this.maxAttempts) {\n                    devLog('SocketConnectionManager', 'Resetting connection attempts for new cycle');\n                    this.connectionAttempts = 0;\n                }\n                this.ensureConnection();\n            }, 10000);\n        }\n        \n        devLog('SocketConnectionManager', `Started monitoring (mode: ${mode})`);\n    }\n\n    /**\n     * Stop monitoring socket connection\n     */\n    stopMonitoring() {\n        if (this.connectionCheckInterval) {\n            clearInterval(this.connectionCheckInterval);\n            this.connectionCheckInterval = null;\n        }\n        this.isMonitoring = false;\n        this.connectionAttempts = 0;\n        devLog('SocketConnectionManager', 'Stopped monitoring socket connection');\n    }\n\n    /**\n     * Ensure socket is connected\n     */\n    async ensureConnection() {\n        try {\n            // Check if already connected\n            if (socketService.isConnected()) {\n                this.connectionAttempts = 0; // Reset attempts on successful connection\n                return true;\n            }\n\n            // Don't retry if max attempts reached in this cycle\n            if (this.connectionAttempts >= this.maxAttempts) {\n                devLog('SocketConnectionManager', `Max connection attempts (${this.maxAttempts}) reached for this cycle`);\n                return false;\n            }\n\n            // Attempt connection\n            if (this.userId) {\n                devLog('SocketConnectionManager', `Attempting to connect socket (attempt ${this.connectionAttempts + 1}/${this.maxAttempts})`);\n                this.connectionAttempts++;\n                \n                await socketService.connect(this.userId);\n                \n                // Wait a bit for connection to establish\n                await new Promise(resolve => setTimeout(resolve, 2000));\n                \n                // Check if connection was successful\n                if (socketService.isConnected()) {\n                    devLog('SocketConnectionManager', 'Socket connection established successfully');\n                    this.connectionAttempts = 0;\n                    return true;\n                } else {\n                    const state = socketService.getConnectionState();\n                    const socketId = socketService.getSocketId();\n                    devLog('SocketConnectionManager', 'Socket connection attempt completed but not connected', {\n                        state,\n                        socketId,\n                        isAuthenticated: socketService.isAuthenticated,\n                        socket: !!socketService.socket,\n                        connected: socketService.socket?.connected\n                    });\n                    return false;\n                }\n            }\n        } catch (error) {\n            devError('SocketConnectionManager', 'Error ensuring socket connection', error);\n            return false;\n        }\n    }\n\n    /**\n     * Force reconnect\n     */\n    async forceReconnect() {\n        devLog('SocketConnectionManager', 'Forcing socket reconnection');\n        socketService.disconnect();\n        this.connectionAttempts = 0;\n        \n        if (this.userId) {\n            await this.ensureConnection();\n        }\n    }\n\n    /**\n     * Get connection status\n     */\n    getStatus() {\n        const realtimeStatus = realtimeService.getStatus();\n        return {\n            mode: realtimeStatus.mode,\n            isConnected: realtimeStatus.connected,\n            isAuthenticated: socketService.isAuthenticated,\n            connectionState: socketService.getConnectionState(),\n            socketId: socketService.getSocketId(),\n            attempts: this.connectionAttempts,\n            isMonitoring: this.isMonitoring,\n            realtimeDetails: realtimeStatus.details\n        };\n    }\n}\n\n// Create singleton instance\nconst socketConnectionManager = new SocketConnectionManager();\n\nexport default socketConnectionManager;","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/socketDebugger.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":55,"fix":{"range":[133,133],"text":"\n"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":28,"column":56,"nodeType":"Property","messageId":"missing","endLine":29,"endColumn":1,"fix":{"range":[842,861],"text":"),\n                }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":42,"column":31,"nodeType":"Property","messageId":"missing","endLine":43,"endColumn":1,"fix":{"range":[1422,1444],"text":"args,\n                }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":60,"column":64,"nodeType":"Property","messageId":"missing","endLine":61,"endColumn":1,"fix":{"range":[1968,1979],"text":"),\n        }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":94,"column":52,"nodeType":"Property","messageId":"missing","endLine":95,"endColumn":1,"fix":{"range":[2973,2996],"text":"messageEvents,\n        }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":113,"column":28,"nodeType":"Property","messageId":"missing","endLine":114,"endColumn":1,"fix":{"range":[3588,3599],"text":"],\n        }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":127,"column":55,"nodeType":"Property","messageId":"missing","endLine":128,"endColumn":1,"fix":{"range":[4095,4109],"text":"}ms`,\n        }"}}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":7,"fixableWarningCount":0,"source":"/**\n * Socket Debugger - Tool to debug socket connection and message flow\n */\n\nimport socketService from '../services/socketService';\nimport { devLog } from './devLog';\n\nexport class SocketDebugger {\n    constructor() {\n        this.events = [];\n        this.messageEvents = [];\n        this.startTime = Date.now();\n    }\n\n    start(roomId) {\n        devLog('SocketDebugger', '🔍 Starting socket debugging for room:', roomId);\n        \n        // Check socket state\n        this.logSocketState();\n        \n        // Monitor all socket events\n        if (socketService.socket) {\n            socketService.socket.onAny((eventName, ...args) => {\n                const event = {\n                    time: Date.now() - this.startTime,\n                    eventName,\n                    args,\n                    timestamp: new Date().toISOString()\n                };\n                \n                this.events.push(event);\n                \n                // Special tracking for message events\n                if (eventName === 'new_message' || eventName.includes('message')) {\n                    this.messageEvents.push(event);\n                    devLog('SocketDebugger', '🔴 MESSAGE EVENT CAPTURED', event);\n                }\n                \n                // Log in real-time\n                devLog('SocketDebugger', `📡 Event: ${eventName}`, {\n                    time: `${event.time}ms`,\n                    args: args\n                });\n            });\n        }\n        \n        // Monitor socket state changes\n        this.monitorConnectionState();\n        \n        // Return stop function\n        return () => this.stop();\n    }\n    \n    logSocketState() {\n        const state = {\n            socketExists: !!socketService.socket,\n            connected: socketService.socket?.connected,\n            authenticated: socketService.isAuthenticated,\n            socketId: socketService.socket?.id,\n            connectionState: socketService.getConnectionState()\n        };\n        \n        devLog('SocketDebugger', '📊 Socket State:', state);\n        return state;\n    }\n    \n    monitorConnectionState() {\n        // Check state every second\n        this.stateInterval = setInterval(() => {\n            const state = this.logSocketState();\n            \n            // Alert if disconnected\n            if (!state.connected || !state.authenticated) {\n                devLog('SocketDebugger', '⚠️ Socket not fully connected!', state);\n            }\n        }, 1000);\n    }\n    \n    stop() {\n        if (this.stateInterval) {\n            clearInterval(this.stateInterval);\n        }\n        \n        // Generate report\n        this.generateReport();\n    }\n    \n    generateReport() {\n        devLog('SocketDebugger', '📋 Debug Report:', {\n            totalEvents: this.events.length,\n            messageEvents: this.messageEvents.length,\n            duration: `${Date.now() - this.startTime}ms`,\n            events: this.events,\n            messageEventDetails: this.messageEvents\n        });\n    }\n    \n    // Test sending a message\n    async testSendMessage(roomId, content = 'Test message from debugger') {\n        devLog('SocketDebugger', '🧪 Testing message send...');\n        \n        const state = this.logSocketState();\n        if (!state.connected || !state.authenticated) {\n            devLog('SocketDebugger', '❌ Cannot test - socket not ready', state);\n            return;\n        }\n        \n        // Try direct socket emit\n        socketService.socket.emit('sendMessage', {\n            roomId,\n            content,\n            type: 'text',\n            attachments: []\n        });\n        \n        devLog('SocketDebugger', '✅ Test message emitted');\n    }\n    \n    // Get current debugging info\n    getDebugInfo() {\n        return {\n            socketState: this.logSocketState(),\n            eventCount: this.events.length,\n            messageEventCount: this.messageEvents.length,\n            lastEvent: this.events[this.events.length - 1],\n            lastMessageEvent: this.messageEvents[this.messageEvents.length - 1],\n            uptime: `${Date.now() - this.startTime}ms`\n        };\n    }\n}\n\n// Export singleton instance\nexport const socketDebugger = new SocketDebugger();\n\n// Attach to window for easy access in development\nif (__DEV__ && typeof window !== 'undefined') {\n    window.socketDebugger = socketDebugger;\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/socketEventManager.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":48,"fix":{"range":[107,107],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`../services/api/client` import should occur before import of `../services/socketServiceFixed`","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":48,"fix":{"range":[0,108],"text":"import apiClient from '../services/api/client';\nimport socketService from '../services/socketServiceFixed';\n"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import socketService from '../services/socketServiceFixed';\nimport apiClient from '../services/api/client';\nimport { devLog, devError } from './devLog';\n\n/**\n * Socket Event Manager - Centralized handler for all socket events\n * Ensures proper event registration and cache invalidation\n */\nclass SocketEventManager {\n    constructor() {\n        this.eventHandlers = new Map();\n        this.localListeners = new Map(); // Store local listeners\n        this.isInitialized = false;\n    }\n\n    /**\n     * Initialize socket event listeners\n     * Should be called after socket authentication\n     */\n    initialize() {\n        if (this.isInitialized) {\n            devLog('SocketEventManager', 'Already initialized');\n            return;\n        }\n\n        // Register all event handlers\n        this.registerEventHandlers();\n        \n        // Set up authentication listener to re-register events\n        socketService.on('authenticated', () => {\n            devLog('SocketEventManager', 'Socket authenticated, ensuring all listeners are active');\n            this.ensureAllListenersActive();\n        });\n\n        this.isInitialized = true;\n        devLog('SocketEventManager', 'Initialized successfully');\n    }\n\n    /**\n     * Register all event handlers\n     */\n    registerEventHandlers() {\n        // Budget events\n        this.registerHandler('budget_update', (data) => {\n            devLog('SocketEvent', 'Budget update received:', data);\n            // Clear cache\n            apiClient.clearCache('/budget');\n            apiClient.clearCache('/budget/summary');\n            // Emit for screens to handle\n            this.emit('budget_update', data);\n        });\n\n        // Checklist events\n        this.registerHandler('checklist_update', (data) => {\n            devLog('SocketEvent', 'Checklist update received:', data);\n            // Clear cache\n            apiClient.clearCache('/checklist');\n            // Emit for screens to handle\n            this.emit('checklist_update', data);\n        });\n\n        // Event events\n        this.registerHandler('event_update', (data) => {\n            devLog('SocketEvent', 'Event update received:', data);\n            // Clear cache\n            apiClient.clearCache('/events');\n            if (data.event?._id) {\n                apiClient.clearCache(`/events/${data.event._id}`);\n            }\n            // Emit for screens to handle\n            this.emit('event_update', data);\n        });\n\n        // Forum events\n        this.registerHandler('forum_update', (data) => {\n            devLog('SocketEvent', 'Forum update received:', data);\n            // Clear cache\n            apiClient.clearCache('/forums');\n            if (data.forum?._id) {\n                apiClient.clearCache(`/forums/${data.forum._id}`);\n            }\n            // Emit for screens to handle\n            this.emit('forum_update', data);\n        });\n\n        // Message events\n        this.registerHandler('new_message', (data) => {\n            devLog('SocketEvent', 'New message received:', data);\n            // Clear cache\n            apiClient.clearCache('/messages');\n            apiClient.clearCache('/messages/conversations');\n            apiClient.clearCache('/forums');\n            if (data.roomId) {\n                apiClient.clearCache(`/chat/rooms/${data.roomId}/messages`);\n            }\n            // Emit for screens to handle\n            this.emit('new_message', data);\n        });\n\n        // Dashboard events\n        this.registerHandler('dashboard_update', (data) => {\n            devLog('SocketEvent', 'Dashboard update received:', data);\n            // Clear relevant caches\n            apiClient.clearCache('/dashboard');\n            apiClient.clearCache('/dashboard/stats');\n            // Emit for screens to handle\n            this.emit('dashboard_update', data);\n        });\n\n        // Connection state changes\n        this.registerHandler('connection_state_change', (state) => {\n            devLog('SocketEvent', 'Connection state changed:', state);\n            if (state === 'connected') {\n                // Clear all caches on reconnection\n                apiClient.clearAllCache();\n            }\n            this.emit('connection_state_change', state);\n        });\n\n        // User status events\n        this.registerHandler('user_status_update', (data) => {\n            devLog('SocketEvent', 'User status update:', data);\n            this.emit('user_status_update', data);\n        });\n    }\n\n    /**\n     * Register a handler for a socket event\n     */\n    registerHandler(event, handler) {\n        // Store handler\n        this.eventHandlers.set(event, handler);\n        \n        // Register with socket service\n        socketService.on(event, handler);\n        \n        devLog('SocketEventManager', `Registered handler for event: ${event}`);\n    }\n\n    /**\n     * Ensure all listeners are active (called after reconnection)\n     */\n    ensureAllListenersActive() {\n        this.eventHandlers.forEach((handler, event) => {\n            // Re-register handler\n            socketService.off(event, handler);\n            socketService.on(event, handler);\n            devLog('SocketEventManager', `Re-registered handler for event: ${event}`);\n        });\n    }\n\n    /**\n     * Emit event to local listeners (screens)\n     */\n    emit(event, data) {\n        devLog('SocketEventManager', `Emitting local event: ${event}`, data);\n        \n        // Get all listeners for this event\n        const listeners = this.localListeners.get(event) || [];\n        \n        // Call each listener\n        listeners.forEach(listener => {\n            try {\n                listener(data);\n            } catch (error) {\n                devError('SocketEventManager', `Error in listener for ${event}:`, error);\n            }\n        });\n    }\n    \n    /**\n     * Register a local listener for events\n     */\n    on(event, callback) {\n        if (!this.localListeners.has(event)) {\n            this.localListeners.set(event, []);\n        }\n        this.localListeners.get(event).push(callback);\n        \n        // Return unsubscribe function\n        return () => {\n            const listeners = this.localListeners.get(event);\n            if (listeners) {\n                const index = listeners.indexOf(callback);\n                if (index > -1) {\n                    listeners.splice(index, 1);\n                }\n            }\n        };\n    }\n    \n    /**\n     * Remove all listeners for an event\n     */\n    off(event, callback = null) {\n        if (callback) {\n            const listeners = this.localListeners.get(event);\n            if (listeners) {\n                const index = listeners.indexOf(callback);\n                if (index > -1) {\n                    listeners.splice(index, 1);\n                }\n            }\n        } else {\n            this.localListeners.delete(event);\n        }\n    }\n\n    /**\n     * Clean up all event listeners\n     */\n    cleanup() {\n        this.eventHandlers.forEach((handler, event) => {\n            socketService.off(event, handler);\n        });\n        this.eventHandlers.clear();\n        this.localListeners.clear();\n        this.isInitialized = false;\n        devLog('SocketEventManager', 'Cleaned up all event listeners');\n    }\n}\n\n// Create singleton instance\nconst socketEventManager = new SocketEventManager();\n\nexport default socketEventManager;","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/storage.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/testDirectSocketConnection.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":35,"fix":{"range":[99,99],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":50,"fix":{"range":[149,149],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":45,"fix":{"range":[194,194],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`@react-native-async-storage/async-storage` import should occur before import of `socket.io-client`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":70,"fix":{"range":[65,265],"text":"import AsyncStorage from '@react-native-async-storage/async-storage';\nimport io from 'socket.io-client';\nimport { API_BASE_URL } from '../config/network';\nimport { devLog, devError } from './devLog';\n"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":22,"column":30,"nodeType":"Property","messageId":"missing","endLine":23,"endColumn":1,"fix":{"range":[763,776],"text":"_id,\n        }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":39,"column":35,"nodeType":"Property","messageId":"missing","endLine":40,"endColumn":1,"fix":{"range":[1348,1364],"text":"'',\n            }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":42,"column":35,"nodeType":"Property","messageId":"missing","endLine":43,"endColumn":1,"fix":{"range":[1418,1434],"text":"'',\n            }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":43,"column":14,"nodeType":"Property","messageId":"missing","endLine":44,"endColumn":1,"fix":{"range":[1433,1444],"text":"},\n        }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":50,"column":48,"nodeType":"Property","messageId":"missing","endLine":51,"endColumn":1,"fix":{"range":[1653,1676],"text":"connected,\n            }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":58,"column":33,"nodeType":"Property","messageId":"missing","endLine":59,"endColumn":1,"fix":{"range":[1914,1932],"text":"data,\n            }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":80,"column":58,"nodeType":"Property","messageId":"missing","endLine":81,"endColumn":1,"fix":{"range":[2615,2645],"text":"disconnected,\n                }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":101,"column":45,"nodeType":"Property","messageId":"missing","endLine":102,"endColumn":1,"fix":{"range":[3204,3236],"text":"'application/json',\n            }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":102,"column":14,"nodeType":"Property","messageId":"missing","endLine":103,"endColumn":1,"fix":{"range":[3235,3246],"text":"},\n        }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":108,"column":17,"nodeType":"Property","messageId":"missing","endLine":109,"endColumn":1,"fix":{"range":[3424,3438],"text":"data,\n        }"}}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":14,"fixableWarningCount":0,"source":"/**\n * Test direct socket connection without authentication\n */\n\nimport io from 'socket.io-client';\nimport { API_BASE_URL } from '../config/network';\nimport { devLog, devError } from './devLog';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport const testDirectSocketConnection = async () => {\n    devLog('TestSocket', '=== Starting Direct Socket Connection Test ===');\n    \n    try {\n        // Get stored token\n        const token = await AsyncStorage.getItem('userToken');\n        const userStr = await AsyncStorage.getItem('user');\n        const user = userStr ? JSON.parse(userStr) : null;\n        \n        devLog('TestSocket', 'Auth info:', {\n            hasToken: !!token,\n            hasUser: !!user,\n            userId: user?._id\n        });\n        \n        // Get socket URL\n        const socketUrl = API_BASE_URL.replace('/api', '');\n        devLog('TestSocket', 'Connecting to:', socketUrl);\n        \n        // Create test socket with minimal config\n        const testSocket = io(socketUrl, {\n            transports: ['polling', 'websocket'],\n            path: '/socket.io/',\n            autoConnect: false,\n            timeout: 10000,\n            reconnection: false,\n            query: {\n                userId: user?._id || 'test-user',\n                platform: 'test',\n                token: token || ''\n            },\n            auth: {\n                token: token || ''\n            }\n        });\n        \n        // Setup event handlers\n        testSocket.on('connect', () => {\n            devLog('TestSocket', '✅ Connected!', {\n                id: testSocket.id,\n                connected: testSocket.connected\n            });\n        });\n        \n        testSocket.on('connect_error', (error) => {\n            devError('TestSocket', '❌ Connection error:', {\n                message: error.message,\n                type: error.type,\n                data: error.data\n            });\n        });\n        \n        testSocket.on('disconnect', (reason) => {\n            devLog('TestSocket', 'Disconnected:', reason);\n        });\n        \n        testSocket.onAny((eventName, ...args) => {\n            devLog('TestSocket', `Event received: ${eventName}`, args);\n        });\n        \n        // Connect\n        devLog('TestSocket', 'Attempting connection...');\n        testSocket.connect();\n        \n        // Wait for result\n        await new Promise((resolve) => {\n            setTimeout(() => {\n                const result = {\n                    connected: testSocket.connected,\n                    id: testSocket.id,\n                    disconnected: testSocket.disconnected\n                };\n                devLog('TestSocket', 'Final status:', result);\n                testSocket.disconnect();\n                resolve(result);\n            }, 5000);\n        });\n        \n    } catch (error) {\n        devError('TestSocket', 'Test failed:', error);\n    }\n    \n    devLog('TestSocket', '=== Test Complete ===');\n};\n\n// Also test basic HTTP connection\nexport const testHttpConnection = async () => {\n    try {\n        const response = await fetch(`${API_BASE_URL}/health`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json'\n            }\n        });\n        const data = await response.json();\n        devLog('TestSocket', 'HTTP health check:', {\n            status: response.status,\n            ok: response.ok,\n            data\n        });\n        return response.ok;\n    } catch (error) {\n        devError('TestSocket', 'HTTP test failed:', error);\n        return false;\n    }\n};","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/testSocketConnection.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":51,"fix":{"range":[189,189],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`../services/chatService` import should occur before import of `../services/socketService`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":51,"fix":{"range":[84,190],"text":"import chatService from '../services/chatService';\nimport socketService from '../services/socketService';\n"}},{"ruleId":"max-len","severity":1,"message":"This line has a length of 104. Maximum allowed is 100.","line":45,"column":1,"nodeType":"Program","messageId":"max","endLine":45,"endColumn":105},{"ruleId":"no-unused-vars","severity":2,"message":"'roomId' is defined but never used. Allowed unused args must match /^_/u.","line":98,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":98,"endColumn":30},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":110,"column":52,"nodeType":"Property","messageId":"missing","endLine":111,"endColumn":1,"fix":{"range":[3796,3811],"text":"),\n            }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":136,"column":51,"nodeType":"Property","messageId":"missing","endLine":137,"endColumn":1,"fix":{"range":[4733,4749],"text":"id,\n            }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":141,"column":49,"nodeType":"Property","messageId":"missing","endLine":142,"endColumn":1,"fix":{"range":[4948,4974],"text":"receivedMessages,\n        }"}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":5,"fixableWarningCount":0,"source":"/**\n * Test Socket Connection - Debug tool to test real-time message reception\n */\n\nimport socketService from '../services/socketService';\nimport chatService from '../services/chatService';\nimport { devLog } from './devLog';\n\nexport class SocketConnectionTester {\n    constructor() {\n        this.receivedEvents = [];\n        this.receivedMessages = [];\n    }\n    \n    async runTest(userId, roomId) {\n        devLog('SocketTest', '🧪 Starting socket connection test', { userId, roomId });\n        \n        try {\n            // Step 1: Connect socket\n            devLog('SocketTest', '1️⃣ Connecting socket...');\n            await socketService.connect(userId);\n            \n            // Wait for connection\n            await this.waitForConnection();\n            \n            // Step 2: Check authentication\n            devLog('SocketTest', '2️⃣ Checking authentication...');\n            if (!socketService.isAuthenticated) {\n                devLog('SocketTest', '⏳ Waiting for authentication...');\n                await this.waitForAuthentication();\n            }\n            \n            devLog('SocketTest', '✅ Socket authenticated');\n            \n            // Step 3: Join room\n            devLog('SocketTest', '3️⃣ Joining room...');\n            socketService.joinRoom(roomId);\n            \n            // Step 4: Setup direct listeners\n            devLog('SocketTest', '4️⃣ Setting up test listeners...');\n            this.setupTestListeners(roomId);\n            \n            // Step 5: Send a test message\n            devLog('SocketTest', '5️⃣ Sending test message...');\n            const testContent = `Test message from socket tester at ${new Date().toLocaleTimeString()}`;\n            \n            try {\n                const sentMessage = await chatService.sendMessage(roomId, testContent);\n                devLog('SocketTest', '✅ Test message sent', sentMessage);\n            } catch (error) {\n                devLog('SocketTest', '❌ Failed to send test message', error);\n            }\n            \n            // Step 6: Wait and check for received events\n            devLog('SocketTest', '6️⃣ Waiting for socket events...');\n            await new Promise(resolve => setTimeout(resolve, 5000));\n            \n            // Generate report\n            this.generateReport();\n            \n        } catch (error) {\n            devLog('SocketTest', '❌ Test failed', error);\n        }\n    }\n    \n    async waitForConnection() {\n        const maxWait = 5000;\n        const checkInterval = 100;\n        let waited = 0;\n        \n        while (!socketService.socket?.connected && waited < maxWait) {\n            await new Promise(resolve => setTimeout(resolve, checkInterval));\n            waited += checkInterval;\n        }\n        \n        if (!socketService.socket?.connected) {\n            throw new Error('Socket connection timeout');\n        }\n        \n        devLog('SocketTest', '✅ Socket connected');\n    }\n    \n    async waitForAuthentication() {\n        const maxWait = 3000;\n        const checkInterval = 100;\n        let waited = 0;\n        \n        while (!socketService.isAuthenticated && waited < maxWait) {\n            await new Promise(resolve => setTimeout(resolve, checkInterval));\n            waited += checkInterval;\n        }\n        \n        if (!socketService.isAuthenticated) {\n            throw new Error('Authentication timeout');\n        }\n    }\n    \n    setupTestListeners(roomId) {\n        const socket = socketService.socket;\n        if (!socket) {\n            devLog('SocketTest', '❌ No socket available');\n            return;\n        }\n        \n        // Listen to all events\n        socket.onAny((eventName, ...args) => {\n            const event = {\n                eventName,\n                args,\n                timestamp: new Date().toISOString()\n            };\n            \n            this.receivedEvents.push(event);\n            devLog('SocketTest', `📨 Event received: ${eventName}`, args);\n            \n            // Track message events specifically\n            if (eventName === 'new_message') {\n                this.receivedMessages.push(event);\n                devLog('SocketTest', '🔴 NEW MESSAGE EVENT!', event);\n            }\n        });\n        \n        // Also add specific new_message listener\n        socket.on('new_message', (data) => {\n            devLog('SocketTest', '🎯 Direct new_message listener triggered!', data);\n        });\n        \n        devLog('SocketTest', '✅ Test listeners setup complete');\n    }\n    \n    generateReport() {\n        const report = {\n            socketState: {\n                connected: socketService.socket?.connected,\n                authenticated: socketService.isAuthenticated,\n                socketId: socketService.socket?.id\n            },\n            eventsReceived: this.receivedEvents.length,\n            messageEventsReceived: this.receivedMessages.length,\n            allEvents: this.receivedEvents,\n            messageEvents: this.receivedMessages\n        };\n        \n        devLog('SocketTest', '📊 Test Report:', report);\n        \n        if (this.receivedMessages.length === 0) {\n            devLog('SocketTest', '⚠️ No message events received!');\n            devLog('SocketTest', 'Possible issues:');\n            devLog('SocketTest', '1. Backend not emitting to correct room');\n            devLog('SocketTest', '2. Socket not properly joined to room');\n            devLog('SocketTest', '3. Event name mismatch');\n            devLog('SocketTest', '4. Authentication issues');\n        } else {\n            devLog('SocketTest', '✅ Message events received successfully!');\n        }\n        \n        return report;\n    }\n}\n\n// Export for easy testing\nexport const testSocketConnection = async (userId, roomId) => {\n    const tester = new SocketConnectionTester();\n    await tester.runTest(userId, roomId);\n};\n\n// Attach to window for development\nif (__DEV__ && typeof window !== 'undefined') {\n    window.testSocketConnection = testSocketConnection;\n}","usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/validation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/macbook/Documents/projects/erasmus_proj/mobile_app_main/frontend/src/utils/webPolyfills.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"comma-dangle","replacedBy":[]},{"ruleId":"quotes","replacedBy":[]},{"ruleId":"semi","replacedBy":[]},{"ruleId":"indent","replacedBy":[]},{"ruleId":"object-curly-spacing","replacedBy":[]},{"ruleId":"array-bracket-spacing","replacedBy":[]},{"ruleId":"max-len","replacedBy":[]},{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
